<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>chrome 扩展程序开发</title>
      <link href="/posts/8033.html"/>
      <url>/posts/8033.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Chrome 扩展程序是一种可以在浏览器中运行的程序，借助浏览器提供的 API，可以增强页面的功能。Chrome 扩展程序的语法和 Web 前端类似，也是 html/css/js 的组合。</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>Chrome 扩展程序主要由以下几部分组成：</p><ul><li>Manifest.json：描述扩展程序的基本信息，包括名称、版本、作者、描述等。</li><li>Background Script：后台脚本，扩展程序加载时会被自动执行，并且一直存在于扩展程序的整个生命周期。</li><li>Content Script：内容脚本，会插入到页面中，可以访问 DOM 并且可以修改 DOM，也可以和扩展程序通信。</li><li>UI elements：用来增强浏览器的用户体验，如果扩展程序需要显示一些 UI 元素，可以在这里添加。比如右键菜单、快捷键、地址栏和点击插件出现的 popup 等。</li><li>Options page：设置页面，用来设置扩展程序的一些配置信息。</li></ul><p>除了 Manifest.json 必须存在外，其他所有文件都是可选的。</p><h3 id="Manifest-json"><a href="#Manifest-json" class="headerlink" title="Manifest.json"></a>Manifest.json</h3><p>必须有的属性：</p><ul><li>manifest_version - manifest 的版本</li><li>name - 插件的名字</li><li>version - 插件版本</li></ul><p>manifest_version 目前 Chrome 浏览器推荐 3，2023 年将停止支持 2，但目前国内如 360 安全浏览器等浏览器仍然只支持 2。</p><h3 id="Content-Script-的注入方式"><a href="#Content-Script-的注入方式" class="headerlink" title="Content Script 的注入方式"></a>Content Script 的注入方式</h3><p>1）静态声明式注入</p><p>在 manifest.json 中的 content_scripts 的字段：</p><pre class="line-numbers language-none"><code class="language-none">&#123; &quot;name&quot;: &quot;My extension&quot;, ... &quot;content_scripts&quot;: [   &#123;     &quot;matches&quot;: [&quot;https:&#x2F;&#x2F;*.nytimes.com&#x2F;*&quot;],     &quot;css&quot;: [&quot;my-styles.css&quot;],     &quot;js&quot;: [&quot;content-script.js&quot;]   &#125; ], ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）以编程方式注入</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//// content-script.js ////</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'orange'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//// background.js ////</span>chrome<span class="token punctuation">.</span>action<span class="token punctuation">.</span>onClicked<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">tab</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  chrome<span class="token punctuation">.</span>scripting<span class="token punctuation">.</span><span class="token function">executeScript</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    target<span class="token operator">:</span> <span class="token punctuation">&#123;</span> tabId<span class="token operator">:</span> tab<span class="token punctuation">.</span>id <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    files<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'content-script.js'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="v2-和-v3-版本的一些差异"><a href="#v2-和-v3-版本的一些差异" class="headerlink" title="v2 和 v3 版本的一些差异"></a>v2 和 v3 版本的一些差异</h2><ol><li>background 使用了 service worker 替代了原来的 background 页面</li><li>需要指定 host permissions</li><li>browser_action 和 page_action 合并为 action</li><li>web_accessible_resources 由字符串数组变为对象数组</li></ol><p>更多请查阅官方文档。</p><h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><ol><li>扩展程序中的 html 不能执行内联 js。</li><li>manifest.json 中的 Match patterns 包含 scheme、host、path 三个部分，v3 版本使用 <all_urls> 匹配所有 url。</li><li>很多扩展 API 已支持 promise，如果没有传 callback 参数则返回 promise。</li></ol><h2 id="为扩展程序提供的常用-API"><a href="#为扩展程序提供的常用-API" class="headerlink" title="为扩展程序提供的常用 API"></a>为扩展程序提供的常用 API</h2><ol><li>chrome.cookies - 操作 cookie</li><li>chrome.tabs - tab 相关</li><li>chrome.webRequest - 观察、分析、拦截、修改请求</li><li>chrome.bookmarks - 操作书签</li><li>chrome.contextMenus - 操作右键菜单</li><li>chrome.storage - 操作本地存储</li></ol><h2 id="安装和调试"><a href="#安装和调试" class="headerlink" title="安装和调试"></a>安装和调试</h2><ol><li>浏览器打开扩展程序管理界面 chrome://extensions</li><li>开启 “开发者模式”</li><li>可以选择 “加载已解压的扩展程序”，选择本地开发目录</li></ol><p>开发时可以点击扩展程序开关旁边的刷新按钮重新载入插件。要调试 popup 需要在菜单栏右键扩展程序选择 Inspect Popup, 调试 background 则需要在扩展程序管理界面中对应扩展找到 background 页面或者 service worker （v3）。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> chrome 扩展程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 基础回顾</title>
      <link href="/posts/47080.html"/>
      <url>/posts/47080.html</url>
      
        <content type="html"><![CDATA[<h2 id="docker-简介"><a href="#docker-简介" class="headerlink" title="docker 简介"></a>docker 简介</h2><p>docker 在英文中有码头工人的意思，码头工人将货物装载到集装箱，而 docker 则将开发者的应用打包成一个可供容器使用的镜像，并且可以分享给其他开发者使用。</p><p>Docker 是一个开源的应用容器引擎。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口，更重要的是容器性能开销极低。</p><p>Docker 的应用场景</p><ul><li>Web 应用的自动化打包和发布。</li><li>自动化测试和持续集成、发布。</li><li>在服务型环境中部署和调整数据库或其他的后台应用。</li><li>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</li></ul><p>Docker 的优点</p><ol><li>快速一致地交付您的应用程序</li><li>响应式部署和扩展</li><li>在同一硬件上运行更多工作负载</li></ol><h2 id="docker-基本概念"><a href="#docker-基本概念" class="headerlink" title="docker 基本概念"></a>docker 基本概念</h2><p>镜像（Image）：Docker 镜像（Image），就相当于是一个 root 文件系统。操作系统分为 内核 和 用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。</p><p>容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。</p><p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p><p>仓库（Repository）：仓库可看成一个代码控制中心，类似 github，用来保存镜像。</p><h2 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h2><p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载镜像</span>docker pull ubuntu<span class="token comment"># 删除镜像</span>docker rmi ubuntu<span class="token comment"># 上传镜像</span>docker tag ubuntu:latest docker.io/library/ubuntudocker push docker.io/library/ubuntu<span class="token comment"># 查看镜像</span>docker images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="操作容器"><a href="#操作容器" class="headerlink" title="操作容器"></a>操作容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建容器并运行</span><span class="token comment"># -it：参数 -i 交互式操作，参数 -t 表示 终端</span>docker run -it ubuntu:18.04 /bin/bash<span class="token comment"># --rm 这个参数是说容器退出后随之将其删除</span>docker run -it --rm ubuntu:18.04 <span class="token function">bash</span><span class="token comment"># -d：这个参数是说容器运行后不关闭，而是保持运行状态, --name 参数制定容器命名</span>docker run -itd --name ubuntu-test ubuntu /bin/bash<span class="token comment">#  -p 参数：指定容器的网络端口映射，-p 8080:8080：指定容器的 8080 端口映射到宿主机的 8080 端口</span>docker run -d -p <span class="token number">8080</span>:8080 training/webapp python app.py<span class="token comment"># 查看容器的状态</span>docker <span class="token function">ps</span> -a<span class="token comment"># 查看最近的容器</span>docker <span class="token function">ps</span> -l<span class="token comment"># 停止一个已启动的容器</span>docker stop b750bbbcfd88<span class="token comment"># 启动一个已停止的容器</span>docker start b750bbbcfd88<span class="token comment"># 删除容器</span>docker <span class="token function">rm</span> b750bbbcfd88<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker-仓库管理"><a href="#Docker-仓库管理" class="headerlink" title="Docker 仓库管理"></a>Docker 仓库管理</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 登录</span>docker login<span class="token comment"># 登出</span>docker <span class="token builtin class-name">logout</span><span class="token comment"># 搜索镜像</span>docker search ubuntu<span class="token comment"># 拉取镜像</span>docker pull ubuntu<span class="token comment"># 推送镜像</span>docker tag ubuntu:18.04 username/ubuntu:18.04docker push username/ubuntu:18.04<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile 是一个文件，用来描述镜像的构建过程，包含了一条条构建镜像所需的指令和说明。</p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p>FROM：指定构建镜像的基础镜像。</p><p>RUN：指定在构建镜像时执行的命令。</p><p>CMD：类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:</p><ul><li>CMD 在 docker run 时运行。</li><li>RUN 是在 docker build。</li></ul><p>作用：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。</p><p>COPY：指定在构建镜像时拷贝文件。</p><p>ENV：指定环境变量。在后续的指令中，可以使用这个环境变量。</p><pre class="line-numbers language-none"><code class="language-none">FROM nginxRUN echo &#39;&lt;h1&gt;Hello, Docker!&lt;&#x2F;h1&gt;&#39; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 Dockerfile 文件所在目录执行 docker build 命令，会生成一个镜像。</p><pre class="line-numbers language-none"><code class="language-none">docker build [选项] &lt;上下文路径&#x2F;URL&#x2F;-&gt;# -t 指定生成的镜像的名称docker build -t koa-demo .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.runoob.com/docker/docker-tutorial.html">Docker 教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021 年的 React 状态管理小结</title>
      <link href="/posts/53923.html"/>
      <url>/posts/53923.html</url>
      
        <content type="html"><![CDATA[<h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><p>redux 是 React 社区目前最流行的状态管理方案。</p><h3 id="redux-的数据流"><a href="#redux-的数据流" class="headerlink" title="redux 的数据流"></a>redux 的数据流</h3><p>redux 是单向数据流。组件通过 dispatch 一个 action 来触发 store 的修改，然后由 store 的 reducer 函数计算出新的状态，由于组件监听了 store 的数据变化，组件会拿到最新的数据重新渲染。这种数据流动是单向的，特别清晰。</p><p>Redux 三个基本原则：</p><ol><li>单一数据源。所有的状态都放到一个 store 里面，一个应用中一般只有一个 store</li><li>保持状态只读。在 Redux 中，只能通过 dispatch 一个 action 来修改 state</li><li>修改数据只能通过纯函数完成。</li></ol><h3 id="redux-基础"><a href="#redux-基础" class="headerlink" title="redux 基础"></a>redux 基础</h3><p>action: 是一个用于描述修改事件的普通对象。<br>reducer：规范 state 创建流程的函数。处理 action 的纯函数，通过传入 action 对象以及旧的 state，返回新的 state。<br>dispatch: 规范 setState 流程的函数。通过 dispatch 一个 action 来触发 store 的修改</p><h3 id="连接-React-react-redux"><a href="#连接-React-react-redux" class="headerlink" title="连接 React (react-redux)"></a>连接 React (react-redux)</h3><ol><li>使用 Provider 在根组件 注入 Store</li><li>组件使用 connect() 方法连接 Redux</li></ol><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>中间件（middleware）就是一个对 store 的 dispatch 进行修饰的函数。applyMiddleware 就是对 store.dispatch 做了层层包装，最后返回修改了 dispatch 之后的 store。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span><span class="token parameter">middlewares</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> dispatch <span class="token operator">=</span> store<span class="token punctuation">.</span>dispatch<span class="token punctuation">;</span>  middlewares<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">middleware</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>dispatch <span class="token operator">=</span> <span class="token function">middleware</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>store<span class="token punctuation">,</span> dispatch <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>redux-thunk 中间件就是加了判断 action 是否是一个函数的逻辑</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createThunkMiddleware</span><span class="token punctuation">(</span><span class="token parameter">extraArgument</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> dispatch<span class="token punctuation">,</span> getState <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token operator">=></span>    <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">action</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">,</span> extraArgument<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> thunk <span class="token operator">=</span> <span class="token function">createThunkMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>redux-promise 则是判断 action.payload 是否是个 promise</p><h3 id="一个简单实现"><a href="#一个简单实现" class="headerlink" title="一个简单实现"></a>一个简单实现</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useContext<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> appContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">let</span> reducer <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">const</span> listeners <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">setState</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// console.log(newState);</span>  state <span class="token operator">=</span> newState<span class="token punctuation">;</span>  listeners<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">fn</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">dispatch</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    listeners<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> index <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>      listeners<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> dispatch <span class="token operator">=</span> store<span class="token punctuation">.</span>dispatch<span class="token punctuation">;</span><span class="token keyword">const</span> prevDispatch <span class="token operator">=</span> dispatch<span class="token punctuation">;</span><span class="token comment">// redux-thunk</span><span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">action</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">prevDispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> preDispatch2 <span class="token operator">=</span> dispatch<span class="token punctuation">;</span><span class="token comment">// redux-promise</span><span class="token function-variable function">dispatch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload <span class="token keyword">instanceof</span> <span class="token class-name">Promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    action<span class="token punctuation">.</span>payload<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>action<span class="token punctuation">,</span>        payload<span class="token operator">:</span> data<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">preDispatch2</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 一个 middleware 就是一个函数，用来修饰 store 的 dispatch</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">createStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">_reducer<span class="token punctuation">,</span> initialState</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  state <span class="token operator">=</span> initialState<span class="token punctuation">;</span>  reducer <span class="token operator">=</span> _reducer<span class="token punctuation">;</span>  <span class="token keyword">return</span> store<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">changed</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">oldState<span class="token punctuation">,</span> newState</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> oldState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldState<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!==</span> newState<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> changed<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 将组件与全局状态连接</span><span class="token comment">// connect 第一个参数封装读，第二个参数封装写，两次调用可以封装读写 connectors</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">connect</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> dispatchSelector</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token parameter">Component</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> update<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> selector <span class="token operator">?</span> <span class="token function">selector</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span> state <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> dispatchers <span class="token operator">=</span> dispatchSelector      <span class="token operator">?</span> <span class="token function">dispatchSelector</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span>      <span class="token operator">:</span> <span class="token punctuation">&#123;</span> dispatch <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 检测变化，精准更新</span>        <span class="token keyword">const</span> newData <span class="token operator">=</span> selector <span class="token operator">?</span> <span class="token function">selector</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span> state <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">changed</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> newData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>selector<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>data<span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>dispatchers<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Provider</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> store<span class="token punctuation">,</span> children <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>appContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">&#123;</span>store<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>appContext<span class="token punctuation">.</span>Provider<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新的-redux-toolkit"><a href="#新的-redux-toolkit" class="headerlink" title="新的 redux-toolkit"></a>新的 redux-toolkit</h3><ol><li>减少了样板代码，配置更加简单</li><li>reducer 内置 immer.js ，降低心智</li><li>hooks 语法，内置 selector</li><li>异步请求：createAsyncThunk 和 RTK Query</li><li>规范化数据 createEntityAdapter</li></ol><h3 id="redux-复杂情况下的异步任务管理"><a href="#redux-复杂情况下的异步任务管理" class="headerlink" title="redux 复杂情况下的异步任务管理"></a>redux 复杂情况下的异步任务管理</h3><p>在面对多个异步过程之间的并行、串行等复杂情况时，前文提到的 redux-thunk、redux-promise 等中间件不容易处理。而 redux-saga 提供了 all、race、takeEvery、takeLatest 等 effect 来指定多个异步过程的关系，是一个比较优秀的异步过程管理工具。个人认为相对 rxjs 这种比较成熟的异步过程管理库还是有一定差距，不过可测试性不错。复杂异步过程管理的中间件还有基于 rxjs 的 redux-observable。在 redux-saga 之上，还有 dva，集成了 redux、redux-saga、react-router-redux、react-router，建议只在复杂场景下考虑使用。</p><h2 id="Mobx"><a href="#Mobx" class="headerlink" title="Mobx"></a>Mobx</h2><p>Mobx 也是一种在 React 社区非常流行的状态管理库。它通过透明的函数响应式编程(transparently applying functional reactive programming - TFRP)使得状态管理变得简单和可扩展。</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>MobX 区分了应用程序中的以下三个概念：</p><ol><li>State(状态)</li><li>Actions(动作)</li><li>Derivations(派生)</li></ol><ol><li>定义 State 并使其可观察。确保所有你想随时间改变的属性都被标记为 observable：</li></ol><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> makeObservable<span class="token punctuation">,</span> observable<span class="token punctuation">,</span> action <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'mobx'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Todo</span> <span class="token punctuation">&#123;</span>  id <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  title <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  finished <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">title</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">makeObservable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      title<span class="token operator">:</span> observable<span class="token punctuation">,</span>      finished<span class="token operator">:</span> observable<span class="token punctuation">,</span>      toggle<span class="token operator">:</span> action<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>finished <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>finished<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用 Action 更新 State</li></ol><p>Action(动作) 是任意可以改变 State(状态) 的代码，比如用户事件处理、后端推送数据处理、调度器事件处理等等。</p><ol start="3"><li>创建建 Derivations 以便自动对 State 变化进行响应</li></ol><p>任何 来源是 State(状态) 并且不需要进一步交互的东西都是 Derivation(派生)。</p><p>Derivations 包括许多方式:</p><ul><li>用户界面</li><li>派生数据 , 比如剩余未完成 todos 的数量</li><li>后端集成 , 比如发送改变到服务器端</li></ul><p>Mobx 区分了两种 Derivation :</p><ul><li>Computed values,总是可以通过纯函数从当前的可观测 State 中派生。</li><li>Reactions, 当 State 改变时需要自动运行的副作用 (命令式编程和响应式编程之间的桥梁)</li></ul><p>Computed values 类似 Vue 中的 computed，而 Reactions 类似 watch。</p><p>autorun 和 reaction 很相似。但是 autorun 里面的函数在第一次会立即执行一次，而 reaction 不会。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>同是响应式，与 Vue 类似，包括让数据变成响应式（可观察对象）、收集依赖、派发更新这几步。</p><ol><li>用 Object.defineProperty 或者 Proxy 来拦截 observable 包装的对象属性的 get/set 。</li><li>在 autorun 或者 reaction 执行的时候，会触发依赖状态的 get，此时将 autorun 里面的函数和依赖的状态关联起来。也就是我们常说的依赖收集。</li><li>当修改状态的时候会触发 set，此时会通知前面关联的函数，重新执行他们。</li></ol><h2 id="新的状态管理库"><a href="#新的状态管理库" class="headerlink" title="新的状态管理库"></a>新的状态管理库</h2><p>在 react 生态圈，状态管理库不停地涌现，个人认为比较有代表性有以下几个。</p><h3 id="Recoil"><a href="#Recoil" class="headerlink" title="Recoil"></a>Recoil</h3><p>Meta 公司内部开发的状态管理库，目前还在实验阶段。</p><p>出于兼容性和简便性的考虑，相比使用外部的全局状态，使用 React 内置的状态管理能力是个最佳的选择。但是 React 有这样一些局限性：</p><ul><li>组件间的状态共享只能通过将 state 提升至它们的公共祖先来实现，但这样做可能导致重新渲染一颗巨大的组件树。</li><li>Context 只能存储单一值，无法存储多个各自拥有消费者的值的集合。</li><li>以上两种方式都很难将组件树的顶层（state 必须存在的地方）与叶子组件 (使用 state 的地方) 进行代码分割。</li></ul><p>Recoil 定义了一个有向图 (directed graph)，正交同时又天然连结于你的 React 树上。状态的变化从该图的顶点（我们称之为 atom）开始，流经纯函数 (我们称之为 selector) 再传入组件。因此 Recoil 的核心概念就两个：atom 和 selector。</p><p>atom 是 Recoil 的最小粒度，一个 atom 代表一个状态，可以在任意组件中进行读写。</p><p>selector 是一个纯函数，类似于 Vue 和 Mobx 中的 computed 计算属性。它可以从 atom 或者其他 selector 里面来获取，selector 也可以被组件订阅，在变化的时候通知它们重新渲染。</p><p>如需在组件中使用 Recoil，则可以将 RecoilRoot 放置在父组件的某个位置。将他设为根组件为最佳：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import React from &#39;react&#39;;import &#123;  RecoilRoot,  atom,  selector,  useRecoilState,  useRecoilValue,&#125; from &#39;recoil&#39;;function App() &#123;  return (    &lt;RecoilRoot&gt;      &lt;CharacterCounter &#x2F;&gt;    &lt;&#x2F;RecoilRoot&gt;  );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成一个 atom：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">const textState &#x3D; atom(&#123;  key: &#39;textState&#39;, &#x2F;&#x2F; unique ID (with respect to other atoms&#x2F;selectors)  default: &#39;&#39;, &#x2F;&#x2F; default value (aka initial value)&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用，类似 React Hooks：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">function CharacterCounter() &#123;  return (    &lt;div&gt;      &lt;TextInput &#x2F;&gt;      &lt;CharacterCount &#x2F;&gt;    &lt;&#x2F;div&gt;  );&#125;function TextInput() &#123;  const [text, setText] &#x3D; useRecoilState(textState);  const onChange &#x3D; (event) &#x3D;&gt; &#123;    setText(event.target.value);  &#125;;  return (    &lt;div&gt;      &lt;input type&#x3D;&quot;text&quot; value&#x3D;&#123;text&#125; onChange&#x3D;&#123;onChange&#125; &#x2F;&gt;      &lt;br &#x2F;&gt;      Echo: &#123;text&#125;    &lt;&#x2F;div&gt;  );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Jotai"><a href="#Jotai" class="headerlink" title="Jotai"></a>Jotai</h3><p>与 Recoil 类似，都是采用分散管理原子状态的设计模式。与 Recoil 相比，有以下几个优点：</p><ol><li>API 少，简洁易用</li><li>定义 Atom 时不用提供 key</li><li>对 TypeScript 的支持更好</li></ol><p>使用 atom 生成一个 atom：</p><pre class="line-numbers language-ts" data-language="ts"><code class="language-ts">import &#123; atom &#125; from &#39;jotai&#39;;const countAtom &#x3D; atom(0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后使用 useAtom 即可像 useState 一样读和写</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useAtom <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'jotai'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useAtom</span><span class="token punctuation">(</span>countAtom<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">one up</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Jotai 最大的特点就是轻量、易用，很多项目其实并没有很复杂的状态需要管理，未必要使用 redux，可以考虑使用这个。</p><h3 id="zustand"><a href="#zustand" class="headerlink" title="zustand"></a>zustand</h3><p>zustand 和 Jotai 一样也是 pmndrs 出品的，但是与 Jotai 分散式管理不同，zustand 还是集中统一管理，这点与 redux 类似。zustand 的优点在于不需要使用 context providers 来包裹组件。zustand 可以理解为是一个外部的世界，通过它的工厂函数创建的 hooks 与 React 世界连接。</p><p>工厂函数创建 store：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> create <span class="token keyword">from</span> <span class="token string">'zustand'</span><span class="token punctuation">;</span><span class="token keyword">const</span> useStore <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">set</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  bears<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token function-variable function">increasePopulation</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> bears<span class="token operator">:</span> state<span class="token punctuation">.</span>bears <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">removeAllBears</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> bears<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>连接到组件：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">BearCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> bears <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>bears<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">&#123;</span>bears<span class="token punctuation">&#125;</span> around here <span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Controls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> increasePopulation <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>increasePopulation<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span>increasePopulation<span class="token punctuation">&#125;</span><span class="token operator">></span>one up<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与 redux 相比，样板代码非常少。</p><h2 id="官方参考"><a href="#官方参考" class="headerlink" title="官方参考"></a>官方参考</h2><p><a href="https://gitee.com/k_2021/react-reduxjs-toolkit">react-reduxjs-toolkit</a><br><a href="https://redux-toolkit.js.org/introduction/getting-started">redux-toolkit</a><br><a href="https://redux-saga.js.org/docs/introduction/GettingStarted">redux-saga</a><br><a href="https://dvajs.com/">dva</a><br><a href="https://github.com/pmndrs/zustand">zustand</a><br><a href="https://github.com/pmndrs/jotai">jotai</a></p><h2 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a>其他参考</h2><p><a href="https://juejin.cn/post/6844903508571848717">Redux 异步流最佳实践</a><br><a href="https://mp.weixin.qq.com/s/qBDJSoXNOVtCatOomXLrIg">深入理解 redux 数据流和异步过程管理</a><br><a href="https://juejin.cn/post/6970951346816188430">zustand 状态管理器与观察者模式</a><br><a href="https://zhuanlan.zhihu.com/p/353135461">还在学 Redux？不妨提前学下它以后的替代品！——Zustand 源码解析</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJS v6 学习指南</title>
      <link href="/posts/59018.html"/>
      <url>/posts/59018.html</url>
      
        <content type="html"><![CDATA[<h2 id="为什么要使用-RxJS"><a href="#为什么要使用-RxJS" class="headerlink" title="为什么要使用 RxJS"></a>为什么要使用 RxJS</h2><p>RxJS 是一套处理异步编程的 API，那么我将从异步讲起。</p><p>前端编程中的异步有：事件（event）、AJAX、动画（animation）、定时器（timer）。</p><h3 id="异步常见的问题"><a href="#异步常见的问题" class="headerlink" title="异步常见的问题"></a>异步常见的问题</h3><ul><li>回调地狱（Callback Hell）</li><li>竞态条件（Race Condition）</li><li>内存泄漏（Memory Leak）</li><li>管理复杂状态（Manage Complex States）</li><li>错误处理（Exception Handling）</li></ul><p>回调地狱就是指层层嵌套的回调函数，造成代码难以理解，并且难以协调组织复杂的操作。</p><p>竞态条件出现的原因是无法保证异步操作的完成会和他们开始时的顺序一样，因此最终结果不可控。比如常见的 AutoComplete 效果，每次输入后向后端发送请求获取结果展示在搜索框下面，由于网络、后端数据查询等原因有可能出现最后发送的请求比之前的请求更快地完成了，这时最终展现的并不是最后那个请求的结果，而这并不是我们所希望的。</p><p>这里说的内存泄漏指的是单页应用切换页面时由于忘记在合适的时机移除监听事件造成的内存泄漏。</p><p>异步带来了状态的改变，可能会使状态管理变得非常复杂，尤其是某个状态有多个来源时，比如有些应用，一开始有一个默认值，再通过 AJAX 获取初始状态，存储在 localStorage，之后通过 WebSocket 获取更新。这时查询状态可能是同步或者异步的，状态的变更可能是主动获取也可能是被动推送的，如果还有各种排序、筛选，状态管理将会更加复杂。</p><p>JavaScript 中的 try/catch 只能捕获同步的错误，异步的错误不易处理。</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>使用 Promise 可以减轻一些异步问题，如将回调函数变为串行的链式调用，统一同步和异步代码等，async/await 中也可以使用 try/catch 来捕获错误。但是对于复杂的场景，仍然难于处理。而且 Promise 还有其他的问题，一是只有一个结果，二是不可以取消。</p><h3 id="异步-API"><a href="#异步-API" class="headerlink" title="异步 API:"></a>异步 API:</h3><p>异步编程时不仅要面对这些问题，还有下面这些使用方式各异的 API：</p><ul><li>DOM Events</li><li>XMLHttpRequest</li><li>fetch</li><li>WebSocket</li><li>Service Worker</li><li>setTimeout</li><li>setInterval</li><li>requestAnimationFrame</li></ul><p>而如果使用 RxJS，可以用统一的 API 来进行处理，而且借助 RxJS 各种强大的操作符，我们可以更简单地实现我们的需求。</p><h2 id="认识-RxJS"><a href="#认识-RxJS" class="headerlink" title="认识 RxJS"></a>认识 RxJS</h2><h3 id="什么是-RxJS"><a href="#什么是-RxJS" class="headerlink" title="什么是 RxJS"></a>什么是 RxJS</h3><p>我们都知道 JS 是什么，那么什么是 Rx 呢？Rx 是 Reactive Extension（也叫 ReactiveX）的简称，指的是实践响应式编程的一套工具，<a href="http://reactivex.io/">Rx 官网</a>首页的介绍是一套通过可监听流来做异步编程的 API（An API for asynchronous programming with observable streams）。</p><p>Rx 最早是由微软开发的 LinQ 扩展出来的开源项目，之后由开源社区维护，有多种语言的实现，如 Java 的 RxJava，Python 的 RxPY 等，而 RxJS 就是 Rx 的 JavaScript 语言实现。</p><h3 id="RxJS-的两种编程思想"><a href="#RxJS-的两种编程思想" class="headerlink" title="RxJS 的两种编程思想"></a>RxJS 的两种编程思想</h3><p>RxJS 引入了两种重要的编程思想：函数式编程和响应式编程。</p><p>函数式编程（Functional Programming，简称 FP）是一种编程范式，强调使用函数来思考问题、编写代码。</p><blockquote><p>In computer science, functional programming is a programming paradigm—a style of building the structure and elements of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.</p></blockquote><p>函数式编程的主要设计点在于避免使用状态和可变的数据，即 stateless and immutable。</p><p>函数式编程对函数的使用有一些特殊要求：</p><ul><li>声明式（Declarative）</li><li>纯函数（Pure Function）</li><li>数据不可变性（Immutability）</li></ul><p>声明式的函数，让开发者只需要表达”想要做什么”，而不需要表达“怎么去做”。</p><p>纯函数指的是执行结果由输入参数决定，参数相同时结果相同，不受其他数据影响，并且不会带来副作用（Side Effect）的函数。副作用指的是函数做了和本身运算返回值没有关系的事情，如修改外部变量或传入的参数对象，甚至是执行 console.log 都算是 Side Effect。前端中常见的副作用有发送 http 请求、操作 DOM、调用 alert 或者 confirm 函数等。满足纯函数的特性也叫做引用透明度（Referential Transparency）。</p><p>数据不可变就是指这个数据一旦产生，它的值就永远不会变。JavaScript 中字符串类型和数字类型就是不可改变的，而对象基本都是可变的，可能会带来各种副作用。现在有各种库可以实现 Immutable 特性，如 <a href="https://github.com/facebook/immutable-js/">immutable.js</a> 和 <a href="https://github.com/mweststrate/immer">immer.js</a></p><p>中文维基上说响应式编程（Reactive Programming）是一种面向数据流（stream）和变化传播的编程范式。个人的理解是对数据流进行编程的一种编程范式，使用各种函数创建、组合、过滤数据流，然后通过监听这个数据流来响应它的变化。响应式编程抽象出了流这个概念，提高了代码的抽象级别，我们不用去关心大量的实现细节，而专注于对数据流的操作。</p><p>响应式流可以认为是随着时间发出的一系列元素。响应式和观察者模式有点相似，订阅者订阅后，发布者吐出数据时，订阅者会响应式进行处理。实际上 Rx 组合了观察者模式（Observer pattern ）、迭代器模式（Iterator pattern）和函数式编程。</p><p>RxJS 是上面两种编程思想的结合，但是对于它是不是函数响应式编程（FRP）有比较大的争议，因为它虽然既是函数式又是响应式但是不符合早期 FRP 的定义。</p><h3 id="RxJS-的特点"><a href="#RxJS-的特点" class="headerlink" title="RxJS 的特点"></a>RxJS 的特点</h3><ul><li>数据流抽象了很多现实问题</li><li>擅长处理异步问题</li><li>把复杂问题分解为简单问题的组合</li></ul><p>前端中的 DOM 事件、WebSocket 推送消息、AJAX 请求资源、动画都可以看作是数据流。</p><p>RxJS 对数据采用“推”的方式，当一个数据产生时，会将其推送给对应的处理函数，这个处理函数不用关心数据时同步产生还是异步产生的，因此处理异步将会变得非常简单。</p><p>RxJS 中很多操作符，每个操作符都提供了一个小功能，学习 RxJS 最重要的就是学习如何组合操作符来解决复杂问题。</p><h2 id="RxJS-入门"><a href="#RxJS-入门" class="headerlink" title="RxJS 入门"></a>RxJS 入门</h2><h3 id="RxJS-使用"><a href="#RxJS-使用" class="headerlink" title="RxJS 使用"></a>RxJS 使用</h3><p>RxJS 仓库现在移到了 ReactiveX 组织下，最新的大版本为 6，与之前的版本相比有许多破坏性变更，请注意。</p><p>RxJS 的 import 路径有以下 5 种：</p><ol><li><p>创建 Observable 的方法、types、schedulers 和一些工具方法</p><p><code>import &#123; Observable, Subject, asapScheduler, pipe, of, from, interval, merge, fromEvent, SubscriptionLike, PartialObserver &#125; from &#39;rxjs&#39;;</code></p></li><li><p>操作符 operators</p><p><code>import &#123; map, filter, scan &#125; from &#39;rxjs/operators&#39;;</code></p></li><li><p>webSocket</p><p><code>import &#123; webSocket &#125; from &#39;rxjs/webSocket&#39;;</code></p></li><li><p>ajax</p><p><code>import &#123; ajax &#125; from &#39;rxjs/ajax&#39;;</code></p></li><li><p>测试</p><p><code>import &#123; TestScheduler &#125; from &#39;rxjs/testing&#39;;</code></p></li></ol><p><strong>本文所有 demo 均在 v6.2.1 中测试过</strong></p><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fromEvent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> take <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token keyword">const</span> eleBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> click$ <span class="token operator">=</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>eleBtn<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>click$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'只可点击一次'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  eleBtn<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'disabled'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里演示了 RxJS 的大概用法，通过 fromEvent 将点击事件转换为 RxJS 的 Observable （响应式数据流），take(1) 表示只操作一次，观察者通过订阅（subscribe）来响应变化。具体 API 的使用会在后面讲到。</p><p><a href="https://stackblitz.com/edit/js-epiwre?file=index.js">演示地址</a></p><p><strong>代表流的变量用 $ 符号结尾，是 RxJS 中的一种惯例。</strong></p><h3 id="RxJS-要点"><a href="#RxJS-要点" class="headerlink" title="RxJS 要点"></a>RxJS 要点</h3><p>RxJS 有一个核心和三个重点，一个核心是 Observable 再加上相关的 Operators，三个重点分别是 Observer、Subject、Schedulers。</p><h4 id="什么是-Observable"><a href="#什么是-Observable" class="headerlink" title="什么是 Observable"></a>什么是 Observable</h4><p>个人认为在文档中说的 Observable 更确切的说法是 Observable Stream，也就是 Rx 的响应式数据流。</p><p>在 RxJS 中 Observable 是可被观察者，观察者则是 Observer，它们通过 Observable 的 subscribe 方法进行关联。</p><p>前面提到了 RxJS 结合了观察者模式和迭代器模式。</p><p>对于观察者模式，我们其实比较熟悉了，比如各种 DOM 事件的监听，也是观察者模式的一种实践。核心就是发布者发布事件，观察者选择时机去订阅（subscribe）事件。</p><p>在 ES6 中，Array、String 等可遍历的数据结构原生部署了迭代器（Iterator ）接口。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> iterator <span class="token operator">=</span> numbers<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;value: 1, done: false&#125;</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;value: 2, done: false&#125;</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;value: 3, done: false&#125;</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;value: undefined, done: true&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察者模式和迭代器模式的相同之处是两者都是渐进式使用数据的，只不过从数据使用者的角度来说，观察者模式数据是推送（push）过来的，而迭代器模式是自己去拉取（pull）的。Rx 中的数据是 Observable 推送的，观察者不需要主动去拉取。</p><p>Observable 与 Array 相当类似，都可以看作是 Collection，只不过 Observable 是 a collection of items over time，是随时间发出的一序列元素，所以下面我们会看到 Observable 的一些操作符与 Array 的方法极其相似。</p><h3 id="创建-Observable"><a href="#创建-Observable" class="headerlink" title="创建 Observable"></a>创建 Observable</h3><p>要创建一个 Observable，只要给 new Observable 传递一个接收 observer 参数的回调函数，在这个函数中去定义如何发送数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Observable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码通过 new Observable 创建了一个 Observable，调用它的 subscribe 方法进行订阅，执行结果为依次输出 ‘start’，1，2，3，’end’。</p><p>下面我们再看一个异步的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Observable <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>number<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'start'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先输出 ’start’ 、’end’，然后每隔 1000 ms 输出一个递增的数字。</p><p>通过这两个小例子，我们知道 RxJS 既能处理同步的行为，也能处理异步的。</p><h4 id="观察者-Observer"><a href="#观察者-Observer" class="headerlink" title="观察者 Observer"></a>观察者 Observer</h4><p>观察者 Observer 是一个有三个方法的对象：</p><ul><li>next: 当 Observable 发出新的值时被调用，接收这个值作为参数</li><li>complete：当 Observable 完结，没有更多数据时被调用。complete 之后，next 方法无效</li><li>error：当 Observable 内部发生错误时被调用，之后不会调用 complete，next 方法无效</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'complete'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码会输出 1，2，’complete’，而不会输出 3。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'there is an exception'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    observer<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'complete'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意 error 之后不会再调用 complete。</p><p>Observer 还有简单形式，即不用构建一个对象，而是直接把函数作为 subscribe 方法的参数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'complete'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数依次为 next 、error、complete，后面两个参数可以省略。</p><h3 id="延迟执行（lazy-evaluation）"><a href="#延迟执行（lazy-evaluation）" class="headerlink" title="延迟执行（lazy evaluation）"></a>延迟执行（lazy evaluation）</h3><p>我们传给 new Observable 的回调函数如果没有订阅是不会执行的，订阅一个 Observable 就像是执行一个函数，和下面的函数类似。这和我们常见的那种内部保存有观察者列表的观察者模式是不同的，Observable 内部没有这个观察者列表。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>number<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'complete'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="退订（unsubscribe）"><a href="#退订（unsubscribe）" class="headerlink" title="退订（unsubscribe）"></a>退订（unsubscribe）</h3><p>观察者想退订，只要调用订阅返回的对象的 unsubscribe 方法，这样观察者就再也不会接受到 Observable 的信息了。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>number<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> subscription <span class="token operator">=</span> source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>在 RxJS 中，操作符是用来处理数据流的。我们往往需要对数据流做一系列处理，才交给 Observer，这时一个操作符就像一个管道一样，数据进入管道，完成处理，流出管道。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> interval <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> map <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>interval 操作符创造了一个数据流，interval(1000) 会产生一个每隔 1000 ms 就发出一个从 0 开始递增的数据。map 操作符和数组的 map 方法类似，可以对数据流进行处理。具体见<a href="https://stackblitz.com/edit/js-azpqqb?file=index.js">演示地址</a>。</p><p>这个 map 和数组的 map 方法会产生新的数组类似，它会产生新的 Observable。每一个操作符都会产生一个新的 Observable，不会对上游的 Observable 做任何修改，这完全符合函数式编程“数据不可变”的要求。</p><p>上面的 pipe 方法就是数据管道，会对数据流进行处理，上面的例子只有一个 map 操作符进行处理，可以添加更多的操作符作为参数。</p><h3 id="弹珠图"><a href="#弹珠图" class="headerlink" title="弹珠图"></a>弹珠图</h3><p>弹珠图（Marble diagrams）就是用图例形象地表示 Observable 和各种操作符的一种方法。</p><p>用 - 表示一小段时间，X 代表有错误发生， | 表示结束，() 表示同步发生。</p><p>上面的例子可以如下表示：</p><pre class="line-numbers language-none"><code class="language-none">source: -----0-----1-----2-----3--...        map(x &#x3D;&gt; x * x)newest: -----0-----1-----4-----9--...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>具体关于弹珠图的使用可以查看这个网站<a href="http://rxmarbles.com/">http://rxmarbles.com/</a>。</p><h2 id="创建-Observable-1"><a href="#创建-Observable-1" class="headerlink" title="创建 Observable"></a>创建 Observable</h2><p>创建 Observable 的这些方法就是用来创建 Observable 数据流的，**注意和操作符不同，它们是从 rxjs 中导入的，而不是 rxjs/operators **。</p><h3 id="of-方法"><a href="#of-方法" class="headerlink" title="of 方法"></a>of 方法</h3><p>之前我们写的这种形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 of 方法将会非常简洁：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token keyword">of</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="from-方法"><a href="#from-方法" class="headerlink" title="from 方法"></a>from 方法</h3><p>上面的代码用 from 则是这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> from <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>from 可以将可遍历的对象（iterable）转化为一个 Observable，字符串也部署有 iterator 接口，所以也支持。</p><p>from 还可以根据 promise 创建一个 Observable。我们用 fetch 或者 axios 等类库发送的请求都是一个 promise 对象，我们可以使用 from 将其处理为一个 Observable 对象。</p><h3 id="fromEvent-方法"><a href="#fromEvent-方法" class="headerlink" title="fromEvent 方法"></a>fromEvent 方法</h3><p>用 DOM 事件创建 Observable，第一个参数为 DOM 对象，第二个参数为事件名称。具体示例见前面 RxJS 入门章节的一个简单例子。</p><h3 id="fromEventPattern-方法"><a href="#fromEventPattern-方法" class="headerlink" title="fromEventPattern 方法"></a>fromEventPattern 方法</h3><p>将添加事件处理器、删除事件处理器的 API 转化为 Observable。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addClickHandler</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">removeClickHandler</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fromEventPattern</span><span class="token punctuation">(</span>addClickHandler<span class="token punctuation">,</span> removeClickHandler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以是我们自己实现的和事件类似，拥有注册监听和移除监听的 API。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fromEventPattern <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> handler <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'handler 不是函数！！！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">off</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token number">1</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">eventName<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">handler</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">handler</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> subscription <span class="token operator">=</span> <span class="token function">fromEventPattern</span><span class="token punctuation">(</span>  event<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">'say'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  event<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">'say'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    event<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'say'</span><span class="token punctuation">,</span> number<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://stackblitz.com/edit/js-azpqqb">演示地址</a></p><h3 id="interval、timer"><a href="#interval、timer" class="headerlink" title="interval、timer"></a>interval、timer</h3><p>interval 和 JS 中的 setInterval 类似，参数为间隔时间，下面的代码每隔 1000 ms 会发出一个递增的整数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token comment">// 1</span><span class="token comment">// 2</span><span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>timer 则可以接收两个参数，第一个参数为发出第一个值需要等待的时间，第二个参数为之后的间隔时间。第一个参数可以是数字，也可以是一个 Date 对象，第二个参数可省。</p><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>操作符 of 产生较少的数据时可以直接写如 of(1, 2, 3)，但是如果是 100 个呢？这时我们可以使用 range 操作符。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 产生 1 到 100 的正整数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="empty、throwError、never"><a href="#empty、throwError、never" class="headerlink" title="empty、throwError、never"></a>empty、throwError、never</h3><p>empty 是创建一个立即完结的 Observable，throwError 是创建一个抛出错误的 Observable，never 则是创建一个什么也不做的 Observable（不完结、不吐出数据、不抛出错误）。这三个操作符单独用时没有什么意义，主要用来与其他操作符进行组合。目前官方不推荐使用 empty 和 never 方法，而是推荐使用常量 EMPTY 和 NEVER（注意不是方法，已经是一个 Observable 对象了）。</p><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p>defer 创建的 Observable 只有在订阅时才会去创建我们真正想要操作的 Observable。defer 延迟了创建 Observable，而又有一个 Observable 方便我们去订阅，这样也就推迟了占用资源。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">ajax</span><span class="token punctuation">(</span>ajaxUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只有订阅了才会去发送 ajax 请求。</p><h2 id="操作符-1"><a href="#操作符-1" class="headerlink" title="操作符"></a>操作符</h2><p>操作符其实看作是处理数据流的管道，每个操作符实现了针对某个小的具体应用问题的功能，RxJS 编程最大的难点其实就是如何去组合这些操作符从而解决我们的问题。</p><p>在 RxJS 中，有各种各样的操作符，有转化类、过滤类、合并类、多播类、错误处理类、辅助工具类等等。一般不需要自己去实现操作符，但是我们需要知道操作符是一个函数，实现的时候必须考虑以下功能：</p><ol><li>返回一个全新的 Observable 对象</li><li>对上游和下游的订阅和退订处理</li><li>处理异常情况</li><li>及时释放资源</li></ol><h3 id="pipeable-操作符"><a href="#pipeable-操作符" class="headerlink" title="pipeable 操作符"></a>pipeable 操作符</h3><p>之前版本的 RxJS 各种操作符都挂载到了全局 Observable 对象上，可以这样链式调用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">source$<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在需要这样使用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> filter<span class="token punctuation">,</span> map <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span>source$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实也很好理解，pipe 就是管道的意思，数据流通过操作符处理，流出然后交给下一个操作符。</p><h3 id="几个类似数组方法的基础操作符"><a href="#几个类似数组方法的基础操作符" class="headerlink" title="几个类似数组方法的基础操作符"></a>几个类似数组方法的基础操作符</h3><p>map、filter 和数组的 map、filter 方法类似，scan 则是和 reduce 方法类似，mapTo 是将所有发出的数据映射到一个给定的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mapTo <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">mapTo</span><span class="token punctuation">(</span><span class="token string">'Hi'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次点击页面时都会输出 Hi。</p><h3 id="一些过滤的操作符"><a href="#一些过滤的操作符" class="headerlink" title="一些过滤的操作符"></a>一些过滤的操作符</h3><ul><li>take 是从数据流中选取最先发出的若干数据</li><li>takeLast 是从数据流中选取最后发出的若干数据</li><li>takeUntil 是从数据流中选取直到发生某种情况前发出的若干数据</li><li>first 是获得满足判断条件的第一个数据</li><li>last 是获得满足判断条件的最后一个数据</li><li>skip 是从数据流中忽略最先发出的若干数据</li><li>skipLast 是从数据流中忽略最后发出的若干数据</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> interval <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> take <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'complete'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token comment">// 1</span><span class="token comment">// 2</span><span class="token comment">// 'complete'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用了 take(3)，表示只取 3 个数据，Observable 就进入完结状态。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> interval<span class="token punctuation">,</span> fromEvent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> takeUntil <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">takeUntil</span><span class="token punctuation">(</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#time'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'complete'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一个 interval 创建的数据流一直在发出数据，直到当用户点击按钮时停止计时，见<a href="https://stackblitz.com/edit/js-ucdsmw?file=index.js">演示</a>。</p><h3 id="合并类操作符"><a href="#合并类操作符" class="headerlink" title="合并类操作符"></a>合并类操作符</h3><p>合并类操作符用来将多个数据流合并。</p><p>1）concat、merge</p><p>concat、merge 都是用来把多个 Observable 合并成一个，但是 concat 要等上一个 Observable 对象 complete 之后才会去订阅第二个 Observable 对象获取数据并把数据传给下游，而 merge 时同时处理多个 Observable。使用方式如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> interval <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> merge<span class="token punctuation">,</span> take <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以<a href="https://stackblitz.com/edit/js-wwphh4?file=index.js">点此</a>去比对效果，concat 的结果应该比较好理解，merge 借助弹珠图也比较好理解，它是在时间上对数据进行了合并。</p><pre class="line-numbers language-none"><code class="language-none">source : ----0----1----2|source2: --0--1--2--3--4--5|            merge()example: --0-01--21-3--(24)--5|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>merge 的逻辑类似 OR，经常用来多个按钮有部分相同行为时的处理。</p><p><strong>注意最新的<a href="https://rxjs-dev.firebaseapp.com/api">官方文档</a>和<a href="https://github.com/ReactiveX/rxjs/blob/master/docs_app/content/guide/v6/migration.md">RxJS v5.x 到 6 的更新指南</a>中指出不推荐使用 merge、concat、combineLatest、race、zip 这些操作符方法，而是推荐使用对应的静态方法。</strong></p><p>将上面的 merge 改成从 rxjs 中导入，使用方式变成了合并多个 Observable，而不是一个 Observable 与其他 Observable 合并。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> interval，merge <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> take <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token function">merge</span><span class="token punctuation">(</span>  <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）concatAll、mergeAll、switchAll</p><p>用来将高阶的 Observable 对象压平成一阶的 Observable，和 loadash 中压平数组的 flatten 方法类似。concatAll 会对内部的 Observable 对象做 concat 操作，和 concat 操作符类似，如果前一个内部 Observable 没有完结，那么 concatAll 不会订阅下一个内部 Observable，mergeAll 则是同时处理。switchAll 比较特殊一些，它总是切换到最新的内部 Observable 对象获取数据。上游高阶 Observable 产生一个新的内部 Observable 时，switchAll 就会立即订阅最新的内部 Observable，退订之前的，这也就是 ‘switch’ 的含义。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> interval <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> map<span class="token punctuation">,</span> switchAll<span class="token punctuation">,</span> take <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>        <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">switchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0:0</span><span class="token comment">// 1:0</span><span class="token comment">// 1:1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内部第一个 Observable 对象的第二个数据还没来得及发出，第二个 Observable 对象就产生了。</p><p>3）concatMap、mergeMap、switchMap</p><p>从上面的例子我们也可以看到高阶 Observable 常常是由 map 操作符将每个数据映射为 Observable 产生的，而我们订阅的时候需要将其压平为一阶 Observable，而就是要先使用 map 操作符再使用 concatAll 或 mergeAll 或 switchAll 这些操作符中的一个。RxJS 中提供了对应的更简洁的 API。使用的效果可以用下面的公式表示：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">concatMap <span class="token operator">=</span> map <span class="token operator">+</span> concatAll<span class="token punctuation">;</span>mergeMap <span class="token operator">=</span> map <span class="token operator">+</span> mergeAll<span class="token punctuation">;</span>switchMap <span class="token operator">=</span> map <span class="token operator">+</span> switchAll<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4）zip、combineLatest、withLatestFrom</p><p>zip 有拉链的意思，这个操作符和拉链的相似之处在于数据一定是一一对应的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> interval <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> zip<span class="token punctuation">,</span> take <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> newest$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">zip</span><span class="token punctuation">(</span>newest$<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token comment">// 2</span><span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>zip 是内部的 Observable 都发出相同顺序的数据后才交给下游处理，最后一个参数是可选的 resultSelector 参数，这个函数用来处理操作符的结果。上面的示例运行过程如下：</p><ol><li>newest 发出第一个值 0，但这时 source 还没有发出第一个值，所以不执行 resultSelector 函数也不会像下游发出数据</li><li>source 发出第一个值 0，此时 newest 之前已发出了第一个值 0，执行 resultSelector 函数得到结果 0，发出这个结果</li><li>newest 发出第二个值 1，但这时 source 还没有发出第二个值，所以不执行 resultSelector 函数也不会像下游发出数据</li><li>newest 发出第三个值 2，但这时 source 还没有发出第三个值，所以不执行 resultSelector 函数也不会像下游发出数据</li><li>source 发出第二个值 1，此时 newest 之前已发出了第一个值 1，执行 resultSelector 函数得到结果 2，发出这个结果</li><li>newest 发出第四个值 3，但这时 source 还没有发出第四个值，所以不执行 resultSelector 函数也不会像下游发出数据</li><li>source 发出第三个值 2，此时 newest 之前已发出了第一个值 2，执行 resultSelector 函数得到结果 4，发出这个结果</li><li>source 完结，不可能再有对应的数据了，整个 Observable 完结</li></ol><p>上面如果没有传递最后一个参数 resultSelector 函数，将会依次输出数组 [0, 0]、[1, 1]、[2, 2]。在更新指南中，官方指出不推荐使用 resultSelector 参数，将会在 v7 中移除。加上之前提到的推荐使用静态方法，这个示例应该改成这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> interval<span class="token punctuation">,</span> zip <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> take<span class="token punctuation">,</span> map <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> newest$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token function">zip</span><span class="token punctuation">(</span>source$<span class="token punctuation">,</span> newest$<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">...</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 zip 当有数据流吐出数据很快，而有数据流发出值很慢时，要小心数据积压的问题。这时快的数据流已经发出了很多数据，由于对应的数据还没发出，RxJS 只能保存数据，快的数据流不断地发出数据，积压的数据越来越多，消耗的内存也会越来越大。</p><p>combineLatest 与 zip 不同，只要其他的 Observable 已经发出过值就行，顾名思义，就是与其他 Observable 最近发出的值结合。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> interval<span class="token punctuation">,</span> combineLatest <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> take <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> newest$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">combineLatest</span><span class="token punctuation">(</span>source$<span class="token punctuation">,</span> newest$<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [0, 0]</span><span class="token comment">// [0, 1]</span><span class="token comment">// [0, 2]</span><span class="token comment">// [1, 2]</span><span class="token comment">// [1, 3]</span><span class="token comment">// [2, 3]</span><span class="token comment">// [2, 4]</span><span class="token comment">// [2, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>withLatestFrom 没有静态方法，只有操作符方法，前面的方法所有 Observable 地位是平等的，而这个方法是使用这个操作符的 Observable 起到了主导作用，即只有它发出值才会进行合并产生数据发出给下游。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> interval <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> take<span class="token punctuation">,</span> withLatestFrom <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> newest$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">withLatestFrom</span><span class="token punctuation">(</span>newest$<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [0, 0]</span><span class="token comment">// [1, 2]</span><span class="token comment">// [2, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>source 发出 0 时，newest 最新发出的值为 0，结合为 [0, 0] 发出</li><li>source 发出 1，此时 newest 最新发出的值为 2，结合为 [1, 2] 发出</li><li>source 发出 2，此时 newest 最新发出的值为 4，结合为 [2, 4] 发出</li><li>source 完结，整个 Observable 完结</li></ol><p>5）startWith、forkJoin、race</p><p>startWith 是在 Observable 的一开始加入初始数据，同步立即发送，常用来提供初始状态。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fromEvent<span class="token punctuation">,</span> from <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> startWith<span class="token punctuation">,</span> switchMap <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">fakeRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>number<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>source$  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">startWith</span><span class="token punctuation">(</span><span class="token string">'initData'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">switchMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">from</span><span class="token punctuation">(</span><span class="token function">fakeRequest</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#number'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里通过 startWith 操作符获取了页面的初始数据，之后通过点击按钮获取更新数据。</p><p>forkJoin 只有静态方法形式，类似 Promise.all ，它会等内部所有 Observable 都完结之后，将所有 Observable 对象最后发出来的最后一个数据合并成 Observable。</p><p>race 操作符产生的 Observable 会完全镜像最先吐出数据的 Observable。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obs1 <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">mapTo</span><span class="token punctuation">(</span><span class="token string">'fast one'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obs2 <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">mapTo</span><span class="token punctuation">(</span><span class="token string">'medium one'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obs3 <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">mapTo</span><span class="token punctuation">(</span><span class="token string">'slow one'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">race</span><span class="token punctuation">(</span>obs3<span class="token punctuation">,</span> obs1<span class="token punctuation">,</span> obs2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">winner</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>winner<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// result:</span><span class="token comment">// a series of 'fast one'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一个小的练习"><a href="#一个小的练习" class="headerlink" title="一个小的练习"></a>一个小的练习</h3><p>本文中的例子基本来自<a href="https://ithelp.ithome.com.tw/articles/10186104">30 天精通 RxJS</a>，使用 RxJS v6 版本进行重写。</p><p>页面上有一个 p 标签存放一个状态，初始为 0，有两个按钮，一个按钮点击后这个状态增加 1，另一个按钮点击后这个状态减少 1。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"addButton"</span><span class="token operator">></span>Add<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"minusButton"</span><span class="token operator">></span>Minus<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>p id<span class="token operator">=</span><span class="token string">"state"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这两个按钮的点击事件我们都可以建立响应式数据流，可以使用 mapTo(1) 和 mapTo(-1) 分别表示点击后增加 1 和减少 1。我们可以使用 EMPTY 创建一个空的数据流来表示这个状态，用 startWith 设定初始值。然后 merge 这两个点击的数据流，但是这还有一个问题，点击事件的数据流需要与表示状态的数据流进行逻辑计算，发出最终的状态，我们才能去订阅这个最终的数据流来更改页面的显示。而这种累计计算的方法，可以用 scan 操作符来实现。最终实现如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fromEvent<span class="token punctuation">,</span> <span class="token constant">EMPTY</span><span class="token punctuation">,</span> merge <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mapTo<span class="token punctuation">,</span> startWith<span class="token punctuation">,</span> scan <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token keyword">const</span> addButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'addButton'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> minusButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'minusButton'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> state <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'state'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> addClick$ <span class="token operator">=</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>addButton<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">mapTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> minusClick$ <span class="token operator">=</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>minusButton<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">mapTo</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token constant">EMPTY</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">startWith</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> addClick$<span class="token punctuation">,</span> minusClick$<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">origin<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> origin <span class="token operator">+</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>textContent <span class="token operator">=</span> item<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://stackblitz.com/edit/js-ysqj3b?file=index.js">查看演示</a></p><h3 id="简单拖拽"><a href="#简单拖拽" class="headerlink" title="简单拖拽"></a>简单拖拽</h3><p>页面上有一个 id 为 drag 的 div：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>drag<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>页面 css：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html,body</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#drag</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> all-scroll<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要实现的功能如下：</p><ol><li>当在这个 div 上按下鼠标左键(mousedown)时，开始监听鼠标移动(mousemove)位置</li><li>当鼠标松开(mouseup)时，结束监听鼠标移动</li><li>当鼠标移动被监听时，更新 div 样式来实现拖拽效果</li></ol><p>实现思路：</p><ol><li>我们可以使用 fromEvent 去转化 DOM 事件</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> mouseDown$ <span class="token operator">=</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>eleDrag<span class="token punctuation">,</span> <span class="token string">'mousedown'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> mouseMove$ <span class="token operator">=</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>eleBody<span class="token punctuation">,</span> <span class="token string">'mousemove'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> mouseUp$ <span class="token operator">=</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>eleBody<span class="token punctuation">,</span> <span class="token string">'mouseup'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>对于鼠标按下这个数据流，每次鼠标按下事件发生时都转成鼠标移动的数据流</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">mouseDown$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mouseDownEvent</span><span class="token punctuation">)</span> <span class="token operator">=></span> mouseMove$<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>鼠标松开时，结束监听鼠标移动，我们可以用 takeUntil 表示这个逻辑</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">mouseDown$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mouseDownEvent</span><span class="token punctuation">)</span> <span class="token operator">=></span> mouseMove$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">takeUntil</span><span class="token punctuation">(</span>mouseUp$<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>上面的 map 操作符内将每次 mousedown 映射为一个 Observable，形成了高阶 Observable，我们需要用 concatlAll 压平，map 和 concatAll 连用，可以用更简洁的 concatMap</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">mouseDown$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token function">concatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mouseDownEvent</span><span class="token punctuation">)</span> <span class="token operator">=></span> mouseMove$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">takeUntil</span><span class="token punctuation">(</span>mouseUp$<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>订阅这个 mousemove 数据流更新 div 位置。我们可以获取 mousemove event 中的 clientX 和 clientY，减去初始鼠标按下时鼠标相对 div 元素的值来得到最终 div 的绝对位置的 left 和 top。也可以使用 withLatestFrom 操作符，见 <a href="https://stackblitz.com/edit/js-uujnnv">demo</a>。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">mouseDown$  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">concatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mouseDownEvent</span><span class="token punctuation">)</span> <span class="token operator">=></span>      mouseMove$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>        <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">mouseMoveEvent</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          left<span class="token operator">:</span> mouseMoveEvent<span class="token punctuation">.</span>clientX <span class="token operator">-</span> mouseDownEvent<span class="token punctuation">.</span>offsetX<span class="token punctuation">,</span>          top<span class="token operator">:</span> mouseMoveEvent<span class="token punctuation">.</span>clientY <span class="token operator">-</span> mouseDownEvent<span class="token punctuation">.</span>offsetY<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">takeUntil</span><span class="token punctuation">(</span>mouseUp$<span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">position</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    eleDrag<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> position<span class="token punctuation">.</span>left <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>    eleDrag<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> position<span class="token punctuation">.</span>top <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://stackblitz.com/edit/js-wexzbx?file=index.js">这里</a>是一个更复杂一些的例子，当页面滑动到视频出页面时视频 fixed 定位，这是可以拖拽移动视频位置。通过 getValidValue 对视频拖拽的位置进行了一个限制。</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>把上游的多个数据缓存起来，当时机合适时再把汇聚的数据传给下游。</p><p>1）buffer、bufferTime、bufferCount、bufferWhen、bufferToggle</p><p>对于 buffer 这一组操作符，数据汇聚的形式就是数组。</p><p>buffer 接收一个 Observable 作为 notifier，当 notifier 发出数据时，将 缓存的数据传给下游。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">buffer</span><span class="token punctuation">(</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [0, 1, 2]</span><span class="token comment">// [3, 4, 5]</span><span class="token comment">// [6, 7, 8]</span><span class="token comment">// [9, 10, 11, 12]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bufferTime 是用时间来控制时机，上面可以改成 bufferTime(1000)</p><p>bufferCount 是用数量来控制时机，如 3 个一组，bufferCount(3)</p><p>bufferWhen 接收一个叫做 closeSelector 的参数，它应该返回一个 Observable。通过这个 Observable 来控制缓存。这个函数没有参数。下面的方法等价于前面的 buffer：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">bufferWhen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bufferToggle 和 buffer 的不同是可以不断地控制缓存窗口的开和关，一个参数是一个 Observable，称为 opening，第二个参数是称为 closeSelector 的一个函数。这个函数的参数是 opening 产生的数据。前一个参数用来控制缓存的开始时间，后一个控制缓存的结束。与 bufferWhen 相比，它的 closeSelector 可以接收参数，控制性更强。</p><p>我们可以使用 buffer 来做事件的过滤，下面的代码只有 500ms 内连续点击两次以上才会输出 ‘success’ 。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fromEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">bufferTime</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）window、windowTime、windowCount、windowWhen、windowToggle</p><p>与前面的 buffer 类似，不过 window 缓存数据汇聚的形式是 Observable，因此形成了高阶 Observable。</p><h4 id="debounceTime、throttleTime"><a href="#debounceTime、throttleTime" class="headerlink" title="debounceTime、throttleTime"></a>debounceTime、throttleTime</h4><p>类似 lodash 的 debounce 和 throttle，用来降低事件的触发频率。</p><p>我们做搜索时，常常要对输入进行 debounce 来减少请求频率。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fromEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#searchInput'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'input'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">debounceTime</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textContent <span class="token operator">=</span> input<span class="token punctuation">)</span>    <span class="token comment">// 发送请求</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="distinct、distinctUntilChanged"><a href="#distinct、distinctUntilChanged" class="headerlink" title="distinct、distinctUntilChanged"></a>distinct、distinctUntilChanged</h3><p>distinct 操作符可以用来去重，将上游重复的数据过滤掉。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">zip</span><span class="token punctuation">(</span><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码只会输出 1, 2, 3, 4</p><p>distinct 操作符还可以接收一个 keySelector 的函数作为参数，这是官网的一个 typescript 的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  age<span class="token operator">:</span> number<span class="token punctuation">,</span>  name<span class="token operator">:</span> string<span class="token punctuation">&#125;</span><span class="token keyword">of</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Foo'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Bar'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> age<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">'Foo'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token operator">:</span> Person</span><span class="token punctuation">)</span> <span class="token operator">=></span> p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// &#123; age: 4, name: 'Foo' &#125;</span><span class="token comment">// &#123; age: 7, name: 'Bar' &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>distinctUntilChanged 也是过滤重复数据，但是只会与上一次发出的元素比较。这个操作符比 distinct 更常用。distinct 要与之前发出的不重复的值进行比较，因此要在内部存储这些值，要小心内存泄漏，而 distinctUntilChanged 只用保存上一个的值。</p><h3 id="dalay、delayWhen"><a href="#dalay、delayWhen" class="headerlink" title="dalay、delayWhen"></a>dalay、delayWhen</h3><p>用来延迟上游 Observable 数据的发出。</p><p>delay 可以接受一个数字（单位默认为 ms）或者 date 对象作为延迟控制。</p><pre><code>const clicks = fromEvent(document, &#39;click&#39;)const delayedClicks = clicks.pipe(delay(1000)) // 所有点击事件延迟 1 秒delayedClicks.subscribe(x =&gt; console.log(x))</code></pre><p>我们前面介绍过 bufferWhen，dalayWhen 也带有 when，在 RxJS 中，这种操作符它接收的参数都是 Observable Factory，即一个返回 Observable 对象的回调函数，用这个 Observable 来进行控制。</p><p>每个 click 都延迟 0 至 5 秒之间的任意一个时间：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> clicks <span class="token operator">=</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> delayedClicks <span class="token operator">=</span> clicks<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token function">delayWhen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">interval</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>delayedClicks<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常错误处理"><a href="#异常错误处理" class="headerlink" title="异常错误处理"></a>异常错误处理</h3><p>异常处理的难点：</p><ol><li>try/catch 只支持同步</li><li>回调函数容易形成回调地狱，而且每个回调函数的最开始都要判断是否存在错误</li><li>Promise 不能重试，而且不强制异常被捕获</li></ol><p>对错误处理的处理可以分为两类，即恢复(recover)和重试(retry)。</p><p>恢复是虽然发生了错误但是让程序继续运行下去。重试，是认为这个错误是临时的，重试尝试发生错误的操作。实际中往往配合使用，因为一般重试是由次数限制的，当尝试超过这个限制时，我们应该使用恢复的方法让程序继续下去。</p><p>1）catchError</p><p>catchError 用来在管道中捕获上游传递过来的错误。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'unlucky number 4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">of</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0</span><span class="token comment">// 1</span><span class="token comment">// 2</span><span class="token comment">// 3</span><span class="token comment">// 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>catchError 中的回调函数返回了一个 Observable，当捕获到上游的错误时，调用这个函数，返回的 Observable 中发出的数据会传递给下游。因此上面当 x 为 4 时发生了错误，会用 8 来替换。</p><p>catchError 中的回调函数除了接收错误对象为参数外，还有第二个参数 caught$ 表示上游的 Observable 对象。如果回调函数返回这个 Observable 对象，就会进行重试。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'unlucky number 4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> caught$</span><span class="token punctuation">)</span> <span class="token operator">=></span> caught$<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个代码会依次输出 5 次 0, 1, 2, 3。</p><p>2）retry</p><p>retry 可以接收一个整数作为参数，表示重试次数，如果是负数或者没有传参，会无限次重试。重试实际上就是退订再重新订阅。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'unlucky number 4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 重试 5 次</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实际开发中，如果是代码原因造成的错误，重试没有意义，如果是因为外部资源导致的异常错误适合重试，如用户网络或者服务器偶尔不稳定的时候。</p><p>3）retryWhen</p><p>和前面带 when 的操作符一样，retryWhen 操作符接收一个返回 Observable 的回调函数，用这个 Observable 来控制重试的节奏。当这个 Observable 发出一个数据时就会进行一次重试，它完结时 retryWhen 返回的 Observable 也立即完结。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'unlucky number 4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">retryWhen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err$</span><span class="token punctuation">)</span> <span class="token operator">=></span> err$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 延迟 1 秒后重试，重试 5 次</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>retryWhen 的可定制性非常高，不仅可以实现延迟定制，还可以实现 retry 的控制重试次数。在实践中，这种重试频率固定的方法还不够好，如果之前的重试失败，之后重试成功的几率也不高。Angular 官网介绍了一个 <a href="https://angular.io/guide/practical-observable-usage#exponential-backoff">Exponential backoff</a> 的方法。将每次重试的延迟时间控制为指数级增长。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> pipe<span class="token punctuation">,</span> range<span class="token punctuation">,</span> timer<span class="token punctuation">,</span> zip <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ajax <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/ajax'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> retryWhen<span class="token punctuation">,</span> map<span class="token punctuation">,</span> mergeMap <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/operators'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">backoff</span><span class="token punctuation">(</span><span class="token parameter">maxTries<span class="token punctuation">,</span> ms</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">retryWhen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">attempts</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> maxTries<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>        <span class="token function">zip</span><span class="token punctuation">(</span>attempts<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">mergeMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">timer</span><span class="token punctuation">(</span>i <span class="token operator">*</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'/api/endpoint'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">backoff</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handleData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">handleData</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）finalize</p><p>返回上游数据流的镜像 Observable，当上游的 Observable 完结或出错时调用传给它的函数，不影响数据流。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'unlucky number 4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tap-操作符"><a href="#tap-操作符" class="headerlink" title="tap 操作符"></a>tap 操作符</h3><p>我们可以使用 tap 操作符来进行调试。</p><p>拦截源 Observable 的每一次发送，执行一个函数，返回源 Observable 的镜像 Observable。</p><p>这个 API 有助于我们对 Observable 的值进行验证（debug）和执行一个会带来副作用的函数，而不会影响源 Observable。如我们用鼠标进行 canvas 绘图，鼠标按下是开始画图，鼠标松开即停止。我们需要在 mousedown 的时候进行 moveTo，否则这次画的会和上次画的连在一起。我们应该把这个会带来副作用过程放在 tap 操作符的函数中，这样才不会影响原来的数据流。</p><p>tap 操作符和订阅并不相同，tap 返回的 Observable 如果没有被订阅，tap 中产生副作用的函数并不会执行。</p><h3 id="其他一些操作符"><a href="#其他一些操作符" class="headerlink" title="其他一些操作符"></a>其他一些操作符</h3><ol><li>repeat</li></ol><p>repeat 用来重复上游 Observable</p><p>2）pluck 类似 lodash 的方法 pluck，提取对象的嵌套属性的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> click$ <span class="token operator">=</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> tagName$ <span class="token operator">=</span> click$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> <span class="token string">'tagName'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tagName$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>等价于：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">click$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）toArray</p><p>将发出的数据汇聚为数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [0, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4）partition</p><p>将上游的 Observable 分为两个，一个 Observable 的数据是符合判定的数据，另一个时不符合判定的数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> part$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>part$<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 2, 4</span>part$<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 3, 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>更多操作符</li></ol><p>RxJS 中的操作符非常多，这里只介绍了一部分，更多请查看<a href="https://rxjs-dev.firebaseapp.com/api">官网 API</a>。</p><h3 id="RxJS-最经典的例子——AutoComplete"><a href="#RxJS-最经典的例子——AutoComplete" class="headerlink" title="RxJS 最经典的例子——AutoComplete"></a>RxJS 最经典的例子——AutoComplete</h3><p>有一个用于搜索的 input，当输入时自动发送 ajax，并在下方显示结果列表，然后可以选择结果，这就是我们常见的 AutoComplete 效果。要实现这个效果有很多细节要考虑，如防止 race condition 和优化请求次数。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autocomplete<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suggest-list<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suggest<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>先获取两个 DOM 元素：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#search'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> suggestList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#suggest-list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们先将输入框的 input 的事件转化为 Observable。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> input$ <span class="token operator">=</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> <span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们根据输入的值去发送 ajax 请求，由于我们是要获取最新的值而丢弃之前 ajax 返回的值，我们应该使用 switchMap 操作符。通过使用这个操作符，我们解决了 race condition 问题。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">input$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">switchMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">from</span><span class="token punctuation">(</span><span class="token function">getSuggestList</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>getSuggestList 是一个发送 ajax 请求的方法，返回 promise，我们使用 from 来将其转化为 Observable。</p><p>为了优化请求，首先 e.target.value 是空字符串时不应该发送请求，然后可以使用 debounceTime 减少触发频率，也可以使用 distinctUntilChanged 操作符来表示只有与上次不同时才去发送请求。我们还可以在 API 失败时重试 3 次。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">input$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">debounceTime</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">distinctUntilChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">switchMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">from</span><span class="token punctuation">(</span><span class="token function">getSuggestList</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们去订阅渲染就可以了。</p><p>对于结果列表上的点击事件，比较简单，具体见<a href="https://stackblitz.com/edit/js-xq5bqd?file=index.js">demo</a>。</p><h3 id="操作符和数组方法"><a href="#操作符和数组方法" class="headerlink" title="操作符和数组方法"></a>操作符和数组方法</h3><p>Observable 的操作符和数组的方法有相似之处，但是也有很大的不同，体现在以下两点：</p><ol><li>延迟运算</li><li>渐进式取值</li></ol><p>延迟运算，我们之前有讲到过，就是只有订阅后才会开始对元素进行运算。</p><p>因为 Observable 是时间上的集合，操作符不是像数组方法那样运算完所有元素再返回交给下一个方法，而是一个元素一直运算到底，就像管道中的水流一样，先发出的数据先经过操作符的运算。</p><h2 id="多播"><a href="#多播" class="headerlink" title="多播"></a>多播</h2><p>前面的例子都是只有一个订阅者的情况，实际上当然可以有多个订阅者，这就是多播(multicast)，即一个数据流的内容被多个 Observable 订阅。</p><h3 id="Hot-Observable-和-Cold-Observable"><a href="#Hot-Observable-和-Cold-Observable" class="headerlink" title="Hot Observable 和 Cold Observable"></a>Hot Observable 和 Cold Observable</h3><p>先思考一下下面的例子结果是什么？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer 1: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer 2: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可能会以为 Observer 2 一秒后才订阅，错过了数据 0，因此只会输出 1 和 2，但实际上会先输出 0。为什么如此呢？这就涉及到对已错过数据的两种处理策略。</p><ol><li>错过的就让它过去，只要订阅之后生产的数据就好</li><li>不能错过，订阅之前生产的数据也要</li></ol><p>第一种策略类似于直播，第二种和点播相似。使用第一种策略的 Observable 叫做 Cold Observable，因为每次都要重新生产数据，是 “冷”的，需要重新发动。第二种，因为一直在生产数据，只要使用后面的数据就可以了，所以叫 Hot Observable。</p><p>RxJS 中如 interval、range 这些方法产生的 Observable 都是 Cold Observable，产生 Hot Observable 的是由 Promise、Event 这些转化而来的 Observable，它们的数据源都在外部，和 Observer 无关。</p><p>前面我们提到 Observable 都是 lazy evaluation 的，数据管道内的逻辑只有订阅后才会执行，但是 Cold Observable 相对更 lazy 一些。Cold Observable 如果没有订阅者连数据都不会产生，对于 Hot Observable，数据仍会产生，但是不会进入管道处理。</p><p>Hot Observable 是多播，对于 Cold Observable，每次订阅都重新生产了一份数据流，所以不是多播。下面的例子更加明显，两个订阅者有很大的概率会接收到不同的数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer 1: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer 2: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想要实现多播，就要使用 RxJS 中 Subject。</p><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><p>为了防止每次订阅都重新生产一份数据流，我们可以使用中间人，让这个中间人去订阅源数据流，观察者都去订阅这个中间人。这个中间人能去订阅数据流，所以是个 Observer，又能被观察者订阅，所以也是 Observable。我们可以自己实现一个这样的中间人：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  observers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function-variable function">subscribe</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> o<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> o<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token operator">=></span> o<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 subject 拥有 Observer 的 next、error、complete 方法，每次被观察者订阅时都会在内部保存这个观察者。当接收到源数据流的数据时，会把数据发送给每一个观察者。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> observerA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer A: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>  error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer A completed'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> observerB <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer B: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>  error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer B completed'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  subject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时我们发现两个观察者接收到的是同一份数据，ObserverB 由于延迟一秒订阅，所以少接收到一个数据。将我们自己实现的 subject 换成 RxJS 中的 Subject，效果相同：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Subject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从上面可以看到，Subject 和 Observable 有一个很大的不同：它内部保存有一个观察者列表。</p><p>前面的 subject 是在源数据流发出值时调用 next 方法，向订阅的观察者发送这个值，我们也可以手动调用 subject 的 next 方法送出值：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> observerA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer A: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> observerB <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer B: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  subject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  subject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结一下，Subject 既是 Observable 又是 Observer，它会对内部的 observers 清单进行组播(multicast)。</p><h3 id="Subject-的错误处理"><a href="#Subject-的错误处理" class="headerlink" title="Subject 的错误处理"></a>Subject 的错误处理</h3><p><strong>在 RxJS 5 中，如果 Subject 的某个下游数据流产生了错误异常，而又没有被 Observer 处理，那这个 Subject 的其他 Observer 都会失败。但是在 RxJS 6 中不会如此。</strong></p><p>在 v6 的<a href="https://stackblitz.com/edit/js-yy1wxg?file=index.js">这个例子</a> 中，ObserverA 没有对错误进行处理，但是并不影响 ObserverB，而在 v5 <a href="https://stackblitz.com/edit/js-h1rduq">这个 demo</a>中因为 ObserverA 没有对错误进行处理，使得 ObserverB 终止了。很明显 v6 的这种处理更符合直觉。</p><h3 id="BehaviorSubject、ReplaySubject、AsyncSubject"><a href="#BehaviorSubject、ReplaySubject、AsyncSubject" class="headerlink" title="BehaviorSubject、ReplaySubject、AsyncSubject"></a>BehaviorSubject、ReplaySubject、AsyncSubject</h3><p>1）BehaviorSubject</p><p>BehaviorSubject 需要在实例化时给定一个初始值，如果没有默认是 undefined，每次订阅时都会发出最新的状态，即使已经错过数据的发送时间。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> observerA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer A: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> observerB <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer B: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BehaviorSubject</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Observer A: 0</span>subject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Observer A: 1</span>subject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Observer A: 2</span>subject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Observer A: 3</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  subject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Observer B: 3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>observerB 已经错过流数据的发送时间，但是订阅时也能获取到最新数据 3。</p><p>BehaviorSubject 有点类似于状态，一开始可以提供初始状态，之后订阅都可以获取最新的状态。</p><p>2）ReplaySubject</p><p>ReplaySubject 表示重放，在新的观察者订阅时重新发送原来的数据，可以通过参数指定重放最后几个数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> observerA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer A: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> observerB <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer B: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplaySubject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重放最后两个</span>subject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerA<span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Observer A: 1</span>subject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Observer A: 2</span>subject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Observer A: 3</span>subject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  subject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerB<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Observer B: 2</span>  <span class="token comment">// Observer B: 3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们可以看到，即使 subject 完结后再去订阅依然可以重放最后两个数据。</p><p>ReplaySubject(1) 和前面的 BehaviorSubject 是不一样的，首先后者可以提供默认数据，而前者不行，其次前者在 subject 终结后再去订阅依然可以得到最近发出的数据而后者不行。</p><p>3）AsyncSubject</p><p>AsyncSubject 有点类似 operator last，会在 subject 完结后送出最后一个值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerA<span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>subject<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Observer A: 3</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  subject<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerB<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Observer B: 3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>observerA 即使早就订阅了，但是并不会响应前面的 next，完结后才接收到最后一个值 3。</p><h3 id="多播操作符"><a href="#多播操作符" class="headerlink" title="多播操作符"></a>多播操作符</h3><p>前面我们写的 Subject 需要去订阅源数据流和被观察者订阅，写起来比较繁琐，我们可以借助操作符来实现。</p><p>1）multicast</p><p>使用方式如下，接收一个 subject 或者 subject factory。这个操作符返回了一个 connectable 的 Observable。等到执行 connect() 才会用真的 subject 订阅 source，并开始发送数据，如果没有 connect，Observable 是不会执行的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">multicast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> observerA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer A: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>  error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer A completed'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> observerB <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer B: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>  error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer B completed'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>source<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerA<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// subject.subscribe(observerA)</span>source<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// source.subscribe(subject)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  source<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// subject.subscribe(observerB)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）refCount</p><p>上面使用了 multicast，但是还是有些麻烦，还需要去手动 connect。这时我们可以再搭配 refCount 操作符创建只要有订阅就会自动 connect 的 Observable。只需要去掉 connect 方法调用，在 multicast 后面再加一个 refCount 操作符。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">multicast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">refCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>refCount 其实就是自动计数的意思，当 Observer 数量大于 1 时，subject 订阅上游数据流，减少为 0 时退订上游数据流。</p><p>3）multicast selector 参数</p><p>multicast 第一个参数除了是一个 subject，还可以是一个 subject factory，即返回 subject 的函数。这时使用了不同的中间人，每个观察者订阅时都重新生产数据，适用于退订了上游之后再次订阅的场景。</p><p>multicast 还可以接收可选的第二个参数，称为 selector 参数。它可以使用上游数据流任意多次，而不会重复订阅上游的数据。当使用了这个参数时，multicast 不会返回 connectable Observable，而是这个参数（回调函数）返回的 Observable。selecetor 回调函数有一个参数，通常叫做 shared，即 multicast 第一个参数所代表的 subject 对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">selector</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">shared</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> shared<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">of</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">multicast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> observerA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer A: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>  error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer A completed'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> observerB <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer B: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>  error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer B completed'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>source<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  source<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Observer A: 0</span><span class="token comment">// Observer A: 1</span><span class="token comment">// Observer A: 2</span><span class="token comment">// Observer A: done</span><span class="token comment">// Observer A completed</span><span class="token comment">// Observer B: done</span><span class="token comment">// Observer B: completed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>observerB 订阅时会调用 selector 函数，subject 即 shared 已经完结，但是 concat 依然会在这个 Observable 后面加上 ‘done’。</p><p>可以利用 selector 处理 “三角关系”的数据流，如有一个 tick$ 数据流，对其进行 delay(500) 操作后的下游 delayTick$， 一个由它们合并得到的 mergeTick$，这时就形成了三角关系。delayTick$ 和 mergeTick$ 都订阅了 tick$。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> tick$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'source: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> delayTick$ <span class="token operator">=</span> tick$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> mergeTick$ <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>tick$<span class="token punctuation">,</span> delayTick$<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'observer: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// source: 0</span><span class="token comment">// observer: 0</span><span class="token comment">// source: 0</span><span class="token comment">// observer: 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的结果我们可以验证，tick$ 被订阅了两次。</p><p>我们可以使用 selector 函数来使其只订阅一次，将上面的过程移到 selector 函数内即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token function">take</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">tap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'source: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result$ <span class="token operator">=</span> source$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>  <span class="token function">multicast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">shared</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> tick$ <span class="token operator">=</span> shared<span class="token punctuation">;</span>    <span class="token keyword">const</span> delayTick$ <span class="token operator">=</span> tick$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> mergeTick$ <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>tick$<span class="token punctuation">,</span> delayTick$<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mergeTick$<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'observer: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这时只会输出一次 ‘source: 0’。</p><p>4）publish</p><p>publish 是 multicast 的一种简写方式，效果等同于如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token parameter">selector</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">multicast</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">multicast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有上一节说到的 selector 函数时，等价于：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">    <span class="token function">multicast</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> selector<span class="token punctuation">)</span>没有时，等价于：<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`javascript    <span class="token function">multicast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）share</p><p>share 是 multicast 和 refCount 的简写，share() 等同于在 pipe 中先调用了 multicast(() =&gt; new Subject())，再调用了 refCount()。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">share</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> observerA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer A: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>  error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer A completed'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> observerB <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer B: '</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span>  error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token function-variable function">complete</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer B completed'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>source<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerA<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  source<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observerB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Observer A: 0</span><span class="token comment">// Observer A: 1</span><span class="token comment">// Observer A: 2</span><span class="token comment">// Observer A completed</span><span class="token comment">// Observer B: 0</span><span class="token comment">// Observer B: 1</span><span class="token comment">// Observer B: 2</span><span class="token comment">// Observer B completed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于 share 是调用了 subject 工厂函数，而不是一个 subject 对象，因此 observerB 订阅时可以重新获取数据。</p><p>6）publishLast、publishBehavior、publishReplay</p><p>同前面的 publish，只不过使用的不是普通 Subject，而是对应的 AsyncSubject、BehaviorSubject、ReplaySubject。</p><h2 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h2><p>Scheduler(调度器)用于控制数据流中数据的推送节奏。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> range<span class="token punctuation">,</span> asapScheduler <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs'</span><span class="token punctuation">;</span><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> asapScheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'before subscribe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'subscribed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码，如果去掉 asapScheduler 参数，因为 range 是同步的，会先输出 1, 2, 3，再输出 ‘subscribed’，但是加了以后就变成 先输出 ‘subscribed’，改变了原来数据产生的方式。asap 是 as soon as possible 的缩写，同步任务完成后就会马上执行。</p><p>Scheduler 拥有一个虚拟时钟，如 interval 创建的数据流每隔一段时间要发出数据，由 Scheduler 提供时间来判断是否到了发送数据的时间。</p><h3 id="Scheduler-实例"><a href="#Scheduler-实例" class="headerlink" title="Scheduler 实例"></a>Scheduler 实例</h3><ul><li>undefined/null：不指定 Scheduler，代表同步执行的 Scheduler</li><li>asap：尽快执行的 Scheduler</li><li>async：利用 setInterval 实现的 Scheduler</li><li>queue：利用队列实现的 Scheduler，用于迭代一个的大的集合的场景。</li><li>animationFrame：用于动画的 Scheduler</li></ul><p>asap 会尽量使用 micro task，而 async 会使用 macro task。</p><h3 id="相关操作符"><a href="#相关操作符" class="headerlink" title="相关操作符"></a>相关操作符</h3><p>一些创建数据流的方法可以提供 Scheduler 参数，合并类操作符如 merge 也可以，在创建数据流后我们也可以使用操作符，使得产生的下游 Observable 推送数据的节奏由指定的 Scheduler 来控制。这个操作符就是 observeOn。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> tick$ <span class="token operator">=</span> <span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Intervals are scheduled with async scheduler by default...</span>tick$  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">observeOn</span><span class="token punctuation">(</span>animationFrameScheduler<span class="token punctuation">)</span> <span class="token comment">// but we will observe on animationFrame scheduler to ensure smooth animation.</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    someDiv<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> val <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本来每 10 ms 就会发送一个数据，修改 Scheduler 为 animationFrame 后只有浏览器重绘才会发送数据更新样式。</p><p>我们还可以通过操作符 subscribeOn 控制订阅的时机。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> source$ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observable</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'on subscribe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  observer<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'on unsubscribe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> tweaked$ <span class="token operator">=</span> source$<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">subscribeOn</span><span class="token punctuation">(</span>asapScheduler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'before subscribe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tweaked$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'subscribed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// before subscribe</span><span class="token comment">// subscribed</span><span class="token comment">// on subscribe</span><span class="token comment">// 1</span><span class="token comment">// 2</span><span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 subscribeOn(asapScheduler)，我们把订阅时间推迟到尽快执行。</p><h3 id="TestScheduler"><a href="#TestScheduler" class="headerlink" title="TestScheduler"></a>TestScheduler</h3><p>RxJS 中有一个 用于测试的 TestScheduler，RxJS 的测试大家可以查看程墨的《深入浅出 RxJS》或者其他资料。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> TestScheduler <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rxjs/testing'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="RxJS-的一些实践"><a href="#RxJS-的一些实践" class="headerlink" title="RxJS 的一些实践"></a>RxJS 的一些实践</h2><h3 id="RxJS-与前端框架结合"><a href="#RxJS-与前端框架结合" class="headerlink" title="RxJS 与前端框架结合"></a>RxJS 与前端框架结合</h3><p>Angular 自身引用了 RxJS，如 http 和 animation 都使用了 Observable，状态管理可以使用 <a href="https://github.com/ngrx/platform">ngrx</a>。</p><p>Vue 官方有与 RxJS 集成的 <a href="https://github.com/vuejs/vue-rx">vue-rx</a>。</p><p>React 可以通过 Subject 建立桥梁，Redux 也有与 RxJS 结合的中间件 Redux-Observable。</p><h3 id="轮询中的错误处理"><a href="#轮询中的错误处理" class="headerlink" title="轮询中的错误处理"></a>轮询中的错误处理</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>    <span class="token function">switchMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">from</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">catchError</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">EMPTY</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码，每隔 10s 去发送一个请求，当某个请求返回出错时，返回空的 Observable 而不渲染数据。这样处理貌似正确，但是实际上某个请求出错时，整个 Observable 终结了，因此轮询就结束了。为了保持轮询，我们需要进行隔离，把错误处理移到 switchMap 内部进行处理。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">interval</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">switchMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">from</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">catchError</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">EMPTY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="订阅管理"><a href="#订阅管理" class="headerlink" title="订阅管理"></a>订阅管理</h3><p>如果没有及时退订可能会引发内存泄露，我们需要通过退订去释放资源。</p><p>1）命令式管理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> subscription <span class="token operator">=</span> source$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// later...</span>subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的管理方式，数量很少时还好，如果数量较多，将会显得十分笨拙。</p><ol start="2"><li>声明式管理</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> kill1 <span class="token operator">=</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>button<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> kill2 <span class="token operator">=</span> <span class="token function">getStreamOfRouteChanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> kill3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> merged$ <span class="token operator">=</span> <span class="token function">mege</span><span class="token punctuation">(</span>  source1<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">takeUntil</span><span class="token punctuation">(</span>kill1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  source2<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">takeUntil</span><span class="token punctuation">(</span>kill2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  source3<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">takeUntil</span><span class="token punctuation">(</span>kill3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> sub <span class="token operator">=</span> merged$<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// later...</span>sub<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者发出任意结束的事件</span>kill3<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 takeUntil、map 或者其他操作符组合进行管理。这样更不容易漏掉某个退订，订阅也减少了。</p><p>3）让框架或者某些类库去处理</p><p>比如 Angular 中的 async pipe，当 unmount 时会自动退订，也不用写订阅。</p><h3 id="不要-Rx-一切"><a href="#不要-Rx-一切" class="headerlink" title="不要 Rx 一切"></a>不要 Rx 一切</h3><p>不要过度使用 Rx，它比较适合以下场景：</p><ul><li>组合事件时</li><li>增加延迟和控制频率</li><li>组合异步任务</li><li>需要取消时</li></ul><p>简单的应用并不需要 RxJS。</p><h3 id="RxJS-的业务实践"><a href="#RxJS-的业务实践" class="headerlink" title="RxJS 的业务实践"></a>RxJS 的业务实践</h3><p>可以看看徐飞的相关思考：<a href="https://github.com/xufei/blog/issues/38">流动的数据——使用 RxJS 构造复杂单页应用的数据逻辑</a></p><h2 id="RxJS-与-Async-Iterator"><a href="#RxJS-与-Async-Iterator" class="headerlink" title="RxJS 与 Async Iterator"></a>RxJS 与 Async Iterator</h2><p>Async Iterator 提案已经进入了 ES2018，可以认为是 iterator 的异步版本。在 Symbol 上部署了 asyncIterator 的接口，不过它的 next 方法返回的是 { value, done } 对象的 Promise 版本。可以使用 for-await-of 进行迭代：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> line <span class="token keyword">of</span> <span class="token function">readLines</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 Async Iterator 我们可以很容易实现类似 RxJS 操作符的功能：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">map</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token keyword">yield</span> <span class="token function">fn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其他如 fromEvent 等也比较容易实现。Async Iterator 扩展库 <a href="https://github.com/jamiemccrindle/axax">axax</a> 的一个例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> fromEvent <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'axax/es5/fromEvent'</span><span class="token punctuation">;</span><span class="token keyword">const</span> clicks <span class="token operator">=</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> click <span class="token keyword">of</span> clicks<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'a button was clicked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是 Benjamin Gruenbaum 用 Async Iterator 实现 AutoComplete 的一个例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> tooSoon <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> last<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token keyword">await</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>target<span class="token operator">:</span> <span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">of</span> <span class="token function">fromEvent</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> <span class="token string">"keyup"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>value <span class="token operator">||</span> tooSoon<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">===</span> last<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  last <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"/autocomplete/"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// misses `last`</span>  tooSoon <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> tooSoon <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Async Iterator 相比 RxJS，没有那么多概念，上手快，也比较容易扩展实现那些操作符。</p><p>从数据消费者的角度上看，RxJS 是 push stream，由生产者把数据推送过来，Async Iterator 是 pull stream，是自己去拉取数据。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>博客：<a href="https://ithelp.ithome.com.tw/articles/10186104">30 天精通 RxJS</a></p><p>书：<a href="https://book.douban.com/subject/30217949/">深入浅出 RxJS</a></p><p>视频：<a href="https://www.youtube.com/watch?v=3LKMwkuK0ZE&t=14s">RxJS 5 Thinking Reactively | Ben Lesh</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> rxjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 开发2017年变化回顾及2018年展望</title>
      <link href="/posts/50730.html"/>
      <url>/posts/50730.html</url>
      
        <content type="html"><![CDATA[<h2 id="vue-js-变化"><a href="#vue-js-变化" class="headerlink" title="vue.js 变化"></a>vue.js 变化</h2><p>从 github 的发布记录我们可以看到 2017 年 vue.js 的第一个发布为 v2.1.9，最后一个为 v2.5.13，主要发布小版本 2.2~2.5。这些发布提升了 vue 与 TypeScript 的结合、改进了对服务端渲染（SSR）和 native 渲染的支持、提供了更好的测试、开发体验及其他的一些功能与优化。</p><h3 id="vue-2-2-变化"><a href="#vue-2-2-变化" class="headerlink" title="vue@2.2 变化"></a>vue@2.2 变化</h3><p>1）使用 v-for 必须要添加 key 属性。</p><p>2）单文件组件(SFC)标签需要闭合，尽管 html5 中标签没有闭合也是有效的。</p><p>3）prop 属性和 computed 属性定义在组件的原型上，而不是作为每个实例自身的属性。</p><p>4）更好的错误处理 Vue.config.errorHandler</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function-variable function">errorHandler</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> vm<span class="token punctuation">,</span> info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// handle error</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 2.2.0+，这个钩子函数可以捕获组件生命周期钩子中产生的错误，如果这个函数为 undefined，捕获的错误将会使用 console.error 打印出来而不会使应用崩溃。</p><p>在 2.4.0+，也会捕获 vue 自定义事件的 handler 中抛出的错误。</p><p>错误追踪服务如 <a href="https://sentry.io/for/vue/">Sentry</a> 和 <a href="https://docs.bugsnag.com/platforms/browsers/vue/">Bugsnag</a> 提供了和这个选项的官方集成。</p><p>5）Vue.util 中暴露的一些方法和属性被移除了。</p><p>6）服务端渲染改进</p><p>7）组件自定义 v-model</p><p>自定义组件允许使用 v-model 时自定义属性和事件，默认使用 value 属性和 input 事件。</p><p>8）provide 和 inject</p><p>9）vm.$props</p><p>可以通过 this.$props 获取组件当前属性</p><p>10）&lt;transition&gt; 和 &lt;transition-group&gt; 支持 duration 属性</p><p>11）性能分析 Vue.config.performance</p><p>12）keep-alive 增加 activated 和 deactivated 钩子函数</p><p>13）vm.$on 支持多事件</p><p>14）v-on 支持新的 mouse event 修饰符 .left, .right, .middle</p><p>15）使用驼峰风格属性将会警告（实际上单文件组件并没有此问题，因为会自动转化为短横线分隔式命名）</p><h3 id="vue-2-3-变化"><a href="#vue-2-3-变化" class="headerlink" title="vue@2.3 变化"></a>vue@2.3 变化</h3><p>1）许多重要的服务端渲染的改进，发布了 <a href="https://ssr.vuejs.org/">ssr guide</a>。</p><p>2）异步组件改进、函数式组件改进</p><p>3）.sync 修饰符回归。不过只是一个简单的语法糖，:foo.sync 等价于 :foo=”bar” @update:foo=”val =&gt; var = val”，子组件更新 foo 的值时，需要明确地触发事件：</p><pre><code>this.$emit(&#39;update:foo&#39;, newValue)</code></pre><p>4）Vue.config.errorHandler 支持自定义指令和 nextTick 回调中抛出的错误</p><p>5）v-on 支持 .passive 修饰符</p><p>6）属性验证支持 type: Symbol</p><p>7）style 绑定支持数组</p><pre><code>&lt;div :style=&quot;&#123; display: [&quot;-webkit-box&quot;, &quot;-ms-flexbox&quot;, &quot;flex&quot;] &#125;&quot;&gt;</code></pre><h3 id="vue-2-4-变化"><a href="#vue-2-4-变化" class="headerlink" title="vue@2.4 变化"></a>vue@2.4 变化</h3><p>1）完全的服务端渲染 + 异步组件支持。这意味着在服务端渲染中异步组件/代码分割不再局限于路由级别。</p><p>2）inheritAttrs 选项和 $attrs, $listeners</p><pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;  &lt;input v-bind&#x3D;&quot;$attrs&quot; v-on&#x3D;&quot;$listeners&quot;&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3）v-on 支持对象</p><pre class="line-numbers language-none"><code class="language-none">&lt;button v-on&#x3D;&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;&gt;&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4）增加 comments 选项</p><p>默认 false，设置为 true 时，将会保留 tempalte 里面的 html 注释</p><p>5）服务端渲染性能提升了 2~8 倍（取决于你的组件可以优化多少）</p><h3 id="vue-2-5-变化"><a href="#vue-2-5-变化" class="headerlink" title="vue@2.5 变化"></a>vue@2.5 变化</h3><p>1）增加 errorCaptured 钩子来增强错误处理</p><p>2）TypeScript 声明改进</p><p>3）函数式组件改进</p><p>template 支持函数式组件</p><pre class="line-numbers language-none"><code class="language-none">&lt;template functional&gt;  &lt;div&gt;&#123;&#123; props.foo &#125;&#125;&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4）v-on 改进</p><p>添加了 .exact 修饰符</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- this will fire even if Alt or Shift is also pressed --&gt;&lt;button @click.ctrl&#x3D;&quot;onClick&quot;&gt;A&lt;&#x2F;button&gt;&lt;!-- this will only fire when only Ctrl is pressed --&gt;&lt;button @click.ctrl.exact&#x3D;&quot;onCtrlClick&quot;&gt;A&lt;&#x2F;button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>key 修饰符，如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;input @keyup.page-down&#x3D;&quot;onPageDown&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5）简化的 scoped slot</p><p>6）nextTick 内部实现改变</p><p>在 v-on 内绑定的事件处理函数中的 DOM 更新延迟由 micro task 改成了 macro task</p><h2 id="vue-router-变化"><a href="#vue-router-变化" class="headerlink" title="vue-router 变化"></a>vue-router 变化</h2><p>1）传递属性给路由组件</p><p>在组件中使用 $route 耦合性非常强，通过传递属性的方式可以解耦，大大增强组件的灵活性。</p><p>2）组件内的钩子函数 beforeRouteUpdate</p><p>使用这个钩子函数，可以不用像之前那样必须 watch $route</p><p>3）router.addRoutes</p><p>动态添加路由的利器</p><p>4）router.push() 和 router.replace() 支持可选的第二个回调参数（onComplete）和第三个回调参数（onAbort）</p><p>5）导航的 next 函数支持接收一个错误作为参数</p><p>6）新的 router guard 方法 router.beforeResolve()</p><p>7）新的路由实例选项 fallback</p><p>控制路由当浏览器不支持 history.pushState 时是否 fallback 到 hash 模式。当服务端渲染需要兼容 ie9 时，设置为 false，因为服务端渲染不能使用 hash 路由模式，而 ie9 不支持 history.pushState。</p><p>8）当浏览器支持 history.pushState 时，hash 模式也可以支持 scrollBehavior，同时这个函数也支持返回 Promise。</p><p>9）发布了 v3.x，主要是为了兼容 TypeScript。</p><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>vuex 没有大的变化，有添加一下方法。和 vue-router 一样发布了 v3.x，也是为了兼容 TypeScript。</p><h2 id="2018-展望"><a href="#2018-展望" class="headerlink" title="2018 展望"></a>2018 展望</h2><h3 id="vue-3-x"><a href="#vue-3-x" class="headerlink" title="vue 3.x"></a>vue 3.x</h3><p>2018 年很有可能发布 Vue 3，这个版本只支持长期更新的浏览器，如 Edge，不会支持 IE。主要改变的是 vue.js 内部，外部 api 会尽量 100% 兼容。对于低版本浏览器，可以使用 vue 2.x，因为 2.x 和 3.x 将会同时维护。<a href="https://hashnode.com/ama/with-vuejs-team-cj7itlrki03ae62wuv2r2005s">查看计划</a></p><h3 id="vue-cli-3-x"><a href="#vue-cli-3-x" class="headerlink" title="vue-cli 3.x"></a>vue-cli 3.x</h3><p>vue-cli 2.x 暴露了一堆配置，对新手很不友好，更重要是这样很难直观地知道项目相对于默认配置的修改，而且这些配置直接从 github 拉取下来，也没有版本的概念。</p><p>vue-cli 3.x 将会只暴露一个配置的 js 文件，并且会预设很多默认配置，可能会类似于 Nuxt.js，具体<a href="https://github.com/vuejs/vue-cli/issues/589">查看讨论</a></p><h3 id="vue-devtools-4-x-已发布"><a href="#vue-devtools-4-x-已发布" class="headerlink" title="vue-devtools 4.x(已发布)"></a>vue-devtools 4.x(已发布)</h3><p>新发布的 vue-devtools 比上一个版本强大了很多，支持从页面中选择组件、Inspect DOM、过滤观察的 data/state 等，直接编辑 data 等。</p><h3 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h3><p>随着 Nuxt 1.0 正式版本的发布，相信接下来很多公司都会将其用于部分对 SEO 有要求的官网页面。</p><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>weex 和 nativescript-vue 被越来越多的公司用于生产环境了，但是成熟度、流行程度相对于 react 的 react-native 有一段距离。ios11.3 也支持了 Service Workers，也许接下来 PWA 会很流行？</p><h3 id="style-guide"><a href="#style-guide" class="headerlink" title="style guide"></a>style guide</h3><p>目前官方只发布了 beta 版的 style guide，接下来可能会发布正式版，配合 eslint-plugin-vue 让我们写出更好的 vue 代码。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise小书（长文）</title>
      <link href="/posts/19117.html"/>
      <url>/posts/19117.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要参考了 JavaScript Promise 迷你书，链接在文末与其他参考一起列出。</p><h2 id="promise-基础"><a href="#promise-基础" class="headerlink" title="promise 基础"></a>promise 基础</h2><p>Promise 是异步编程的一种解决方案。ES6 Promise 的规范来源于 Promises/A+社区，它有很多版本的实现。</p><p>Promise 比传统的解决方案（回调函数和事件）更合理和更强大，可以避免回调地狱。使用 Promise 来统一处理异步操作，更具语义化、易于理解、有利维护。</p><p>Promise 接口的基本思想是让异步操作返回一个 Promise 对象，我们可以对这个对象进行一些操作。</p><h3 id="三种状态和两种变化途径"><a href="#三种状态和两种变化途径" class="headerlink" title="三种状态和两种变化途径"></a>三种状态和两种变化途径</h3><p>Promise 对象只有三种状态。</p><ul><li>异步操作“未完成”，promise 对象刚被创建后的初始化状态（unresolved，Promises/A+中称 pending）</li><li>异步操作“已完成”（resolved，Promises/A+中称 fulfilled）</li><li>异步操作“失败”（rejected）</li></ul><p>这三种的状态的变化途径只有两种。</p><ul><li>异步操作从“未完成”到“已完成”</li><li>异步操作从“未完成”到“失败”。</li></ul><p>这种变化只能发生一次，一旦当前状态变为“已完成”或“失败”，就意味着不会再有新的状态变化了。因此，Promise 对象的最终结果只有两种。</p><p>异步操作成功，Promise 对象传回一个值，状态变为 resolved。</p><p>异步操作失败，Promise 对象抛出一个错误，状态变为 rejected。</p><h3 id="api-简介"><a href="#api-简介" class="headerlink" title="api 简介"></a>api 简介</h3><p>目前主要有三种类型</p><ol><li>构造函数（Constructor）</li></ol><p>创建一个 promise 实例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 异步处理</span>  <span class="token comment">// 处理结束后、调用resolve 或 reject</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>实例方法（Instance Method）</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>静态方法（Static Method）</li></ol><p>Promise.all()、 Promise.race()、Promise.resolve()、Promise.reject()</p><h3 id="创建-promise-对象"><a href="#创建-promise-对象" class="headerlink" title="创建 promise 对象"></a>创建 promise 对象</h3><p>给 Promise 构造函数传递一个函数 fn 作为参数实例化即可。这个函数 fn 有两个参数（resolve 和 reject），在 fn 中指定异步等处理：</p><ul><li>处理结果正常的话，调用 resolve(处理结果值)</li><li>处理结果错误的话，调用 reject(Error 对象)。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建promise对象基本形式</span><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ... some code</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* 异步操作成功 */</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 将图片加载转为promise形式</span><span class="token keyword">var</span> <span class="token function-variable function">preloadImage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        image<span class="token punctuation">.</span>onload  <span class="token operator">=</span> resolve        image<span class="token punctuation">.</span>onerror <span class="token operator">=</span> reject        image<span class="token punctuation">.</span>src <span class="token operator">=</span> path    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建XHR的promise对象</span><span class="token keyword">function</span> <span class="token function">getURL</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">URL</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>        req<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        req<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行示例</span><span class="token keyword">var</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token string">'http://httpbin.org/get'</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">onFulfilled</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">onRejected</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>getURL 只有在通过 XHR 取得结果状态为 200 时才会调用 resolve。也就是只有数据取得成功时，而其他情况（取得失败）时则会调用 reject 方法。</p><p>resolve(req.responseText)在 response 的内容中加入了参数。resolve 方法的参数并没有特别的规则，基本上把要传给回调函数参数放进去就可以了。(then 方法可以接收到这个参数值)</p><h3 id="为-promise-对象添加处理方法"><a href="#为-promise-对象添加处理方法" class="headerlink" title="为 promise 对象添加处理方法"></a>为 promise 对象添加处理方法</h3><p>为 promise 对象添加处理方法主要有以下两种：</p><ul><li>promise 对象被 resolve 时的处理(onResolved)</li><li>promise 对象被 reject 时的处理(onRejected)</li></ul><p>被 resolve 后的处理，可以在.then 方法中传入想要调用的函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">;</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">onResolved</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>被 reject 后的处理，可以在.then 的第二个参数或者是在.catch 方法中设置想要调用的函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token string">'http://httpbin.org/status/500'</span><span class="token punctuation">;</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">onResolved</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.catch 只是 promise.then(undefined, onRejected)的别名而已，如下代码也可以完成同样的功能。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onResolved<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h3><p>1）new Promise 的快捷方式</p><p>静态方法 Promise.resolve(value)可以认为是 new Promise()方法的快捷方式。Promise.resolve(value)返回一个状态由给定 value 决定的 Promise 对象。如果该值是一个 Promise 对象，则直接返回该对象；如果该值是 thenable 对象（见下面部分 2），返回的 Promise 对象的最终状态由 then 方法执行决定；否则的话（该 value 为空，基本类型或者不带 then 方法的对象），返回的 Promise 对象状态为 resolved，并且将该 value 传递给对应的 then 方法。</p><p>所以和 new Promise()方法并不完全一致。Promise.resolve 接收一个 promise 对象会直接返回这个对象。而 new Promise()总是新生成一个 promise 对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1 <span class="token operator">===</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1 <span class="token operator">===</span> p3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用 Promise.resolve()快速初始化一个 promise 对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）Promise.resolve 方法另一个作用就是将 thenable 对象转换为 promise 对象。</p><p>什么是 thenable 对象？Thenable 对象可以认为是类 Promise 对象，拥有名为.then 方法的对象。和类数组的概念相似。</p><p>有哪些 thenable 对象？主要是 ES6 之前有许多库实现了 Promise，其中有很多与 ES6 Promise 规范并不一致，我们称这些与 ES6 中的 promise 对象类似而又有差异的对象为 thenable 对象。如 jQuery 中的 ajax()方法返回的对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 将thenable对象转换promise对象</span><span class="token keyword">var</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'/json/comment.json'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => promise对象</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h3><p>Promise.reject(error)是和 Promise.resolve(value)类似的静态方法，是 new Promise()方法的快捷方式。</p><p>比如 Promise.reject(new Error(‘出错了’))就是下面代码的语法糖形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><p>Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 实例，如果不是，就会先调用 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。</p><p>p 的状态由 p1、p2、p3 决定，分成两种情况。</p><p>（1）只有 p1、p2、p3 的状态都变成 resolved，p 的状态才会变成 resolved，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。</p><p>（2）只要 p1、p2、p3 之中有一个被 rejected，p 的状态就变成 rejected，此时第一个被 reject 的实例的返回值，会传递给 p 的回调函数。</p><p>传递给 Promise.all 的 promise 并不是一个个的顺序执行的，而是同时开始、并行执行的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// `delay`毫秒后执行resolve</span><span class="token keyword">function</span> <span class="token function">timerPromisefy</span><span class="token punctuation">(</span><span class="token parameter">delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> startDate <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 所有promise变为resolve后程序退出</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token function">timerPromisefy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">timerPromisefy</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">timerPromisefy</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">timerPromisefy</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">values</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startDate <span class="token operator">+</span> <span class="token string">'ms'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 约128ms</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 32, 64, 128]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上述结果可以看出，传递给 Promise.all 的 promise 并不是一个个的顺序执行的，而是同时开始、并行执行的。</p><p>如果这些 promise 全部串行处理的话，那么需要等待 1ms → 等待 32ms → 等待 64ms → 等待 128ms ，全部执行完毕需要约 225ms 的时间。</p><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与 Promise.all 类似，但是只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 p 的回调函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// `delay`毫秒后执行resolve</span><span class="token keyword">function</span> <span class="token function">timerPromisefy</span><span class="token punctuation">(</span><span class="token parameter">delay</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 任何一个promise变为resolve或reject的话程序就停止运行</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token function">timerPromisefy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">timerPromisefy</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">timerPromisefy</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">timerPromisefy</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们再来看看在第一个 promise 对象变为确定（resolved）状态后，它之后的 promise 对象是否还在继续运行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> winnerPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is winner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'this is winner'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> loserPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'this is loser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'this is loser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第一个promise变为resolve后程序停止</span>Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>winnerPromise<span class="token punctuation">,</span> loserPromise<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 'this is winner'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行上面代码的话，我们会看到 winnter 和 loser promise 对象的 setTimeout 方法都会执行完毕，console.log 也会分别输出它们的信息。</p><p>也就是说，Promise.race 在第一个 promise 对象变为 Fulfilled 之后，并不会取消其他 promise 对象的执行。</p><p>在 ES6 Promises 规范中，也没有取消（中断）promise 对象执行的概念，我们必须要确保 promise 最终进入 resolve or reject 状态之一。也就是说 Promise 并不适用于状态可能会固定不变的处理。也有一些类库提供了对 promise 进行取消的操作。</p><h2 id="Promise-的实现类库（Library）"><a href="#Promise-的实现类库（Library）" class="headerlink" title="Promise 的实现类库（Library）"></a>Promise 的实现类库（Library）</h2><p>由于很多浏览器不支持 ES6 Promises，我们需要一些第三方实现的和 Promise 兼容的类库。</p><p>选择 Promise 类库首先要考虑的是否具有 Promises/A+兼容性。</p><p>Promises/A+是 ES6 Promises 的前身，Promise 的 then 也是由社区的规范而来。</p><p>这些类库主要有两种：Polyfill 和扩展类库</p><p>1）Polyfill</p><ul><li><a href="https://github.com/stefanpenner/es6-promise">jakearchibald/es6-promise</a>：应用最广泛的一个库，推荐使用这个库。</li><li><a href="https://github.com/yahoo/ypromise">yahoo/ypromise</a>：这是一个独立版本的 YUI 的 Promise Polyfill。</li><li><a href="https://github.com/getify/native-promise-only/">getify/native-promise-only</a>：严格按照 ES6 Promises 的规范设计，没有添加在规范中没有定义的功能。</li></ul><p>2）Promise 扩展类库</p><ul><li><a href="https://github.com/kriskowal/q">kriskowal/q</a>: Q.promise，这个大家应该都比较熟悉了。Angularjs 中的$q 也是受此启发。</li><li><a href="https://github.com/petkaantonov/bluebird">petkaantonov/bluebird</a>：这个类库除了兼容 Promise 规范之外，还扩展了取消 promise 对象的运行，取得 promise 的运行进度，以及错误处理的扩展检测等非常丰富的功能，此外它在实现上还在性能问题下了很大的功夫。</li></ul><p>Q 等文档里详细介绍了 Q 的 Deferred 和 jQuery 里的 Deferred 有哪些异同，以及要怎么进行迁移等都进行了详细的说明。</p><h2 id="两个有用的附加方法"><a href="#两个有用的附加方法" class="headerlink" title="两个有用的附加方法"></a>两个有用的附加方法</h2><p>1）done()</p><p>Promise 对象的回调链，不管以 then 方法或 catch 方法结尾，要是最后一个方法抛出错误，都有可能无法捕捉到（因为 Promise 内部的错误不会冒泡到全局）。因此，我们可以提供一个 done 方法，总是处于回调链的尾端，保证抛出任何可能出现的错误。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>done <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">done</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> error<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 调用</span><span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>f1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面代码可以看到 done 有以下两个特点。</p><ul><li>done 中出现的错误会被作为异常抛出</li><li>终结 Promise chain</li></ul><p>那么它是如何将异常抛到 Promise 的外面的呢？其实这里我们利用的是在 setTimeout 中使用 throw 方法，直接将异常抛给了外部。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// setTimeout的回调函数中抛出异常</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为异步的 callback 中抛出的异常不会被捕获，上面例子中的例外不会被捕获。</p><p>ES6 Promises 和 Promises/A+等在设计上并没有对 Promise.prototype.done 做出任何规定，但是为什么很多类库都提供了该方法的实现呢？</p><p>主要是防止编码时忘记使用 catch 方法处理异常导致错误排查非常困难的问题。由于 Promise 的 try-catch 机制，异常可能会被内部消化掉。这种错误被内部消化的问题也被称为 unhandled rejection，从字面上看就是在 Rejected 时没有找到相应处理的意思。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">JSONPromise</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行示例</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'&#123;&#125;'</span><span class="token punctuation">;</span><span class="token function">JSONPromise</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  conosle<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子里，我们错把 console 拼成了 conosle，因此会发生如下错误：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ReferenceError<span class="token operator">:</span> conosle is not defined<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不过在 chrome 中实测查找这种错误已经相当精准了。所以以前用 jQuery 的时候用过 done，后来在实际项目中并没有使用过 done 方法。</p><p>2）finally()</p><p>finally 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。它与 done 方法的最大区别，它接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Promise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">finally</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> <span class="token constant">P</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">P</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> value<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=></span>      <span class="token constant">P</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> reason<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个还是很有用的，我们经常在 ajax 无论成功还是失败后都要关闭 loading。我一般使用这个库<a href="https://www.npmjs.com/package/promise.prototype.finally">promise.prototype.finally</a>。</p><h2 id="Promise-只能进行异步操作？"><a href="#Promise-只能进行异步操作？" class="headerlink" title="Promise 只能进行异步操作？"></a>Promise 只能进行异步操作？</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行上面的代码，会依次输出 1，2，3。首先 new Promise 中的函数会立即执行，然后是外面的 console.log(2)，最后是 then 回调中的函数。</p><p>由于 promise.then 执行的时候 promise 对象已经是确定状态，从程序上说对回调函数进行同步调用也是行得通的。</p><p>但是即使在调用 promise.then 注册回调函数的时候 promise 对象已经是确定的状态，Promise 也会以异步的方式调用该回调函数，这是在 Promise 设计上的规定方针。为什么要这样呢？</p><p>这涉及到同步调用和异步调用同时存在导致的混乱。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">onReady</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> readyState <span class="token operator">=</span> document<span class="token punctuation">.</span>readyState<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>readyState <span class="token operator">===</span> <span class="token string">'interactive'</span> <span class="token operator">||</span> readyState <span class="token operator">===</span> <span class="token string">'complete'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">onReady</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'DOM fully loaded and parsed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'==Starting=='</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码如果在调用 onReady 之前 DOM 已经载入的话：对回调函数进行同步调用。</p><p>如果在调用 onReady 之前 DOM 还没有载入的话：通过注册 DOMContentLoaded 事件监听器来对回调函数进行异步调用。</p><p>因此，如果这段代码在源文件中出现的位置不同，在控制台上打印的 log 消息顺序也会不同。</p><p>为了解决这个问题，我们可以选择统一使用异步调用的方式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">onReady</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> readyState <span class="token operator">=</span> document<span class="token punctuation">.</span>readyState<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>readyState <span class="token operator">===</span> <span class="token string">'interactive'</span> <span class="token operator">||</span> readyState <span class="token operator">===</span> <span class="token string">'complete'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">onReady</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'DOM fully loaded and parsed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'==Starting=='</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于这个问题，在<a href="http://effectivejs.com/">Effective JavaScript</a>的第 67 项不要对异步回调函数进行同步调用中也有详细介绍：</p><ul><li>绝对不能对异步回调函数（即使在数据已经就绪）进行同步调用。</li><li>如果对异步回调函数进行同步调用的话，处理顺序可能会与预期不符，可能带来意料之外的后果。</li><li>对异步回调函数进行同步调用，还可能导致栈溢出或异常处理错乱等问题。</li><li>如果想在将来某时刻调用异步回调函数的话，可以使用 setTimeout 等异步 API。</li></ul><p>为了避免上述中同时使用同步、异步调用可能引起的混乱问题，Promise 在规范上规定 Promise 只能使用异步调用方式。</p><p>由于 Promise 保证了每次调用都是以异步方式进行的，所以我们在实际编码中不需要调用 setTimeout 来自己实现异步调用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">onReadyPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> readyState <span class="token operator">=</span> document<span class="token punctuation">.</span>readyState<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>readyState <span class="token operator">===</span> <span class="token string">'interactive'</span> <span class="token operator">||</span> readyState <span class="token operator">===</span> <span class="token string">'complete'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">onReadyPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'DOM fully loaded and parsed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'==Starting=='</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异步操作顺序问题"><a href="#异步操作顺序问题" class="headerlink" title="异步操作顺序问题"></a>异步操作顺序问题</h2><p>前面 Promise.resolve()章节的三个 promise，我们看看其执行顺序是怎样的？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">reject</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p3<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p3 : '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p2 : '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p4<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p4-1 : '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p4-1 : '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p4<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p4-2 : '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p4-2 : '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p1 : '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在比较新的浏览器控制台输出会发现顺序为 2，4-1，1，4-2，3（测试发现 chrome55、56 中则是最先打印出 3）。这个不知道怎么解释了，为什么 p3 会最后执行？暂时没找到什么可靠的资料，有大神知道的话，请评论指出。</p><h2 id="Promise-chain（Promise-方法链）"><a href="#Promise-chain（Promise-方法链）" class="headerlink" title="Promise chain（Promise 方法链）"></a>Promise chain（Promise 方法链）</h2><h3 id="Promise-chain-流程"><a href="#Promise-chain-流程" class="headerlink" title="Promise chain 流程"></a>Promise chain 流程</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">taskA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Task A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">taskB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Task B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Catch Error: A or B'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">finalTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Final Task'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>taskA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>taskB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>finalTask<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，我们没有为 then 方法指定第二个参数(onRejected)，可以像下面这样来理解：</p><p>then：注册 onResolved 时的回调函数</p><p>catch：注册 onRejected 时的回调函数</p><p>1）taskA、taskB 都没有发生异常，会按照 taskA → taskB → finalTask 这个流程来进行处理</p><p>2）taskA 没有发生异常，taskB 发生异常，会按照 taskA → taskB → onRejected → finalTask 这个流程来进行处理</p><p>3）taskA 发生异常，会按照 taskA → onRejected → finalTask 这个流程来进行处理，TaskB 是不会被调用的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">taskA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Task A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'throw Error @ Task A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">taskB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Task B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会被调用</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 'throw Error @ Task A'</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">finalTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Final Task'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>taskA<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>taskB<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>finalTask<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本例中我们在 taskA 中使用了 throw 方法故意制造了一个异常。但在实际中想主动进行 onRejected 调用的时候，应该返回一个 Rejected 状态的 promise 对象。</p><h3 id="promise-chain-中如何传递参数？"><a href="#promise-chain-中如何传递参数？" class="headerlink" title="promise chain 中如何传递参数？"></a>promise chain 中如何传递参数？</h3><p>如果 Task A 想给 Task B 传递一个参数该怎么办呢？其实非常简单，只要在 taskA 中 return 一个值，这个值会作为参数传递给 taskB。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doubleUp</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => (1 + 1) * 2</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>increment<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>doubleUp<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// promise chain中出现异常的时候会被调用</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个方法中 return 的值不仅只局限于字符串或者数值类型，也可以是对象或者 promise 对象等复杂类型。</p><p>return 的值会由 Promise.resolve(return 的返回值)进行相应的包装处理，因此不管回调函数中会返回一个什么样的值，最终 then 的结果都是返回一个新创建的 promise 对象。</p><p>也就是说，Promise 的 then 方法不仅仅是注册一个回调函数那么简单，它还会将回调函数的返回值进行变换，创建并返回一个 promise 对象。</p><h3 id="如何停止-promise-chain"><a href="#如何停止-promise-chain" class="headerlink" title="如何停止 promise chain"></a>如何停止 promise chain</h3><p>在使用 Promise 处理一些复杂逻辑的过程中，我们有时候会想要在发生某种错误后就停止执行 Promise 链后面所有的代码。</p><p>然而 Promise 本身并没有提供这样的功能，一个操作，要么成功，要么失败，要么跳转到 then 里，要么跳转到 catch 里。</p><p>具体怎么做，请查看这篇文章<a href="https://github.com/xieranmaya/blog/issues/5">从如何停掉 Promise 链说起</a>。</p><h2 id="每次调用-then-都会返回一个新创建的-promise-对象"><a href="#每次调用-then-都会返回一个新创建的-promise-对象" class="headerlink" title="每次调用 then 都会返回一个新创建的 promise 对象"></a>每次调用 then 都会返回一个新创建的 promise 对象</h2><p>从代码上乍一看，aPromise.then(…).catch(…)像是针对最初的 aPromise 对象进行了一连串的方法链调用。</p><p>然而实际上不管是 then 还是 catch 方法调用，都返回了一个新的 promise 对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> aPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> thenPromise <span class="token operator">=</span> aPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> catchPromise <span class="token operator">=</span> thenPromise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aPromise <span class="token operator">!==</span> thenPromise<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>thenPromise <span class="token operator">!==</span> catchPromise<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行上面代码，证明了 then 和 catch 都返回了和调用者不同的 promise 对象。知道了这点，我们就很容易明白下面两种调用方法的区别：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1: 对同一个promise对象同时调用 `then` 方法</span><span class="token keyword">var</span> aPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>aPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>aPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>aPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1: '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span> <span class="token comment">// => 100</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// vs</span><span class="token comment">// 2: 对 `then` 进行 promise chain 方式进行调用</span><span class="token keyword">var</span> bPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>bPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2: '</span>' <span class="token operator">+</span> value<span class="token punctuation">)</span> <span class="token comment">// => 100 * 2 * 2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是一个由方法 1 中的 then 用法导致的比较容易出现的很有代表性的反模式的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// then的错误使用方法</span><span class="token keyword">function</span> <span class="token function">badAsyncCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 任意处理</span>    <span class="token keyword">return</span> newVar<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种写法有很多问题，首先在 promise.then 中产生的异常不会被外部捕获，此外，也不能得到 then 的返回值，即使其有返回值。</p><p>不仅 then 和 catch 都返回了和调用者不同的 promise 对象，Promise.all 和 Promise.race，他们都会接收一组 promise 对象为参数，并返回一个和接收参数不同的、新的 promise 对象。</p><h2 id="使用-then-的第二个参数还是-catch-处理异常？"><a href="#使用-then-的第二个参数还是-catch-处理异常？" class="headerlink" title="使用 then 的第二个参数还是 catch 处理异常？"></a>使用 then 的第二个参数还是 catch 处理异常？</h2><p>之前我们说过 .catch 也可以理解为 promise.then(undefined, onRejected)。那么使用这两种方法进行错误处理有什么区别呢？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throwError</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 抛出异常</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// &lt;1> onRejected不会被调用</span><span class="token keyword">function</span> <span class="token function">badMain</span><span class="token punctuation">(</span><span class="token parameter">onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>throwError<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// &lt;2> 有异常发生时onRejected会被调用</span><span class="token keyword">function</span> <span class="token function">goodMain</span><span class="token punctuation">(</span><span class="token parameter">onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>throwError<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行示例</span><span class="token function">badMain</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'BAD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">goodMain</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'GOOD'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中，badMain 是一个不太好的实现方式（但也不是说它有多坏），goodMain 则是一个能非常好的进行错误处理的版本。</p><p>为什么说 badMain 不好呢？，因为虽然我们在.then 的第二个参数中指定了用来错误处理的函数，但实际上它却不能捕获第一个参数 onResolved 指定的函数（本例为 throwError）里面出现的错误。</p><p>也就是说，这时候即使 throwError 抛出了异常，onRejected 指定的函数也不会被调用（即不会输出”BAD”字样）。</p><p>与此相对的是，goodMain 的代码则遵循了 throwError → onRejected 的调用流程。这时候 throwError 中出现异常的话，在会被方法链中的下一个方法，即.catch 所捕获，进行相应的错误处理。</p><p>.then 方法中的 onRejected 参数所指定的回调函数，实际上针对的是其 promise 对象或者之前的 promise 对象，而不是针对.then 方法里面指定的第一个参数，即 onResolved 所指向的对象，这也是 then 和 catch 表现不同的原因。</p><p>1）使用 promise.then(onResolved, onRejected)的话</p><p>在 onResolved 中发生异常的话，在 onRejected 中是捕获不到这个异常的。</p><p>2）在 promise.then(onResolved).catch(onRejected)的情况下</p><p>then 中产生的异常能在.catch 中捕获</p><p>3）.then 和.catch 在本质上是没有区别的</p><p>需要分场合使用。</p><p>我们需要注意如果代码类似 badMain 那样的话，就可能出现程序不会按预期运行的情况，从而不能正确的进行错误处理。</p><h2 id="IE8-及-IE8-以下-catch-兼容问题"><a href="#IE8-及-IE8-以下-catch-兼容问题" class="headerlink" title="IE8 及 IE8 以下 catch 兼容问题"></a>IE8 及 IE8 以下 catch 兼容问题</h2><p>IE8 及 IE8 以下即使已经引入了 Promise 的 polyfill，使用 catch 方法仍然会出现 identifier not found 的语法错误。</p><p>这是怎么回事呢？实际上这和 catch 是 ECMAScript 的保留字(Reserved Word)有关。</p><p>在 ECMAScript 3 中保留字是不能作为对象的属性名使用的。而 IE8 及以下版本都是基于 ECMAScript 3 实现的，因此不能将 catch 作为属性来使用，也就不能编写类似 promise.catch()的代码，因此就出现了 identifier not found 这种语法错误了。</p><p>而现代浏览器都支持 ECMAScript 5，而在 ECMAScript 5 中保留字都属于 IdentifierName，也可以作为属性名使用了。</p><p>点标记法（dot notation）要求对象的属性必须是有效的标识符（在 ECMAScript 3 中则不能使用保留字）。</p><p>但是使用中括号标记法（bracket notation）的话，则可以将非合法标识符作为对象的属性名使用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">[</span><span class="token string">'catch'</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于 catch 标识符可能会导致问题出现，因此一些类库（Library）也采用了 caught 作为函数名，而函数要完成的工作是一样的。</p><p>而且很多压缩工具自带了将 promise.catch 转换为 promise[‘catch’]的功能，所以可能不经意之间也能帮我们解决这个问题。</p><h2 id="使用-reject-而不是-throw"><a href="#使用-reject-而不是-throw" class="headerlink" title="使用 reject 而不是 throw"></a>使用 reject 而不是 throw</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "message"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码其实并没有什么问题，但是有两个不好的地方：</p><p>首先是因为我们很难区分 throw 是我们主动抛出来的，还是因为真正的其它异常导致的。</p><p>其次本来这是和调试没有关系的地方，throw 时就会触发调试器的 break 行为，会干扰浏览器的调试器中 break 的功能的正常使用。</p><p>所以使用 reject 会比使用 throw 安全。</p><h2 id="再议-Promise-resolve-和-Thenable"><a href="#再议-Promise-resolve-和-Thenable" class="headerlink" title="再议 Promise.resolve 和 Thenable"></a>再议 Promise.resolve 和 Thenable</h2><p>之前我们已经讲过 Promise.resolve 能将 thenable 对象转化为 promise 对象。接下来我们再看看将 thenable 对象转换为 promise 对象这个功能都能具体做些什么事情。</p><p>以 Web Notification 为例，普通使用回调函数方式如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">notifyMessage</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Notification <span class="token operator">&amp;&amp;</span> Notification<span class="token punctuation">.</span>permission <span class="token operator">===</span> <span class="token string">'granted'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Notification<span class="token punctuation">.</span>requestPermission<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Notification<span class="token punctuation">.</span><span class="token function">requestPermission</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Notification<span class="token punctuation">.</span>permission <span class="token operator">!==</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Notification<span class="token punctuation">.</span>permission <span class="token operator">=</span> status<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">'granted'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'user denied'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"doesn't support Notification API"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行实例</span><span class="token comment">// 第二个参数是传给 `Notification` 的option对象</span><span class="token function">notifyMessage</span><span class="token punctuation">(</span><span class="token string">'Hi!'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通知对象</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 Promise 改写回调：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">notifyMessage</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Notification <span class="token operator">&amp;&amp;</span> Notification<span class="token punctuation">.</span>permission <span class="token operator">===</span> <span class="token string">'granted'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Notification<span class="token punctuation">.</span>requestPermission<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Notification<span class="token punctuation">.</span><span class="token function">requestPermission</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Notification<span class="token punctuation">.</span>permission <span class="token operator">!==</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Notification<span class="token punctuation">.</span>permission <span class="token operator">=</span> status<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">'granted'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'user denied'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"doesn't support Notification API"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">notifyMessageAsPromise</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">notifyMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行示例</span><span class="token function">notifyMessageAsPromise</span><span class="token punctuation">(</span><span class="token string">'Hi!'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通知对象</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 thenable 对象形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">notifyMessage</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Notification <span class="token operator">&amp;&amp;</span> Notification<span class="token punctuation">.</span>permission <span class="token operator">===</span> <span class="token string">'granted'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Notification<span class="token punctuation">.</span>requestPermission<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Notification<span class="token punctuation">.</span><span class="token function">requestPermission</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Notification<span class="token punctuation">.</span>permission <span class="token operator">!==</span> status<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Notification<span class="token punctuation">.</span>permission <span class="token operator">=</span> status<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">'granted'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> notification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notification</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> notification<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'user denied'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"doesn't support Notification API"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 返回 `thenable`</span><span class="token keyword">function</span> <span class="token function">notifyMessageAsThenable</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">then</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">notifyMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行示例</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">notifyMessageAsThenable</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">notification</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通知对象</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Thenable 风格表现为位于回调和 Promise 风格中间的一种状态，不用考虑 Promise 的兼容问题。一般不作为类库的公开 API，更多情况下是在内部使用 Thenable。Thenable 对象更多的是用来在 Promise 类库之间进行相互转换。</p><p>使用 thenable 将 promise 对象转换为 Q promise 对象：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token constant">Q</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'Q'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这是一个ES6的promise对象</span><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 变换为Q promise对象</span><span class="token constant">Q</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Q promise对象可以使用finally方法</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Deferred-和-Promise"><a href="#Deferred-和-Promise" class="headerlink" title="Deferred 和 Promise"></a>Deferred 和 Promise</h2><p>Deferred 和 Promise 不同，它没有共通的规范，每个 Library 都是根据自己的喜好来实现的。</p><p>在这里，我们打算以 jQuery.Deferred 类似的实现为中心进行介绍。</p><p>简单来说，Deferred 和 Promise 具有如下的关系。</p><ul><li>Deferred 拥有 Promis(当然也有的 Deferred 实现并没有内涵 Promise)</li><li>Deferred 具备对 Promise 的状态进行操作的特权方法</li></ul><p>用 Deferred 实现的 getURL（Deferred 基于 promise 实现）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Deferred</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_resolve <span class="token operator">=</span> resolve<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_reject <span class="token operator">=</span> reject<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Deferred</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_resolve</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>promise<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Deferred</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_reject</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>promise<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">URL</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> deferred <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Deferred</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  req<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      deferred<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      deferred<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  req<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    deferred<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> deferred<span class="token punctuation">.</span>promise<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行示例</span><span class="token keyword">var</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">;</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>console<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Promise 实现的 getURL：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">URL</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行示例</span><span class="token keyword">var</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">;</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>console<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比上述两个版本的 getURL ，我们发现它们有如下不同。</p><ul><li>Deferred 的话不需要将代码用 Promise 括起来，由于没有被嵌套在函数中，可以减少一层缩进。</li><li>反过来没有 Promise 里的错误处理逻辑。</li></ul><p>在以下方面，它们则完成了同样的工作。</p><ul><li>整体处理流程，调用 resolve、reject 的时机。</li><li>函数都返回了 promise 对象。</li></ul><p>由于 Deferred 包含了 Promise，所以大体的流程还是差不多的，不过 Deferred 有对 Promise 进行操作的特权方法，以及可以对流程控制进行自由定制。</p><p>上面我们只是简单的实现了一个 Deferred ，我想你已经看到了它和 Promise 之间的差异了吧。</p><p>如果说 Promise 是用来对值进行抽象的话，Deferred 则是对处理还没有结束的状态或操作进行抽象化的对象，我们也可以从这一层的区别来理解一下这两者之间的差异。</p><p>换句话说，Promise 代表了一个对象，这个对象的状态现在还不确定，但是未来一个时间点它的状态要么变为正常值（FulFilled），要么变为异常值（Rejected）；而 Deferred 对象表示了一个处理还没有结束的这种事实，在它的处理结束的时候，可以通过 Promise 来取得处理结果。</p><h2 id="使用-Promise-race-和-delay-取消-XHR-请求"><a href="#使用-Promise-race-和-delay-取消-XHR-请求" class="headerlink" title="使用 Promise.race 和 delay 取消 XHR 请求"></a>使用 Promise.race 和 delay 取消 XHR 请求</h2><p>XHR 有一个 timeout 属性，使用该属性也可以简单实现超时功能，但是为了能支持多个 XHR 同时超时或者其他功能，我们采用了容易理解的异步方式在 XHR 中通过超时来实现取消正在进行中的操作。</p><p>1）让 Promise 等待指定时间</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">delayPromise</span><span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">delayPromise</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'已经过了100ms！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用 promise.race()来实现超时 promise：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">timeoutPromise</span><span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> ms</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> timeout <span class="token operator">=</span> <span class="token function">delayPromise</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Operation timed out after '</span> <span class="token operator">+</span> ms <span class="token operator">+</span> <span class="token string">' ms'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promise<span class="token punctuation">,</span> timeout<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码 promise 的状态改变的时间超过了 ms 就会 throw Error。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 运行示例</span><span class="token keyword">var</span> taskPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 随便一些什么处理</span>  <span class="token keyword">var</span> delay <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2000</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span>delay <span class="token operator">+</span> <span class="token string">'ms'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">timeoutPromise</span><span class="token punctuation">(</span>taskPromise<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'taskPromise在规定时间内结束 : '</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'发生超时'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）定制 Error 对象</p><p>为了能区分这个 Error 对象的类型，我们再来定义一个 Error 对象的子类 TimeoutError。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">copyOwnFrom</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">propName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>      target<span class="token punctuation">,</span>      propName<span class="token punctuation">,</span>      Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> propName<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">TimeoutError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> superInstance <span class="token operator">=</span> <span class="token function">Error</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">copyOwnFrom</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> superInstance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">TimeoutError</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Error</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TimeoutError</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> TimeoutError<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的使用方法和普通的 Error 对象一样，使用 throw 语句即可</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TimeoutError</span><span class="token punctuation">(</span><span class="token string">'timeout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">TimeoutError</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了这个 TimeoutError 对象，我们就能很容易区分捕获的到底是因为超时而导致的错误，还是其他原因导致的 Error 对象了。</p><p>4）通过超时取消 XHR 操作</p><p>取消 XHR 操作本身的话并不难，只需要调用 XMLHttpRequest 对象的 abort()方法就可以了。</p><p>为了能在外部调用 abort()方法，我们先对之前本节出现的 getURL 进行简单的扩展，cancelableXHR 方法除了返回一个包装了 XHR 的 promise 对象之外，还返回了一个用于取消该 XHR 请求的 abort 方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">copyOwnFrom</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">propName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>      target<span class="token punctuation">,</span>      propName<span class="token punctuation">,</span>      Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> propName<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">TimeoutError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> superInstance <span class="token operator">=</span> <span class="token function">Error</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">copyOwnFrom</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> superInstance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">TimeoutError</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Error</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">TimeoutError</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> TimeoutError<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">delayPromise</span><span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">timeoutPromise</span><span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> ms</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> timeout <span class="token operator">=</span> <span class="token function">delayPromise</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">TimeoutError</span><span class="token punctuation">(</span><span class="token string">'Operation timed out after '</span> <span class="token operator">+</span> ms <span class="token operator">+</span> <span class="token string">' ms'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>promise<span class="token punctuation">,</span> timeout<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">cancelableXHR</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">URL</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function-variable function">onabort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'abort this request'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token function-variable function">abort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果request还没有结束的话就执行abort</span>    <span class="token comment">// https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> XMLHttpRequest<span class="token punctuation">.</span><span class="token constant">UNSENT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      req<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    promise<span class="token operator">:</span> promise<span class="token punctuation">,</span>    abort<span class="token operator">:</span> abort<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token function">cancelableXHR</span><span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// main</span><span class="token function">timeoutPromise</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span>promise<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">contents</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Contents'</span><span class="token punctuation">,</span> contents<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">TimeoutError</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      object<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'XHR Error :'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）代码分割优化处理</p><p>在前面的 cancelableXHR 中，promise 对象及其操作方法都是在一个对象中返回的，看起来稍微有些不太好理解。</p><p>从代码组织的角度来说一个函数只返回一个值（promise 对象）是一个非常好的习惯，但是由于在外面不能访问 cancelableXHR 方法中创建的 req 变量，所以我们需要编写一个专门的函数（上面的例子中的 abort）来对这些内部对象进行处理。</p><p>当然也可以考虑到对返回的 promise 对象进行扩展，使其支持 abort 方法，但是由于 promise 对象是对值进行抽象化的对象，如果不加限制的增加操作用的方法的话，会使整体变得非常复杂。</p><p>大家都知道一个函数做太多的工作都不认为是一个好的习惯，因此我们不会让一个函数完成所有功能，也许像下面这样对函数进行分割是一个不错的选择。</p><ul><li>返回包含 XHR 的 promise 对象</li><li>接收 promise 对象作为参数并取消该对象中的 XHR 请求</li></ul><p>将这些处理整理为一个模块的话，以后扩展起来也方便，一个函数所做的工作也会比较精炼，代码也会更容易阅读和维护。</p><p>使用 common.js 规范来写 cancelableXHR.js：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> requestMap <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">createXHRPromise</span><span class="token punctuation">(</span><span class="token parameter"><span class="token constant">URL</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    req<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token constant">URL</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>readyState <span class="token operator">===</span> XMLHttpRequest<span class="token punctuation">.</span><span class="token constant">DONE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">delete</span> requestMap<span class="token punctuation">[</span><span class="token constant">URL</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function-variable function">onabort</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'abort this req'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  requestMap<span class="token punctuation">[</span><span class="token constant">URL</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    promise<span class="token operator">:</span> promise<span class="token punctuation">,</span>    request<span class="token operator">:</span> req<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">abortPromise</span><span class="token punctuation">(</span><span class="token parameter">promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> promise <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> request<span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>requestMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">URL</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requestMap<span class="token punctuation">[</span><span class="token constant">URL</span><span class="token punctuation">]</span><span class="token punctuation">.</span>promise <span class="token operator">===</span> promise<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      request <span class="token operator">=</span> requestMap<span class="token punctuation">[</span><span class="token constant">URL</span><span class="token punctuation">]</span><span class="token punctuation">.</span>request<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> XMLHttpRequest<span class="token punctuation">.</span><span class="token constant">UNSENT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    request<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>createXHRPromise <span class="token operator">=</span> createXHRPromise<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>abortPromise <span class="token operator">=</span> abortPromise<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> cancelableXHR <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./cancelableXHR'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> xhrPromise <span class="token operator">=</span> cancelableXHR<span class="token punctuation">.</span><span class="token function">createXHRPromise</span><span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建包装了XHR的promise对象</span>xhrPromise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 调用 abort 抛出的错误</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cancelableXHR<span class="token punctuation">.</span><span class="token function">abortPromise</span><span class="token punctuation">(</span>xhrPromise<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取消在创建的promise对象的请求操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="promise-串行处理"><a href="#promise-串行处理" class="headerlink" title="promise 串行处理"></a>promise 串行处理</h2><p>Promise.all()可以进行 promise 对象的并行处理，那么怎么实现串行处理呢？</p><p>我们将处理内容统一放到数组里，再配合 for 循环进行处理：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">comment</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">getComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token string">'http://azu.github.io/promises-book/json/comment.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>      <span class="token constant">JSON</span><span class="token punctuation">.</span>parse    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">people</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">getPeople</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token string">'http://azu.github.io/promises-book/json/people.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>      <span class="token constant">JSON</span><span class="token punctuation">.</span>parse    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">recordValue</span><span class="token punctuation">(</span><span class="token parameter">results<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> results<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// [] 用来保存初始化值</span>  <span class="token keyword">var</span> pushValue <span class="token operator">=</span> <span class="token function">recordValue</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回promise对象的函数的数组</span>  <span class="token keyword">var</span> tasks <span class="token operator">=</span> <span class="token punctuation">[</span>request<span class="token punctuation">.</span>comment<span class="token punctuation">,</span> request<span class="token punctuation">.</span>people<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 开始的地方</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tasks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> task <span class="token operator">=</span> tasks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>pushValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行示例</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中的 promise = promise.then(task).then(pushValue)通过不断对 promise 进行处理，不断的覆盖 promise 变量的值，以达到对 promise 对象的累积处理效果。</p><p>但是这种方法需要 promise 这个临时变量，从代码质量上来说显得不那么简洁。我们可以使用 Array.prototype.reduce 来优化 main 函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">recordValue</span><span class="token punctuation">(</span><span class="token parameter">results<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> results<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> pushValue <span class="token operator">=</span> <span class="token function">recordValue</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> tasks <span class="token operator">=</span> <span class="token punctuation">[</span>request<span class="token punctuation">.</span>comment<span class="token punctuation">,</span> request<span class="token punctuation">.</span>people<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> tasks<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> task</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>pushValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实际上我们可以提炼出进行顺序处理的函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sequenceTasks</span><span class="token punctuation">(</span><span class="token parameter">tasks</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">recordValue</span><span class="token punctuation">(</span><span class="token parameter">results<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> results<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> pushValue <span class="token operator">=</span> <span class="token function">recordValue</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> tasks<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promise<span class="token punctuation">,</span> task</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>pushValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们只要如下调用，代码也更加清晰易懂了：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">comment</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">getComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token string">'http://azu.github.io/promises-book/json/comment.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>      <span class="token constant">JSON</span><span class="token punctuation">.</span>parse    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">people</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">getPeople</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token string">'http://azu.github.io/promises-book/json/people.json'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>      <span class="token constant">JSON</span><span class="token punctuation">.</span>parse    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">sequenceTasks</span><span class="token punctuation">(</span><span class="token punctuation">[</span>request<span class="token punctuation">.</span>comment<span class="token punctuation">,</span> request<span class="token punctuation">.</span>people<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 运行示例</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="同时请求按序处理"><a href="#同时请求按序处理" class="headerlink" title="同时请求按序处理"></a>同时请求按序处理</h2><p>下面的内容来自 google 开发社区的一篇关于 promise 的文章<a href="https://developers.google.com/web/fundamentals/getting-started/primers/promises#_9">JavaScript Promise：简介</a></p><p>假设我们要根据 story.json 通过 ajax 获取章节内容，每一次 ajax 只能获取一节内容。那么怎么做到又快又能按序展示章节内容呢？即如果第一章下载完后，我们可将其添加到页面。这可让用户在其他章节下载完毕前先开始阅读。如果第三章比第二章先下载完后，我们不将其添加到页面，因为还缺少第二章。第二章下载完后，我们可添加第二章和第三章，后面章节也是如此添加。</p><p>前一节的串行方法只能一个 ajax 请求 task 处理完后再去执行下一个 task，而 Promise.all()能同时请求，但是只有全部请求结束后才能得到有序的数组。</p><p>具体实现请看下面实例。</p><p>我们可以使用 JSON 来同时获取所有章节，然后创建一个向文档中添加章节的顺序。</p><p>story.json 如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"heading"</span><span class="token operator">:</span> <span class="token string">"&lt;h1>A story about something&lt;/h1>"</span><span class="token punctuation">,</span>  <span class="token property">"chapterUrls"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"chapter-1.json"</span><span class="token punctuation">,</span>    <span class="token string">"chapter-2.json"</span><span class="token punctuation">,</span>    <span class="token string">"chapter-3.json"</span><span class="token punctuation">,</span>    <span class="token string">"chapter-4.json"</span><span class="token punctuation">,</span>    <span class="token string">"chapter-5.json"</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体处理代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getJson</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span>parse<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">'story.json'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">story</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addHtmlToPage</span><span class="token punctuation">(</span>story<span class="token punctuation">.</span>heading<span class="token punctuation">)</span> <span class="token comment">// 文章头部添加到页面</span>        <span class="token comment">// 将拿到的chapterUrls数组map为json promises数组，这样可以保证并行下载</span>        <span class="token keyword">return</span> story<span class="token punctuation">.</span>chapterUrls            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>getJSON<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">sequence<span class="token punctuation">,</span> chapterPromise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 用reduce方法链式调用promises，并将每个章节的内容到添加页面</span>                <span class="token keyword">return</span> sequence<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 等待获取当前准备插入页面的顺序的资源，然后等待这个顺序对应章节的成功请求</span>                    <span class="token comment">// Wait for everything in the sequence so far, then wait for this chapter to arrive.</span>                    <span class="token keyword">return</span> chapterPromise                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">chapter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">addHtmlToPage</span><span class="token punctuation">(</span>chapter<span class="token punctuation">.</span>html<span class="token punctuation">)</span> <span class="token comment">// 将章节内容到添加页面</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addTextToPage</span><span class="token punctuation">(</span><span class="token string">'All done'</span><span class="token punctuation">)</span> <span class="token comment">// 页面添加All done文字</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// catch错误信息</span>        <span class="token function">addTextToPage</span><span class="token punctuation">(</span><span class="token string">'Argh, broken: '</span>' <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.spinner'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span> <span class="token comment">// 关闭加载提示</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Promise-和链式调用"><a href="#Promise-和链式调用" class="headerlink" title="Promise 和链式调用"></a>Promise 和链式调用</h2><p>在 Promise 中你可以将 then 和 catch 等方法连在一起写。这非常像 DOM 或者 jQuery 中的链式调用。</p><p>一般的方法链都通过返回 this 将多个方法串联起来。</p><p>那么怎么在不改变已有采用了方法链编写的代码的外部接口的前提下，如何在内部使用 Promise 进行重写呢？</p><p>1）fs 中的方法链</p><p>以 Node.js 中的 fs 为例。</p><p>此外，这里的例子我们更重视代码的易理解性，因此从实际上来说这个例子可能并不算太实用。</p><p>有 fs-method-chain.js：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Static method for File.prototype.read</span>File<span class="token punctuation">.</span><span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">FileRead</span><span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastValue <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">transform</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastValue <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">write</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastValue <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> File<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> File <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./fs-method-chain'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> inputFilePath <span class="token operator">=</span> <span class="token string">'input.txt'</span><span class="token punctuation">,</span>  outputFilePath <span class="token operator">=</span> <span class="token string">'output.txt'</span><span class="token punctuation">;</span>File<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>inputFilePath<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">'>>'</span> <span class="token operator">+</span> content<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>outputFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）基于 Promise 的 fs 方法链</p><p>下面我们就在不改变刚才的方法链对外接口的前提下，采用 Promise 对内部实现进行重写。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Static method for File.prototype.read</span>File<span class="token punctuation">.</span><span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> file<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span><span class="token string">'catch'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">transform</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">File</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">write</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> File<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）两者的区别</p><p>要说 fs-method-chain.js 和 Promise 版两者之间的差别，最大的不同那就要算是同步和异步了。</p><p>如果在类似 fs-method-chain.js 的方法链中加入队列等处理的话，就可以实现几乎和异步方法链同样的功能，但是实现将会变得非常复杂，所以我们选择了简单的同步方法链。</p><p>Promise 版的话如同之前章节所说只会进行异步操作，因此使用了 promise 的方法链也是异步的。</p><p>另外两者的错误处理方式也是不一致的。</p><p>虽然 fs-method-chain.js 里面并不包含错误处理的逻辑，但是由于是同步操作，因此可以将整段代码用 try-catch 包起来。</p><p>在 Promise 版提供了指向内部 promise 对象的 then 和 catch 别名，所以我们可以像其它 promise 对象一样使用 catch 来进行错误处理。</p><p>如果你想在 fs-method-chain.js 中自己实现异步处理的话，错误处理可能会成为比较大的问题；可以说在进行异步处理的时候，还是使用 Promise 实现起来比较简单。</p><p>4）Promise 之外的异步处理</p><p>如果你很熟悉 Node.js 的話，那么看到方法链的话，你是不是会想起来 Stream 呢。</p><p>如果使用 Stream 的话，就可以免去了保存 this.lastValue 的麻烦，还能改善处理大文件时候的性能。 另外，使用 Stream 的话可能会比使用 Promise 在处理速度上会快些。</p><p>因此，在异步处理的时候并不是说 Promise 永远都是最好的选择，要根据自己的目的和实际情况选择合适的实现方式。</p><p>5）Promise wrapper</p><p>再回到 fs-method-chain.js 和 Promise 版，这两种方法相比较内部实现也非常相近，让人觉得是不是同步版本的代码可以直接就当做异步方式来使用呢？</p><p>由于 JavaScript 可以向对象动态添加方法，所以从理论上来说应该可以从非 Promise 版自动生成 Promise 版的代码。（当然静态定义的实现方式容易处理）</p><p>尽管 ES6 Promises 并没有提供此功能，但是著名的第三方 Promise 实现类库 bluebird 等提供了被称为 Promisification 的功能。</p><p>如果使用类似这样的类库，那么就可以动态给对象增加 promise 版的方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">promisifyAll</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFileAsync</span><span class="token punctuation">(</span><span class="token string">'myfile.js'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">contents</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面的 Promisification 具体都干了些什么光凭想象恐怕不太容易理解，我们可以通过给原生 Array 增加 Promise 版的方法为例来进行说明。</p><p>在 JavaScript 中原生 DOM 或 String 等也提供了很多创建方法链的功能。Array 中就有诸如 map 和 filter 等方法，这些方法会返回一个数组类型，可以用这些方法方便的组建方法链。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ArrayAsPromise</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>array <span class="token operator">=</span> array<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">ArrayAsPromise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">ArrayAsPromise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span><span class="token string">'catch'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">methodName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Don't overwrite</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ArrayAsPromise<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> arrayMethod <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arrayMethod <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">ArrayAsPromise</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>promise <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      that<span class="token punctuation">.</span>array <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>methodName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>array<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> that<span class="token punctuation">.</span>array<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> ArrayAsPromise<span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">array</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">newArrayAsPromise</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayAsPromise</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原生的 Array 和 ArrayAsPromise 在使用时有什么差异呢？我们可以通过对上面的代码进行测试来了解它们之间的不同点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> assert <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'power-assert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ArrayAsPromise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../src/promise-chain/array-promise-chain'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'array-promise-chain'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">isEven</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'Native array'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'can method chain'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>double<span class="token punctuation">)</span><span class="token punctuation">;</span>      assert<span class="token punctuation">.</span><span class="token function">deepEqual</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">'ArrayAsPromise'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">it</span><span class="token punctuation">(</span><span class="token string">'can promise chain'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">done</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayAsPromise</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>      array        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>double<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          assert<span class="token punctuation">.</span><span class="token function">deepEqual</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>done<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到，在 ArrayAsPromise 中也能使用 Array 的方法。原生的 Array 是同步处理，而 ArrayAsPromise 则是异步处理。</p><p>仔细看一下 ArrayAsPromise 的实现，也许你已经注意到了，Array.prototype 的所有方法都被实现了。但是，Array.prototype 中也存在着类似 array.indexOf 等并不会返回数组类型数据的方法，这些方法如果也要支持链式调用的话就有些不自然了。</p><p>在这里非常重要的一点是，我们可以通过这种方式，为具有接收相同类型数据接口的 API 动态的创建 Promise 版的 API。如果我们能意识到这种 API 的规则性的话，那么就可能发现一些新的使用方法。</p><h2 id="自己实现一个-Promise-类"><a href="#自己实现一个-Promise-类" class="headerlink" title="自己实现一个 Promise 类"></a>自己实现一个 Promise 类</h2><p><a href="https://github.com/xieranmaya/blog/issues/3">剖析 Promise 内部结构，一步一步实现一个完整的、能通过所有 Test case 的 Promise 类</a></p><h2 id="Promise-反面模式（anti-pattern）"><a href="#Promise-反面模式（anti-pattern）" class="headerlink" title="Promise 反面模式（anti-pattern）"></a>Promise 反面模式（anti-pattern）</h2><p>关于<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E9%9D%A2%E6%A8%A1%E5%BC%8F">反面模式</a>，维基百科是这样定义的：在软件工程中，一个反面模式（anti-pattern 或 antipattern）指的是在实践中明显出现但又低效或是有待优化的设计模式，是用来解决问题的带有共同性的不良方法。</p><p>Promise 中常见的反面模式有嵌套的 promise、没有正确 error handle 等。</p><p><a href="http://taoofcode.net/promise-anti-patterns/">Promise 反面模式原文</a></p><p><a href="https://segmentfault.com/a/1190000007395254">Promise 反面模式中文翻译</a></p><h2 id="Promise-常见错误"><a href="#Promise-常见错误" class="headerlink" title="Promise 常见错误"></a>Promise 常见错误</h2><p><a href="https://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html">We have a problem with promises 原文</a></p><p><a href="https://div.io/topic/1095">We have a problem with promises 中文翻译</a></p><h2 id="其他强大的异步处理方式"><a href="#其他强大的异步处理方式" class="headerlink" title="其他强大的异步处理方式"></a>其他强大的异步处理方式</h2><p>1）使用 async/await</p><p>async/await 更加强大，能写出更像同步的代码。但是基础仍然是要掌握 Promise。</p><p>2）使用 Rxjs（Angular2 后框架自带）。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://liubin.org/promises-book/#introduction">JavaScript Promise 迷你书（中文版）</a></p><p><a href="http://es6.ruanyifeng.com/#docs/promise">阮一峰 ECMAScript6 入门 Promise 对象</a></p><p><a href="https://developers.google.com/web/fundamentals/getting-started/primers/promises#_9">JavaScript Promise：简介</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git入门大全</title>
      <link href="/posts/3115.html"/>
      <url>/posts/3115.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前写个一个 git 小结，但是实际上并不够用。于是结合实际工作上碰到的一些情况，参考了一些资料，重新总结了一下。目标是在日常工作中不用再去查阅其他的资料了，如果有什么遗漏或者错误的地方，请评论指出！</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Workspace：工作区</p><p>Index / Stage：暂存区</p><p>Repository：仓库区（或本地仓库）</p><p>Remote：远程仓库</p><h2 id="文件几种状态"><a href="#文件几种状态" class="headerlink" title="文件几种状态"></a>文件几种状态</h2><ul><li>untracked：git 未跟踪的文件，新增的文件未 git add 就会处于这种状态</li><li>not staged：被索引过又被修改了的文件</li><li>staged：通过 git add 后即将被提交的文件</li></ul><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在当前目录</span><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示当前的Git配置</span><span class="token function">git</span> config –list<span class="token comment"># 编辑Git配置文件</span><span class="token function">git</span> config -e <span class="token punctuation">[</span>–global<span class="token punctuation">]</span><span class="token comment"># 设置提交代码时的用户信息</span><span class="token function">git</span> config <span class="token punctuation">[</span>–global<span class="token punctuation">]</span> user.name <span class="token string">"example"</span><span class="token function">git</span> config <span class="token punctuation">[</span>–global<span class="token punctuation">]</span> user.email <span class="token string">"example@gmail.com"</span><span class="token comment"># 配置自动换行，提交到git时自动将换行符转换为lf</span><span class="token function">git</span> config --global core.autocrlf input<span class="token comment"># 配置密钥</span>ssh-keygen -t rsa -C example@gmail.com <span class="token comment"># 生成密钥</span><span class="token function">ssh</span> -T git@github.com <span class="token comment"># 测试是否成功</span><span class="token comment"># 配置别名，--global 表示全局配置</span><span class="token function">git</span> config --global alias.st status<span class="token function">git</span> config --global alias.co checkout<span class="token function">git</span> config --global alias.br branch<span class="token function">git</span> config --global alias.ci commit<span class="token function">git</span> config --global alias.lg <span class="token string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset' --abbrev-commit"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="检出仓库"><a href="#检出仓库" class="headerlink" title="检出仓库"></a>检出仓库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个本地仓库的克隆版本：</span><span class="token function">git</span> clone /path/to/repository<span class="token comment"># 如果是远端服务器上的仓库：</span><span class="token function">git</span> clone username@host:/path/to/repository<span class="token comment"># 克隆到自定义文件夹：</span><span class="token function">git</span> clone username@host:/path/to/repository my-cloned-repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="新建仓库常见流程"><a href="#新建仓库常见流程" class="headerlink" title="新建仓库常见流程"></a>新建仓库常见流程</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 初始化</span><span class="token function">git</span> init<span class="token comment"># 获取状态</span><span class="token function">git</span> status<span class="token function">git</span> <span class="token function">add</span> README.md<span class="token function">git</span> commit -m <span class="token string">"message"</span><span class="token comment"># 连接远程仓库</span><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:example/test.git<span class="token comment"># 推送内容到远程仓库的同时设置默认跟踪分支</span><span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gitignore"><a href="#gitignore" class="headerlink" title="gitignore"></a>gitignore</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> .gitignore<span class="token operator">!</span>为模式取反*.a<span class="token operator">!</span>lib.a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加、删除"><a href="#添加、删除" class="headerlink" title="添加、删除"></a>添加、删除</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加指定文件到暂存区</span><span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment"># 添加指定目录到暂存区，包括子目录</span><span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token comment"># 添加当前目录的所有文件到暂存区，.或*代表全部添加</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 添加每个变化前，都会要求确认</span><span class="token comment"># 对于同一个文件的多处变化，可以实现分次提交</span><span class="token function">git</span> <span class="token function">add</span> -p<span class="token comment"># 删除工作区文件，并且将这次删除放入暂存区</span><span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment"># 停止追踪指定文件，但该文件会保留在工作区</span><span class="token function">git</span> <span class="token function">rm</span> --cached <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 文件重命名，并加入暂存区</span><span class="token function">git</span> <span class="token function">mv</span> <span class="token punctuation">[</span>file-original<span class="token punctuation">]</span> <span class="token punctuation">[</span>file-renamed<span class="token punctuation">]</span><span class="token comment"># 通配符批量移动</span><span class="token function">git</span> <span class="token function">mv</span> *.html src/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">"message"</span><span class="token comment"># 补提交文件，提交时漏掉了某些文件时不应该再单独提交一次</span><span class="token function">git</span> commit --amend<span class="token comment"># 覆盖提交日期，不知道有啥实际用途</span><span class="token function">git</span> commit -m <span class="token string">"message"</span> --date <span class="token string">"2017-01-01 00:00:00"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有本地分支</span><span class="token function">git</span> branch<span class="token comment"># 新建一个分支，但依然停留在当前分支</span><span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，并切换到该分支</span><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 切换到指定分支，并更新工作区</span><span class="token function">git</span> checkout <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 切换到上一个分支</span><span class="token function">git</span> checkout -<span class="token comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span><span class="token function">git</span> branch --set-upstream <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment"># 根据一个特定的提交创建新分支，忘记开新的分支就修改并提交了代码时的处理</span><span class="token function">git</span> branch test-branch HEAD~1<span class="token comment"># 删除分支</span><span class="token function">git</span> branch -d <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 重命名分支</span><span class="token function">git</span> branch -m oldBranch newBranch<span class="token comment"># 推送分支到远程仓库</span><span class="token function">git</span> push origin <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 删除远程分支</span>$ <span class="token function">git</span> push origin --delete <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>$ <span class="token function">git</span> branch -dr <span class="token punctuation">[</span>remote/branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有tag</span><span class="token function">git</span> tag<span class="token comment"># 显示 tag list 和注解</span><span class="token function">git</span> tag -n<span class="token comment"># 在当前commit新建一个轻标签</span><span class="token function">git</span> tag <span class="token punctuation">[</span>tagname<span class="token punctuation">]</span><span class="token comment"># 在指定commit新建一个tag</span><span class="token function">git</span> tag <span class="token punctuation">[</span>tagname<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 添加注解标签</span><span class="token function">git</span> tag -a <span class="token punctuation">[</span>tagname<span class="token punctuation">]</span><span class="token comment"># 添加注解标签并添加注解</span><span class="token function">git</span> tag -am <span class="token string">"message"</span> <span class="token punctuation">[</span>tagname<span class="token punctuation">]</span><span class="token comment"># 删除本地tag</span><span class="token function">git</span> tag -d <span class="token punctuation">[</span>tagname<span class="token punctuation">]</span><span class="token comment"># 删除远程tag</span><span class="token function">git</span> push origin :refs/tags/<span class="token punctuation">[</span>tagName<span class="token punctuation">]</span><span class="token comment"># 推送所有tag</span><span class="token function">git</span> push --tags<span class="token comment"># 新建一个分支，指向某个tag</span><span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>tagname<span class="token punctuation">]</span><span class="token comment"># 切换到tag</span><span class="token function">git</span> checkout <span class="token punctuation">[</span>tagname<span class="token punctuation">]</span><span class="token comment"># tag和分支同名时，显示指定切换到tag</span><span class="token function">git</span> checkout tags/<span class="token punctuation">[</span>tagname<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="远程仓库和合并分支"><a href="#远程仓库和合并分支" class="headerlink" title="远程仓库和合并分支"></a>远程仓库和合并分支</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote<span class="token comment"># 查看远程仓库的 URL</span><span class="token function">git</span> remote -v<span class="token comment"># 添加远程仓库</span><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:example/test.git<span class="token comment"># 删除远程仓库</span><span class="token function">git</span> remote <span class="token function">rm</span> origin<span class="token comment"># 修改远程仓库地址</span><span class="token function">git</span> remote set-url origin <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token comment"># 将本地的远端和远端进行同步</span><span class="token function">git</span> fetch origin<span class="token comment"># 将本地的远端合并到本地分支</span><span class="token function">git</span> merge origin/master<span class="token comment"># 拉取远程仓库，这相当于上面两条命令</span><span class="token function">git</span> pull origin master<span class="token comment"># 使用rebase可以使提交的历史记录显得更简洁</span><span class="token function">git</span> rebase mater<span class="token comment"># 也可以指定分支：</span><span class="token function">git</span> pull origin remote:local<span class="token comment"># 推送：</span><span class="token function">git</span> push origin local:remote<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="改写提交"><a href="#改写提交" class="headerlink" title="改写提交"></a>改写提交</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 摘出某个提交</span><span class="token function">git</span> cherry-pick <span class="token punctuation">[</span>hash<span class="token punctuation">]</span><span class="token comment"># 交互式提交，当涉及提交修改时使用，如 squash、调整 commit 顺序等</span><span class="token function">git</span> rebase -i<span class="token function">git</span> rebase -i HEAD~4<span class="token comment"># 将 upstream 后的 commit 节点嫁接到 newbase，如果有 branch ，会先 checkout 到这个 branch，再 rebase</span><span class="token function">git</span> rebase --onto <span class="token operator">&lt;</span>newbase<span class="token operator">></span> <span class="token operator">&lt;</span>upstream<span class="token operator">></span> <span class="token operator">&lt;</span>branch<span class="token operator">></span><span class="token comment"># 删除 topicA~3、topicA~4 这两个 commit</span><span class="token function">git</span> rebase --onto topicA~5 topicA~3 topicA<span class="token comment"># 中途要停止rebase操作</span><span class="token function">git</span> rebase --abort<span class="token comment"># 复原到rebase之前的状态</span><span class="token function">git</span> reset --hard ORIG_HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1）squash 合并多个提交：</p><p>在编辑 commit message 时 hash 值前的 p(pick)表示 use commit，s(squash)表示 use commit, but meld into privious commit</p><p>所以我们可以在 push 到远程仓库之前，把多个 commit 合并成一个。</p><p>2）edit 使提交成退出状态</p><p>除了 p、s，常用的还有 e(edit)表示 use commit, but stop for amending。保存退出后，修改过的提交呈现退出状态。用 git commit –amend 保存修改，然后 git rebase –continue 。这时，有可能其他提交会发生冲突, 请修改冲突部分后再执行 git add 和 git rebase –continue 。这时不需要提交。</p><p>3）merge squash：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在 merge 特性分支时，把所有的新提交合并成一个</span><span class="token function">git</span> merge feature-branch --squash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a>暂存</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 暂时将未提交的变化移除，稍后再移入</span><span class="token function">git</span> stash<span class="token comment"># 查看所有被隐藏的文件列表</span><span class="token function">git</span> stash list<span class="token comment"># 恢复暂存的文件，不从list中删除</span><span class="token function">git</span> stash appl<span class="token comment"># 从list中删除</span><span class="token function">git</span> stash drop<span class="token comment"># 恢复暂存的文件，并从list中删除</span><span class="token function">git</span> stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 遗弃提交</span><span class="token function">git</span> reset<span class="token comment"># 把当前的 HEAD 重置到前一个，丢弃最新commit</span><span class="token function">git</span> reset HEAD~1<span class="token comment"># 撤销上一次提交，并且变更还保持在 staging area</span><span class="token function">git</span> reset HEAD~1 --soft--soft 只取消提交,将上一次的修改放入 staging area，不修改索引和工作树--mixed 默认模式，复原修改过的索引的状态，将上一次的修改放入 working directory，修改索引，不修改工作树--hard 彻底取消最近的提交，直接将上一次的修改抛弃，修改索引和工作树三种都会修改HEAD位置<span class="token comment"># 抛弃某一次的修改，使用上次提交的版本</span><span class="token function">git</span> checkout<span class="token comment"># 安全地取消过去发布的提交</span><span class="token function">git</span> revert<span class="token function">git</span> revert HEAD~2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1）git reset 与 checkout 区别:</p><p>git reset 使用仓库中的版本覆盖 staging area 中的，如果 working directory 该文件没有其他修改，则 staging area 中的修改将应用到 working directory 中。反之 working directory 中的版本将被保留，丢弃 staging area 中的修改。</p><p>git checkout 则是使用 staging area 的中的版本覆盖 working directory。</p><p>2）git revert 与 reset 区别：</p><p>与 reset 不同的是，revert 只会撤销当前的 commit，而之后的 commit 操作的修改还会保留，但是 reset 还会将之后的所有 commit 操作的修改全部退回 staging area 或丢弃。</p><p>3）撤消合并:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">假如还没推送到远端，可以reset掉<span class="token function">git</span> reset --hard HEAD~如果已经推动到远端，可以用revert<span class="token function">git</span> revert -m <span class="token number">1</span> HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示暂存区和工作区的差异</span><span class="token function">git</span> <span class="token function">diff</span><span class="token comment"># 显示暂存区和上一个commit的差异</span><span class="token function">git</span> <span class="token function">diff</span> --cached <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示工作区与当前分支最新commit之间的差异</span><span class="token function">git</span> <span class="token function">diff</span> HEAD<span class="token comment"># 显示两次提交之间的差异</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>first-branch<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>second-branch<span class="token punctuation">]</span><span class="token comment"># 显示今天你写了多少行代码</span><span class="token function">git</span> <span class="token function">diff</span> --shortstat <span class="token string">"@&#123;0 day ago&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以图形展示</span><span class="token function">git</span> log –graph<span class="token comment"># 可以显示包含标签资料的历史记录</span><span class="token function">git</span> log --decorate<span class="token comment"># 单行显示过去5次提交</span><span class="token function">git</span> log -5 --pretty --oneline<span class="token comment"># 显示第一个父commit节点，而不显示merge的commit节点，这样会有一个更清晰的视图</span><span class="token function">git</span> log –first-parent<span class="token comment"># 显示全部分支</span><span class="token function">git</span> log –all<span class="token comment"># 更清晰地显示</span><span class="token function">git</span> log --graph --decorate --pretty<span class="token operator">=</span>oneline --abbrev-commit --all<span class="token function">git</span> log --color --graph --pretty<span class="token operator">=</span>format:<span class="token string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an>%Creset'</span> --abbrev-commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看某个文件的修改人</span><span class="token function">git</span> blame<span class="token comment"># 优化git仓库，git repack 将版本库未打包的松散对象打包</span><span class="token function">git</span> repack -d<span class="token comment"># 条件搜索及正则表达式搜索</span><span class="token function">git</span> <span class="token function">grep</span><span class="token function">git</span> <span class="token function">grep</span> <span class="token string">"TODO"</span><span class="token comment"># 二分法查找快速定位到bug位置</span><span class="token function">git</span> bisect<span class="token function">git</span> bisect HEAD origin<span class="token function">git</span> bisect run <span class="token function">make</span> <span class="token builtin class-name">test</span><span class="token function">git</span> bisect reset<span class="token comment"># 可以列出所有的操作记录，通过reflog找到 commit 的hash，然后 cherry-pick 找回</span><span class="token function">git</span> reflog<span class="token comment"># 获取命令的帮助信息</span><span class="token function">git</span> <span class="token builtin class-name">help</span> <span class="token punctuation">[</span>命令<span class="token punctuation">]</span><span class="token function">git</span> <span class="token punctuation">[</span>命令<span class="token punctuation">]</span> --help<span class="token comment"># 获取当前的状态，git会提示接下来的能做的操作</span><span class="token function">git</span> status<span class="token comment"># Git 组织大型项目的一种方式</span><span class="token function">git</span> submodule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-内部"><a href="#git-内部" class="headerlink" title="git 内部"></a>git 内部</h2><p>Git 仓库下有一个.git 目录，一般包括下面的内容：</p><ul><li>config</li><li>index</li><li>HEAD</li><li>hooks/</li><li>info/</li><li>logs/</li><li>objects/</li><li>refs/</li></ul><p>1）config</p><p>仓库的配置文件</p><p>2）index</p><p>索引，index 文件保存暂存区信息</p><p>3）HEAD</p><p>HEAD 文件指示目前被检出的分支</p><p>4）objects</p><p>你提交到一个 Git 代码仓库中的所有文件，包括每个提交的说明信息（the commit info）都在目录 .git/objects/中存储为实体。</p><p>一个实体以一个 40 字符长度的字符串（该实体内容的 SHA1 哈希值）来标识。</p><p>实体有 4 类:</p><ul><li>blob - 存储文件内容</li><li>tree - 存储目录结构和文件名</li><li>commit - 存储提交的说明，组成 Git 的提交图谱</li><li>tag - 存储带注解的标签（tag）</li></ul><p>5）refs</p><p>Git 中，一个分支（branch）、远程分支（remote branch）或一个标签（tag）（也称为轻量标签）仅是指向一个实体的一个指针，这里的实体通常是一个 commit 实体。</p><p>这些引用以文本文件的形式存储在目录.git/refs/中。</p><ul><li>refs/heads/xxx 本地分支</li><li>refs/remotes/origin/xxx 远端分支</li><li>refs/tags/xxx 本地 tag</li></ul><h2 id="git-提交规范"><a href="#git-提交规范" class="headerlink" title="git 提交规范"></a>git 提交规范</h2><pre class="line-numbers language-none"><code class="language-none">feat: 添加了xx功能xx功能描述<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>阮一峰<a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">Commit message 和 Change log 编写指南</a></p><h2 id="三种工作流程"><a href="#三种工作流程" class="headerlink" title="三种工作流程"></a>三种工作流程</h2><p>1）Git flow：项目存在两个长期分支，主分支 master 和开发分支 develop。这个模式是基于”版本发布”的，而补是”持续发布”</p><p>2）Github flow：只有一个长期分支，就是 master，”持续发布”</p><p>3）Gitlab flow：Gitlab flow 的最大原则叫做”上游优先”（upsteam first），即只存在一个主分支 master，它是所有其他分支的”上游”。只有上游分支采纳的代码变化，才能应用到其他分支。</p><p>阮一峰<a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html">Git 工作流程</a></p><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><h3 id="常用命令行"><a href="#常用命令行" class="headerlink" title="常用命令行"></a>常用命令行</h3><pre class="line-numbers language-none"><code class="language-none">pwd        显示当前工作目录          process working directorycd         切换目录                 change directorymkdir      创建目录                 make directorymkdir -p   递归创建多个目录          --parents no error if existing, make parent directories as neededls         列出目录内容             listls -a      可以显示.开头的文件       allls -l      列出文件的详细信息        long listing formattouch      创建文件rm&#x2F;rmdir   删除文件&#x2F;目录             removerm -r      删除目录                  --recursivelymv         文件或目录的移动或更名     movecp         将文件拷贝至另一文件       copyecho       输出到文件                  like echo 1 &gt; test.txtcat        显示文件内容和合并多个文件   like cat test.txt,also like cat file1 file2 &gt; fileless       按页显示文件clear      清屏（ctrl + l）history    查看最近用过的命令du         统计目录／文件所占磁盘空间的大小    disk usagedu -sh     以易读的方式显示总共大小           --summarize --human-readableps         报告程序状况                      process statushead       显示开头某个数量的文字区块         like head -n 3 test.txttail       显示结尾某个数量的文字区块ping       网络管理常用的3个命令ipconfignetstatxxx -h     至少可以通过以下三种中的一种获取命令的帮助信息xxx --helpman    xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><pre class="line-numbers language-none"><code class="language-none">Ctrl + A ：光标移动到行首Ctrl + E ：光标移动到行尾Ctrl + U ：删除光标所在位置之前的所有字符（不含当前位置字符）Ctrl + K ：删除光标所在位置之后的所有字符（含当前位置字符）Ctrl + W ：删除光标所在位置之前的一个单词Ctrl + R ：根据输入搜索以往使用过的命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><pre class="line-numbers language-none"><code class="language-none">Alt + .     使用上一次命令的最后一个参数!!          上一次命令↑        显示上一次命令.           当前目录..          上一层目录~           根目录-           上一次目录|           管道(pipe)，前一个命令的输出为后一个命令的输入，like cat test.txt | less<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多个命令之间可以用;或&amp;&amp;分隔，前者命令错误不中断</p><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p><a href="http://coolshell.cn/articles/5426.html">简明 VIM 练级攻略</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.ruanyifeng.com/blog/search.html?cx=016304377626642577906:b_e9skaywzq&cof=FORID:11&ie=UTF-8&q=git&sa.x=0&sa.y=0">阮一峰 Git</a></p><p><a href="http://backlogtool.com/git-guide/cn/">猴子都能懂的 Git</a></p><p><a href="https://git-scm.com/book/zh/v2">Pro Git 中文</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuejs技术栈知识点小结</title>
      <link href="/posts/1181.html"/>
      <url>/posts/1181.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上家公司的项目主要是使用 jQuery 和 Angular1，然后自己学了 React，没想到来到这家公司突然开始做 vue，不过 vue 还是挺容易上手的。下面是 vue 技术栈的一些总结，都是来自官网，主要是自己对 vue 技术栈知识点的一些整理，因此此文很水，建议阅读我的上一篇文章<a href="http://www.cnblogs.com/ang-/p/7082202.html">Vuejs 技术栈从 CLI 到打包上线实战全解析</a></p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="独立构建和运行时构建"><a href="#独立构建和运行时构建" class="headerlink" title="独立构建和运行时构建"></a>独立构建和运行时构建</h3><p>有两种构建方式，独立构建和运行构建。它们的区别在于前者包含模板编译器而后者不包含。</p><p>模板编译器的职责是将模板字符串编译为纯 JavaScript 的渲染函数。如果你想要在组件中使用 template 选项，你就需要编译器。</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>具体查看官网的流程图，要注意的是 created 和 mounted 区别，created 是 vm 实例已创建但未挂载，因此一些 DOM 操作应该放在 mounted 中。异步请求放在 created 或者 mounted 暂时没发现什么区别，如您知道有什么区别，请评论指出。</p><h3 id="计算-computed-属性"><a href="#计算-computed-属性" class="headerlink" title="计算(computed)属性"></a>计算(computed)属性</h3><p>模板内的表达式不应该包含太多的逻辑，对于任何复杂逻辑，都应当使用计算属性</p><p>computed 属性和 methods 不同的是计算属性是基于它们的依赖进行缓存的。</p><p>computed 属性和 computed 属性，通常更好的想法是使用 computed 属性而不是命令式的 watch 回调。虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的 watcher。当你想要在数据变化响应时，执行异步操作或开销较大的操作，这是很有用的。</p><h3 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h3><p>数组的变异方法(mutation method，会改变被这些方法调用的原始数组)会触发视图更新，有以下七个：</p><pre class="line-numbers language-none"><code class="language-none">push()pop()shift()unshift()splice()sort()reverse()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当使用非变异方法时，可以用新数组替换旧数组，或者使用 Vue.set 方法。</p><h3 id="对象更新"><a href="#对象更新" class="headerlink" title="对象更新"></a>对象更新</h3><p>可以用新对象替换旧对象，或者使用 Vue.set 方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>someObject<span class="token punctuation">,</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>someObject <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>someObject<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="事件处理器"><a href="#事件处理器" class="headerlink" title="事件处理器"></a>事件处理器</h3><p>Vue.js 为 v-on 提供了事件修饰符和按键修饰符</p><h3 id="表单控件绑定"><a href="#表单控件绑定" class="headerlink" title="表单控件绑定"></a>表单控件绑定</h3><p>可以用 v-model 指令在表单控件元素上创建双向数据绑定。常见修饰符有.lazy、.number、.trim。</p><p>也可以使用自定义事件的表单输入组件。</p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>Vue 组件的 API 来自三部分：props,events 和 slots：</p><ul><li>Props 允许外部环境传递数据给组件</li><li>Events 允许组件触发外部环境的副作用</li><li>Slots 允许外部环境将额外的内容组合在组件中。</li></ul><p>1）组件的 data 属性必须是函数</p><p>2）父子组件</p><p>在 Vue.js 中，父子组件的关系可以总结为 props down, events up 。父组件通过 props 向下传递数据给子组件，子组件通过 events 给父组件发送消息。</p><p>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。</p><p>另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop。如果你这么做了，Vue 会在控制台给出警告。</p><p>为什么我们会有修改 prop 中数据的冲动呢？通常是这两种原因：</p><p>1.prop 作为初始值传入后，子组件想把它当作局部数据来用；</p><p>2.prop 作为初始值传入，由子组件处理成其它数据输出。</p><p>对这两种原因，正确的应对方式是：</p><p>1.定义一个局部变量，并用 prop 的值初始化它：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'initialCounter'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> counter<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initialCounter <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.定义一个计算属性，处理 prop 的值并返回。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">normalizedSize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。</strong></p><p>3）非父子组件</p><p>有时候两个组件也需要通信(非父子关系)。在简单的场景下，可以使用一个空的 Vue 实例作为中央事件总线。在复杂的情况下，我们应该考虑使用专门的状态管理模式。</p><p>4）.sync 修饰符</p><p>在一些情况下，我们可能会需要对一个 prop 进行『双向绑定』。</p><p>2.0 中移除了.sync，Vue2.3.0+又将其添加回来了，但是这次它只是作为一个编译时的语法糖存在，它会被扩展为一个自动更新父组件属性的 v-on 侦听器。如下代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;comp :foo.sync&#x3D;&quot;bar&quot;&gt;&lt;&#x2F;comp&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会被扩展为：</p><pre class="line-numbers language-none"><code class="language-none">&lt;comp :foo&#x3D;&quot;bar&quot; @update:foo&#x3D;&quot;val &#x3D;&gt; bar &#x3D; val&quot;&gt;&lt;&#x2F;comp&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当子组件需要更新 foo 的值时，它需要显式地触发一个更新事件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'update:foo'</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5）使用 slot 进行内容分发</p><p>作用域插槽：接收从子组件中传递的 prop 对象。作用域插槽更具代表性的用例是列表组件，允许组件自定义应该如何渲染列表每一项</p><p>6）动态组件、is 特性和 keep-alive 指令</p><p>7）子组件索引</p><p>尽管有 props 和 events，但是有时仍然需要 JavaScript 中直接访问子组件。为此可以使用 ref 为子组件指定一个索引 ID。</p><h3 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h3><p>虽然 Vue.js 通常鼓励开发人员沿着“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们确实要这么做。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调函数在 DOM 更新完成后就会调用。</p><h3 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h3><p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。包括以下工具：</p><ul><li>在 CSS 过渡和动画中自动应用 class</li><li>可以配合使用第三方 CSS 动画库，如 Animate.css</li><li>在过渡钩子函数中使用 JavaScript 直接操作 DOM</li><li>可以配合使用第三方 JavaScript 动画库，如 Velocity.js</li></ul><p>1）单元素/组件的过渡</p><p>Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加过渡</p><ul><li>条件渲染（使用 v-if）</li><li>条件展示（使用 v-show）</li><li>动态组件</li><li>组件根节点</li></ul><p>2）多个元素的过渡</p><p>对于原生标签可以使用 v-if/v-else</p><p>3）多个组件的过渡</p><p>多个组件的过渡我们可以使用动态组件。</p><p>4）列表过渡</p><h3 id="Render-函数和-JSX"><a href="#Render-函数和-JSX" class="headerlink" title="Render 函数和 JSX"></a>Render 函数和 JSX</h3><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>和 Angular 的指令类似，主要操作 DOM，下面是一个滚动加载的指令，holder 暂时没想到什么更好的处理方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">scrollCallback</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> windowH <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">;</span>  <span class="token keyword">let</span> <span class="token function-variable function">getDocumentHeight</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span>    <span class="token keyword">var</span> html <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>      body<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">,</span>      body<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">,</span>      html<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span>      html<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">,</span>      html<span class="token punctuation">.</span>scrollHeight    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> scrollH <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>windowH <span class="token operator">+</span> scrollH <span class="token operator">>=</span> <span class="token function">getDocumentHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>holder <span class="token operator">||</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> callBackWarpped<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> holder<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      vnode<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span>      vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>attrs <span class="token operator">&amp;&amp;</span>      vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'scroll-placeholder'</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      holder <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>attrs<span class="token punctuation">[</span><span class="token string">'scroll-placeholder'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      holder <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    callBackWarpped <span class="token operator">=</span> <span class="token function">scrollCallback</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> el<span class="token punctuation">,</span> holder <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> callBackWarpped<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">unbind</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> callBackWarpped<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h3><p>混合是一种灵活的分布式复用 Vue 组件的方式。混合对象可以包含任意组件选项。以组件使用混合对象时，所有混合对象的选项将被混入该组件本身的选项。</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>1）创建插件</p><p>Vue.js 的插件应当有一个公开方法 install。这个方法的第一个参数是 Vue 构造器 , 第二个参数是一个可选的选项对象。</p><p>2）使用插件</p><p>通过全局方法 Vue.use()使用插件:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 调用 `MyPlugin.install(Vue)`</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>MyPlugin<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以传入一个选项对象:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>MyPlugin<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> someOption<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><h3 id="两种导航方式"><a href="#两种导航方式" class="headerlink" title="两种导航方式"></a>两种导航方式</h3><p>1）router-link 声明式导航</p><pre class="line-numbers language-none"><code class="language-none">&lt;router-link to&#x3D;&quot;&#x2F;foo&quot;&gt;Go to Foo&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>router-link 对应的路由匹配成功，将自动设置 class 属性值.router-link-active。</p><p>2）编程式导航</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 字符串</span>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 对象</span>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'home'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 命名的路由</span>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> name<span class="token operator">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">&#123;</span> userId<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 带查询参数，变成 /register?plan=private</span>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'register'</span><span class="token punctuation">,</span> query<span class="token operator">:</span> <span class="token punctuation">&#123;</span> plan<span class="token operator">:</span> <span class="token string">'private'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重命名-redirect-和别名-alias"><a href="#重命名-redirect-和别名-alias" class="headerlink" title="重命名(redirect)和别名(alias)"></a>重命名(redirect)和别名(alias)</h3><h3 id="两种路由模式"><a href="#两种路由模式" class="headerlink" title="两种路由模式"></a>两种路由模式</h3><p>vue-router 默认 hash 模式，也可以设置为路由的 history 模式。</p><h3 id="导航钩子"><a href="#导航钩子" class="headerlink" title="导航钩子"></a>导航钩子</h3><p>vue-router 提供的导航钩子主要用来拦截导航，让它完成跳转或取消。有多种方式可以在路由导航发生时执行钩子：全局的, 单个路由独享的, 或者组件级的。</p><h3 id="路由-meta"><a href="#路由-meta" class="headerlink" title="路由 meta"></a>路由 meta</h3><p>一个路由匹配到的所有路由记录会暴露为$route对象（还有在导航钩子中的route对象）的$route.matched 数组。因此，我们需要遍历$route.matched 来检查路由记录中的 meta 字段。</p><h3 id="过渡动效"><a href="#过渡动效" class="headerlink" title="过渡动效"></a>过渡动效</h3><p>router-view 是基本的动态组件，所以我们可以用 transition 组件给它添加一些过渡效果。</p><h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><p>有时候，进入某个路由后，需要从服务器获取数据。例如，在渲染用户信息时，你需要从服务器获取用户的数据。我们可以通过两种方式来实现：</p><p>导航完成之后获取：先完成导航，然后在接下来的组件生命周期钩子中获取数据。在数据获取期间显示『加载中』之类的指示。</p><p>导航完成之前获取：导航完成前，在路由的 enter 钩子中获取数据，在数据获取成功后执行导航。</p><h3 id="滚动行为-scrollBehavior"><a href="#滚动行为-scrollBehavior" class="headerlink" title="滚动行为(scrollBehavior)"></a>滚动行为(scrollBehavior)</h3><p>注意: 这个功能只在 HTML5 history 模式下可用。</p><h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><p>当打包构建应用时，Javascript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。</p><p>结合 Vue 的异步组件和 Webpack 的 code splitting 功能,轻松实现路由组件的懒加载。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./Foo.vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  routes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> path<span class="token operator">:</span> <span class="token string">'/foo'</span><span class="token punctuation">,</span> component<span class="token operator">:</span> Foo <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><p>可以设置 tag、append、active-class、exact 等属性</p><p>有时候我们要让 “激活时的 CSS 类名” 应用在外层元素，而不是 a 标签本身，那么可以用 router-link 渲染外层元素，包裹着内层的原生 a 标签：</p><pre class="line-numbers language-none"><code class="language-none">&lt;router-link tag&#x3D;&quot;li&quot; to&#x3D;&quot;&#x2F;foo&quot;&gt;  &lt;a&gt;&#x2F;foo&lt;&#x2F;a&gt;&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这种情况下，a 将作为真实的链接（它会获得正确的 href 的），而”激活时的 CSS 类名”则设置到外层的 li。</p><h3 id="Router-构造配置"><a href="#Router-构造配置" class="headerlink" title="Router 构造配置"></a>Router 构造配置</h3><p>routes、mode、base、linkActiveClass、scrollBehavior</p><h3 id="对组件注入"><a href="#对组件注入" class="headerlink" title="对组件注入"></a>对组件注入</h3><p>1）注入的属性</p><p>通过在 Vue 根实例的 router 配置传入 router 实例，下面两个属性成员会被注入到每个子组件。</p><p>$router：router 实例</p><p>$route：当前激活的路由信息对象。这个属性是只读的，里面的属性是 immutable（不可变）的，不过你可以 watch（监测变化）它。</p><p>2）允许的额外配置：beforeRouteEnter、beforeRouteLeave</p><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><p>1)单一状态树</p><p>Vuex 使用单一状态树–是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个『唯一数据源(SSOT)』而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。</p><p>2）在 Vue 组件中获得 Vuex 状态</p><p>最好在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。而不是在每个需要使用 state 的组件中需要频繁地导入。</p><p>3）mapState 辅助函数</p><p>当一个组件需要获取多个状态时候，可以使用 mapState 辅助函数帮助我们生成计算属性，这样可以简化代码书写。mapState 函数会返回一个对象，然后可以使用对象展开运算符将它与局部计算属性混合使用。</p><p>4）不要滥用 vuex</p><p>使用 Vuex 并不意味着你需要将所有的状态放入 Vuex。虽然将所有的状态放到 Vuex 会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。如果有些状态严格属于单个组件，最好还是作为组件的局部状态。你应该根据你的应用开发需要进行权衡和确定。</p><h3 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h3><p>getters 用来从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">computed<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">doneTodosCount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span> <span class="token operator">=></span> todo<span class="token punctuation">.</span>done<span class="token punctuation">)</span><span class="token punctuation">.</span>length  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>getters 可以认为是 store 的计算属性。和 state 类似，有 mapGetters 辅助函数。</p><h3 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutations 非常类似于事件：每个 mutation 都有一个字符串的事件类型(type)和一个回调函数(handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数</p><p>1）提交载荷（Payload）</p><p>你可以向 store.commit 传入额外的参数，即 mutation 的载荷（payload）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ...</span>mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    state<span class="token punctuation">.</span>count <span class="token operator">+=</span> n  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）Mutations 需遵守 Vue 的响应规则</p><p>3）使用常量替代 Mutation 事件类型</p><p>4）mutation 必须是同步函数</p><p>5）在组件中提交 Mutations</p><p>你可以在组件中使用 this.$store.commit(‘xxx’)提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。</p><h3 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h3><p>actions 类似于 mutation，不同在于：</p><ul><li>actions 提交的是 mutation，而不是直接变更状态。</li><li>actions 可以包含任意异步操作。</li></ul><p>1）在组件中分发 Action</p><p>你在组件中使用 this.$store.dispatch(‘xxx’)分发 action，或者使用 mapActions 辅助函数将组件的 methods 映射为 store.dispatch 调用（需要先在根节点注入 store）</p><p>2）组合 Actions</p><p>Action 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？</p><p>首先，你需要明白 store.dispatch 可以处理被触发的 action 的回调函数返回的 Promise，并且 store.dispatch 仍旧返回 Promise。</p><p>使用 async/await 会更加简单：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 假设 getData() 和 getOtherData() 返回的是 Promise</span>actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">async</span> <span class="token function">actionA</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> commit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'gotData'</span><span class="token punctuation">,</span> <span class="token keyword">await</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">async</span> <span class="token function">actionB</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> dispatch<span class="token punctuation">,</span> commit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'actionA'</span><span class="token punctuation">)</span> <span class="token comment">// 等待 actionA 完成</span>    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'gotOtherData'</span><span class="token punctuation">,</span> <span class="token keyword">await</span> <span class="token function">getOtherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</p><p>为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  state<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  state<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  modules<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    a<span class="token operator">:</span> moduleA<span class="token punctuation">,</span>    b<span class="token operator">:</span> moduleB  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a <span class="token comment">// -> moduleA 的状态</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b <span class="token comment">// -> moduleB 的状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插件-1"><a href="#插件-1" class="headerlink" title="插件"></a>插件</h3><p>Vuex 的 store 接受 plugins 选项，这个选项暴露出每次 mutation 的钩子。Vuex 插件就是一个函数，它接收 store 作为唯一参数。</p><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>开启严格模式，仅需在创建 store 的时候传入 strict:true</p><p>在严格模式下，无论何时发生了状态变更且不是由 mutation 函数引起的，将会抛出错误。这能保证所有的状态变更都能被调试工具跟踪到。</p><p>不要在发布环境下启用严格模式！严格模式会深度监测状态树来检测不合规的状态变更–请确保在发布环境下关闭严格模式，以避免性能损失。</p><h3 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h3><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h3 id="热重载"><a href="#热重载" class="headerlink" title="热重载"></a>热重载</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuejs技术栈从CLI到打包上线实战全解析</title>
      <link href="/posts/23421.html"/>
      <url>/posts/23421.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文是自己 vue 项目实践中的一些总结，针对 Vue2 及相关技术栈，实践中版本为 2.3.3。</p><h2 id="开发前须知"><a href="#开发前须知" class="headerlink" title="开发前须知"></a>开发前须知</h2><h3 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h3><p>在开发前，我们要至少通读一遍 vue 官方文档和 API(看官方文档是最重要的，胜过看五十、一百篇博客),英文阅读能力还行的建议阅读<a href="https://vuejs.org/v2/guide/">英文文档</a>，中文文档内容会稍落后，还要通读相关的 vue-router、axios、vuex 等。</p><p>一般来说我们都是先利用 vue-cli 来搭建项目基本架构。</p><p>vue-cli 官方 temaplte<a href="https://github.com/vuejs-templates">地址</a>，我们选择 webpack 版本，建议看看其文档<a href="http://vuejs-templates.github.io/webpack/">vue-webpack-boilerplate</a>了解基本用法和项目配置等。</p><p>深入地了解 vue-cli 的 webpack 配置请查看<a href="https://github.com/DDFE/DDFE-blog/issues/10">vue-cli#2.0 webpack 配置分析</a></p><h3 id="打造团队的脚手架"><a href="#打造团队的脚手架" class="headerlink" title="打造团队的脚手架"></a>打造团队的脚手架</h3><p>vue-cli 虽然强大，但是它有很多个步骤要我们去选择配置，而实际上公司业务很多配置是固定的，比如我们公司规定了要安装 vue-router、要使用 Standard 风格 Eslint 等，还规定了必须使用 sass，这样在 vue-cli 配置完成后还必须要 npm install node-sass 和 sass-loader，还有 axios 等也是一定要安装的。所以不应该每次新建一个项目都去一步步选择 vue-cli 的那些配置然后还要去安装 sass 等，应该在 vue-cli 基础上根据公司自身的情况打造团队的脚手架，只需运行脚手架，就可以初始化整个项目。</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>建议在 src/目录增加 views 或 pages 目录来存放对应路由的组件，添加 api 目录，根据项目情况增加 filters、vuex 等目录。components 目录存放公共组件或者全局组件。每个组件目录可以将图片等资源放在一起。组件的子组件目录建议命名为 children 放在父组件目录下。如 home 组件目录为 home/home.vue，子组件 banner 路径为 home/chldren/banner/banner.vue。</p><h3 id="静态资源处理"><a href="#静态资源处理" class="headerlink" title="静态资源处理"></a>静态资源处理</h3><p>vue-webpack-boilerplate 文档中有静态资源处理的详细说明，但发现还有很多人都不知道，因此在这里稍微提一下。</p><p>vue-webpack-boilerplate 的项目结构中，我们有静态资源两个目录：src/assets 和 static/</p><p>assets 目录中的文件会被 webpack 处理，只支持相对路径形式，assets/logo.png 会被编译为./assets/logo.png，不支持/assets/logo.png</p><p>在 js 中，我们可以这样获取文件资源路径</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./assets/logo.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以下带~前缀类似 require 效果</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~assets/logo.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>static 目录中的静态资源不会被 webpack 处理，这里适合放一些外部不需要 webpack 处理的资源，build 后的静态资源都会被放进这个目录。</p><h2 id="vue-组件化"><a href="#vue-组件化" class="headerlink" title="vue 组件化"></a>vue 组件化</h2><p>关于 vue 组件化，360 奇舞团前端工程师钟恒的 ppt<a href="https://ppt.baomitu.com/d/52096df3#/">Vue.js 实践 如何使用 Vue2.0 开发富交互式 WEB 应用</a>写得非常好，本节内容也是出自其中。ppt 中提到组件化带来的新问题：通信、复用、耦合，以及如何解决。</p><h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><p>1）props 和 events：props down，events up</p><p>2）函数调用：this.refs</p><p>3）组件树: $parent.$parent</p><p>4）共享 state</p><p>5）eventbus</p><p>6）vue 技术栈之外的如 localstorage 等</p><h3 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h3><p>1）冗余：if、else if、else 判断执行不同的代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'editing'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// some editing code</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'preview'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// some preview code</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'present'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// some present code</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// some base code</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）包装：slots</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">// plugin-page.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> i am a page <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>// present-plugin-page.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PresetPluginPage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin-page</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>i am a present page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin-page</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>//output<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PresetPluginPage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>i am a present page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）继承：mixins</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// define a mixin object</span><span class="token keyword">var</span> myMixin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  methods<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">hello</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello from mixin!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// define a component that uses this mixin</span><span class="token keyword">var</span> Component <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>myMixin<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// -> "hello from mixin!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件耦合"><a href="#组件耦合" class="headerlink" title="组件耦合"></a>组件耦合</h3><p>1）组件耦合带来的问题：</p><ul><li>单组件修改困难</li><li>组合新组件困难</li><li>组件 debug 困难</li></ul><p>2）解耦</p><p>解耦的本质就是将变化分离</p><p>一、组件功能单一</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">// wrong<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>control-input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>control-input</span><span class="token punctuation">></span></span>// right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>control-number</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>control-number</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>二、采用稳定的接口</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// wrong</span><span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>$refs<span class="token punctuation">[</span><span class="token string">'resource-image'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// right</span>bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'open-resource-image'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>三、处理好共享的部分</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">bindEvents</span> <span class="token punctuation">(</span><span class="token parameter">remove</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> method <span class="token operator">=</span> remove    <span class="token operator">?</span> <span class="token string">'removeEventListener'</span>    <span class="token operator">:</span> <span class="token string">'addEventListener'</span>  window<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">'resize'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleResize<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）与服务端解耦</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/user/detail'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> body <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">detail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">detail</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>detail <span class="token operator">=</span> detail<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>服务端与前端体系不一</p></li><li><p>同步异步转换</p></li><li><p>多服务端/跨域的代码</p></li><li><p>统一的错误处理代码</p></li></ol><h2 id="vuex-使用中的一些注意事项"><a href="#vuex-使用中的一些注意事项" class="headerlink" title="vuex 使用中的一些注意事项"></a>vuex 使用中的一些注意事项</h2><p>1）不要滥用 vuex</p><p>使用 Vuex 并不意味着你需要将所有的状态放入 Vuex。虽然将所有的状态放到 Vuex 会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。如果有些状态严格属于单个组件，最好还是作为组件的局部状态。你应该根据你的应用开发需要进行权衡和确定。</p><p>2）最好在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，子组件可以通过 this.$store 访问，当状态较多时使用建议 mapState 辅助函数。</p><p>3）polyfill</p><p>本次项目中使用了 vuex，因此为兼容 IE9 等低版本，须引入 promise 的 polyfill–<a href="https://github.com/stefanpenner/es6-promise">es6-promise</a>。npm install 后在 main.js：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'es6-promise/auto'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="开发中的常见问题"><a href="#开发中的常见问题" class="headerlink" title="开发中的常见问题"></a>开发中的常见问题</h2><h3 id="引入-axios"><a href="#引入-axios" class="headerlink" title="引入 axios"></a>引入 axios</h3><p>为了和后端进行数据交互，我们一般引入<a href="https://github.com/mzabriskie/axios">axios 库</a>。在 main.js 中如下将其加入 vue 的原型中，这样可以在组件中通过 this.$http 来获取 axios：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">'$http'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> axios <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者 Object.defineProperty(Vue.prototype, '$axios', &#123; value: axios &#125;)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这次实践中未采用这种做法，而是创建了一个 getData.js 进行了统一管理：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">const</span> <span class="token function-variable function">getSomething</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">param1，param2</span><span class="token punctuation">)</span> <span class="token operator">=></span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url，<span class="token punctuation">&#123;</span>  params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  param1<span class="token operator">:</span> param1<span class="token punctuation">,</span>  param2<span class="token operator">:</span> param2  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span>  getSomething<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在单文件组件中 import getSomething 方法再进行调用即可。</p><h3 id="引入-iconfont"><a href="#引入-iconfont" class="headerlink" title="引入 iconfont"></a>引入 iconfont</h3><p>直接在 main.js 中 import 你下载的 iconfont.css 即可</p><h3 id="js-中判断环境"><a href="#js-中判断环境" class="headerlink" title="js 中判断环境"></a>js 中判断环境</h3><p>常见的需求是开发环境须 console，而线上环境不可以 console。默认环境有’development’、’production’、’testing’三种。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="设置数据模拟请求-Mock"><a href="#设置数据模拟请求-Mock" class="headerlink" title="设置数据模拟请求 Mock"></a>设置数据模拟请求 Mock</h3><p>数据模拟请求利用了 mock.js,<a href="https://github.com/nuysoft/Mock/wiki">配置文档</a>，不过这个只是简单的数据模拟，没有生成文档的功，更全面的文档、Mock.js、可视化、Rest、接口过渡、文档修改提醒、支持本地部署等功能可以使用<a href="https://github.com/thx/RAP">阿里 RAP</a>。</p><p>npm install mockjs 安装后，可在/src/api 目录下新建 data.js，引入 mockjs，后可在程序入口或 api 入口根据开发环境来引入 data.js，下面是几个示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">'mockjs'</span><span class="token punctuation">;</span><span class="token keyword">let</span> data <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token string">'list|1-10'</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string">'id|+1'</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mock一个数据</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">'mockjs'</span><span class="token punctuation">;</span>Mock<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> timeout<span class="token operator">:</span> <span class="token string">'300‐500'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\/login</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> code<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拦截login请求，返回对象&#123; code: 0 &#125;</span><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">'mockjs'</span><span class="token punctuation">;</span>Mock<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> timeout<span class="token operator">:</span> <span class="token string">'300‐500'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span>sitemap<span class="token punctuation">.</span>cms<span class="token punctuation">.</span>banners<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  results<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拦截sitemap中cms.banners请求，返回对象&#123; results: [] &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="seo"><a href="#seo" class="headerlink" title="seo"></a>seo</h3><p>可以使用<a href="https://ssr.vuejs.org/en/">服务端渲染</a>或者预渲染，预渲染 webpack 插件<a href="https://github.com/chrisvfritz/prerender-spa-plugin">github 地址</a>。</p><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><p>实际项目中还是不可避免地要修改 webpack 配置，如果不知道怎么改的话就去查看 webpack 的配置分析去进行修改。</p><h3 id="配置全局变量"><a href="#配置全局变量" class="headerlink" title="配置全局变量"></a>配置全局变量</h3><p>要设置全局变量可以在 build 中的 webpack.base.conf.js 中配置 externals，与 module 同级：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">externals<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  sitemap<span class="token operator">:</span> <span class="token string">'sitemap'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在 eslinttrc.js 的 module.exports 添加这样一个配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">globals<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token string">'sitemap'</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="根据环境的不同加载不同的-js"><a href="#根据环境的不同加载不同的-js" class="headerlink" title="根据环境的不同加载不同的 js"></a>根据环境的不同加载不同的 js</h3><p>在这个项目中要根据环境（开发环境、测试环境、生产环境）的不同加载不同的 sitemap.js，这个 sitemap.js 会暴露出一个全局的 sitemap 变量，sitemap 变量是个由 api 地址构成的 json 对象。利用 HtmlWebpackPlugin 插件的 option 选项来实现。</p><p>在 index.html 中这样写：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%= htmlWebpackPlugin.options.src %><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在 build 中的各自 conf.js 的 HtmlWebpackPlugin 设置不同的 src，如在开发环境中添加 src 那一行：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  filename<span class="token operator">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>  template<span class="token operator">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>  src<span class="token operator">:</span> <span class="token string">'//dev.example.com/api/sitemap.js'</span><span class="token punctuation">,</span>  inject<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置-alias（别名）"><a href="#配置-alias（别名）" class="headerlink" title="配置 alias（别名）"></a>配置 alias（别名）</h3><p>在 webpack.base.conf.js，vue-cli 已经默认配置好了 src 目录的别名为@，建议配置 src 下一级目录的别名，这样能减少重复书写也更美观，如下添加 src、pages、components 别名：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  extensions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">'vue$'</span><span class="token operator">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>    <span class="token string">'@'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'src'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'pages'</span><span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/pages'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'components'</span><span class="token operator">:</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/components'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3><p>可以使用 webpack 插件<a href="https://github.com/tcoopman/image-webpack-loader">image-webpack-loader</a>来压缩处理图片。</p><h3 id="多页面"><a href="#多页面" class="headerlink" title="多页面"></a>多页面</h3><p>实际就是添加多个入口 js 然后再修改相应配置，网上资料很多，一搜就知道了。</p><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><p>我们有时候需要关闭某些代码检查，具体配置参见<a href="http://eslint.cn/docs/user-guide/configuring">Configuring ESLint - ESLint 中文</a>，下面是常见的两个：</p><p>1）关闭 eslint</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* eslint-disable */</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* eslint-enable */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）关闭禁止 new</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* eslint-disable no-new */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="优化和其他"><a href="#优化和其他" class="headerlink" title="优化和其他"></a>优化和其他</h2><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>1）由于 vue 的追踪对象变化原理基于使用 Object.defineProperty，在处理大量数据并且不需要追踪对象变化时，可通过 Object.freeze(data)冻结对象达到优化数据渲染处理</p><p>2）vue-router 路由懒加载。当打包构建应用时，javascript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1）使用表驱动法来注册全局 filter、指令等，如在 src 下新建 filters 目录，index.js 中 import 所有全局过滤器:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> milliFormat <span class="token keyword">from</span> <span class="token string">'./milliFormat'</span><span class="token punctuation">;</span><span class="token keyword">import</span> reverse <span class="token keyword">from</span> <span class="token string">'./reverse'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  milliFormat<span class="token punctuation">,</span>  reverse<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在 main.js 中注册</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> commonFiltes <span class="token keyword">from</span> <span class="token string">'./filters/index'</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>commonFiltes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> commonFiltes<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）对于一些强耦合的组件如 collapse 和 collapse-item，可以使用$parent和$children 来进行通信，没必要像 elementUI 一样自己实现组件的 broadcast 和 dispatch，我还发现有 UI 库竟然是使用 bus 来通信的，这样导致同一个页面要是有两个 collapse，就会互相影响。</p><p>3）在根组件上注册公共过滤器后，除了在“Mustache”语法中使用，还可在组件中通过 this.$root.$options.filters.datetime(data)获取 datetime 过滤器。</p><h2 id="打包上线"><a href="#打包上线" class="headerlink" title="打包上线"></a>打包上线</h2><h3 id="优化分析"><a href="#优化分析" class="headerlink" title="优化分析"></a>优化分析</h3><p>npm run build –report 进行打包大小分析，可视化地看到有什么地方需要优化。</p><h3 id="测试-build-后的文件"><a href="#测试-build-后的文件" class="headerlink" title="测试 build 后的文件"></a>测试 build 后的文件</h3><p>build 成功后有个 tip 提示你 build 后的文件需要部署在 http 服务器上，不能通过 file 协议打开。</p><p>我们可以通过<a href="https://github.com/cloudhead/node-static">node-static</a>来启动服务。可以写一个 js 配置文件通过 node 来启动，或者 CLI 中输入 static dist(先安装 node-static)：</p><pre class="line-numbers language-none"><code class="language-none">$ static distserving &quot;dist&quot; at http:&#x2F;&#x2F;127.0.0.1:8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更多如设置端口等请点击上面的链接查看文档。</p><h2 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h2><p>本文最重要的是文章中给出的一些链接，尤其是开发前须知章节中的链接，最好点进去通读一下。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6核心内容精讲--快速实践ES6（三）</title>
      <link href="/posts/64450.html"/>
      <url>/posts/64450.html</url>
      
        <content type="html"><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>Promise 是异步编程的一种解决方案。Promise 对象表示了异步操作的最终状态（完成或失败）和返回的结果。</p><p>其实我们在 jQuery 的 ajax 中已经见识了部分 Promise 的实现，通过 Promise，我们能够将回调转换为链式调用，也起到解耦的作用。</p><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><p>Promise 接口的基本思想是让异步操作返回一个 Promise 对象</p><h4 id="三种状态和两种变化途径"><a href="#三种状态和两种变化途径" class="headerlink" title="三种状态和两种变化途径"></a>三种状态和两种变化途径</h4><p>Promise 对象只有三种状态。</p><ul><li>异步操作“未完成”（pending）</li><li>异步操作“已完成”（resolved，又称 fulfilled）</li><li>异步操作“失败”（rejected）</li></ul><p>这三种的状态的变化途径只有两种。</p><ul><li>异步操作从“未完成”到“已完成”</li><li>异步操作从“未完成”到“失败”。</li></ul><p>这种变化只能发生一次，一旦当前状态变为“已完成”或“失败”，就意味着不会再有新的状态变化了。因此，Promise 对象的最终结果只有两种。</p><p>异步操作成功，Promise 对象传回一个值，状态变为 resolved。</p><p>异步操作失败，Promise 对象抛出一个错误，状态变为 rejected。</p><h4 id="生成-Promise-对象"><a href="#生成-Promise-对象" class="headerlink" title="生成 Promise 对象"></a>生成 Promise 对象</h4><p>通过 new Promise 来生成 Promise 对象：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 异步操作的代码</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* 异步操作成功 */</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</p><p>resolve 会将 Promise 对象的状态从 pending 变为 resolved，reject 则是将 Promise 对象的状态从 pending 变为 rejected。</p><p>Promise 构造函数接受一个函数后会立即执行这个函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Hello World</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="then-和-catch-回调"><a href="#then-和-catch-回调" class="headerlink" title="then 和 catch 回调"></a>then 和 catch 回调</h4><p>Promise 对象生成以后，可以用 then 方法分别指定 resolved 状态和 rejected 状态的回调函数。then 方法可以接受两个回调函数作为参数。第一个回调函数是 Promise 对象的状态变为 resolved 时调用，第二个回调函数是 Promise 对象的状态变为 rejected 时调用。第二个函数是可选的。分别称之为成功回调和失败回调。成功回调接收异步操作成功的结果为参数，失败回调接收异步操作失败报出的错误作为参数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3s后打印'成功'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>catch 方法是 then(null, rejection)的别名，用于指定发生错误时的回调函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3s后打印'失败'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h4><p>Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面代码中，Promise.all 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 对象的实例，如果不是，就会先调用下面讲到的 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。（Promise.all 方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。）</p><p>p 的状态由 p1、p2、p3 决定，分成两种情况。</p><p>（1）只有 p1、p2、p3 的状态都变成 resolved，p 的状态才会变成 resolved，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。</p><p>（2）只要 p1、p2、p3 之中有一个被 Rejected，p 的状态就变成 Rejected，此时第一个被 reject 的实例的返回值，会传递给 p 的回调函数。</p><h4 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h4><p>与 Promise.all()类似，不过是只要有一个 Promise 实例先改变了状态，p 的状态就是它的状态，传递给回调函数的结果也是它的结果。所以很形象地叫做赛跑。</p><h4 id="Promise-resolve-和-Promise-reject"><a href="#Promise-resolve-和-Promise-reject" class="headerlink" title="Promise.resolve()和 Promise.reject()"></a>Promise.resolve()和 Promise.reject()</h4><p>有时需要将现有对象转为 Promise 对象，可以使用这两个方法。</p><h2 id="Generator（生成器）"><a href="#Generator（生成器）" class="headerlink" title="Generator（生成器）"></a>Generator（生成器）</h2><h3 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h3><p>生成器本质上是一种特殊的迭代器（参见本文章系列二之 Iterator）。ES6 里的迭代器并不是一种新的语法或者是新的内置对象(构造函数)，而是一种协议 (protocol)。所有遵循了这个协议的对象都可以称之为迭代器对象。生成器对象由生成器函数返回并且遵守了迭代器协议。具体参见 MDN。</p><h3 id="怎么用-1"><a href="#怎么用-1" class="headerlink" title="怎么用"></a>怎么用</h3><h4 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h4><p>生成器函数的语法为 function*，在其函数体内部可以使用 yield 和 yield*关键字。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token keyword">yield</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们像上面那样调用生成器函数时，会发现并没有输出。这就是生成器函数与普通函数的不同，它可以交出函数的执行权（即暂停执行）。yield 表达式就是暂停标志。</p><p>之前提到了生成器对象遵循迭代器协议，所以其实可以通过 next 方法执行。执行结果也是一个包含 value 和 done 属性的对象。</p><p>遍历器对象的 next 方法的运行逻辑如下。</p><p>（1）遇到 yield 表达式，就暂停执行后面的操作，并将紧跟在 yield 后面的那个表达式的值，作为返回的对象的 value 属性值。</p><p>（2）下一次调用 next 方法时，再继续往下执行，直到遇到下一个 yield 表达式。</p><p>（3）如果没有再遇到新的 yield 表达式，就一直运行到函数结束，直到 return 语句为止，并将 return 语句后面的表达式的值，作为返回的对象的 value 属性值。</p><p>（4）如果该函数没有 return 语句，则返回的对象的 value 属性值为 undefined。</p><p>需要注意的是，yield 表达式后面的表达式，只有当调用 next 方法、内部指针指向该语句时才会执行。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token comment">// &#123; value: 3, done: false &#125;</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span><span class="token comment">// &#123; value: undefined, done: true &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for…of-遍历"><a href="#for…of-遍历" class="headerlink" title="for…of 遍历"></a>for…of 遍历</h4><p>生成器部署了迭代器接口，因此可以用 for…of 来遍历，不用调用 next 方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 1</span><span class="token comment">// 2</span><span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield*表达式"></a>yield*表达式</h4><p>从语法角度看，如果 yield 表达式后面跟的是一个遍历器对象，需要在 yield 表达式后面加上星号，表明它返回的是一个遍历器对象。这被称为 yield<em>表达式。yield</em>后面只能跟迭代器，yield*的功能是将迭代控制权交给后面的迭代器，达到递归迭代的目的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> <span class="token string">'a'</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token string">'b'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">yield</span> <span class="token string">'x'</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token string">'y'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// x</span><span class="token comment">// a</span><span class="token comment">// b</span><span class="token comment">// y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自动执行"><a href="#自动执行" class="headerlink" title="自动执行"></a>自动执行</h4><p>下面是使用 Generator 函数执行一个真实的异步任务的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> fetch <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'node-fetch'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'https://api.github.com/users/github'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>bio<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，Generator 函数封装了一个异步操作，该操作先读取一个远程接口，然后从 JSON 格式的数据解析信息。这段代码非常像同步操作，除了加上了 yield 命令。</p><p>执行这段代码的方法如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>result<span class="token punctuation">.</span>value  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，首先执行 Generator 函数，获取遍历器对象，然后使用 next 方法（第二行），执行异步任务的第一阶段。由于 Fetch 模块返回的是一个 Promise 对象，因此要用 then 方法调用下一个 next 方法。</p><p>可以看到，虽然 Generator 函数将异步操作表示得很简洁，但是流程管理却不方便（即何时执行第一阶段、何时执行第二阶段）。</p><p>那么如何自动化异步任务的流程管理呢？</p><p>Generator 函数就是一个异步操作的容器。它的自动执行需要一种机制，当异步操作有了结果，能够自动交回执行权。</p><p>两种方法可以做到这一点。</p><ol><li><p>回调函数。将异步操作包装成 Thunk 函数，在回调函数里面交回执行权。</p></li><li><p>Promise 对象。将异步操作包装成 Promise 对象，用 then 方法交回执行权。</p></li></ol><h4 id="Thunk-函数"><a href="#Thunk-函数" class="headerlink" title="Thunk 函数"></a>Thunk 函数</h4><p>本节很简略，可能会看不太明白，请参考<a href="http://www.ruanyifeng.com/blog/2015/05/thunk.html">Thunk 函数的含义和用法</a></p><p>Thunk 函数的含义：编译器的”传名调用”实现，往往是将参数放到一个临时函数之中，再将这个临时函数传入函数体。这个临时函数就叫做 Thunk 函数。</p><p>JavaScript 语言是传值调用，它的 Thunk 函数含义有所不同。在 JavaScript 语言中，Thunk 函数替换的不是表达式，而是多参数函数，将其替换成单参数的版本，且只接受回调函数作为参数。</p><p>任何函数，只要参数有回调函数，就能写成 Thunk 函数的形式，可以通过一个 Thunk 函数转换器来转换。</p><p>Thunk 函数真正的威力，在于可以自动执行 Generator 函数。我们可以实现一个基于 Thunk 函数的 Generator 执行器，然后直接把 Generator 函数传入这个执行器即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> gen <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token function">run</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Thunk 函数并不是 Generator 函数自动执行的唯一方案。因为自动执行的关键是，必须有一种机制，自动控制 Generator 函数的流程，接收和交还程序的执行权。回调函数可以做到这一点，Promise 对象也可以做到这一点。</p><h4 id="基于-Promise-对象的自动执行"><a href="#基于-Promise-对象的自动执行" class="headerlink" title="基于 Promise 对象的自动执行"></a>基于 Promise 对象的自动执行</h4><p>首先，将方法包装成一个 Promise 对象（fs 是 nodejs 的一个内置模块）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">readFile</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">fileName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">gen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/fstab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/shells'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，手动执行上面的 Generator 函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察上面的执行过程，其实是在递归调用，我们可以用一个函数来实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token parameter">gen</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token keyword">return</span> result<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    result<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">next</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">run</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中，只要 Generator 函数还没执行到最后一步，next 函数就调用自身，以此实现自动执行。</p><h4 id="co-模块"><a href="#co-模块" class="headerlink" title="co 模块"></a>co 模块</h4><p><a href="https://github.com/tj/co">co 模块</a>是 nodejs 社区著名的 TJ 大神写的一个小工具，用于 Generator 函数的自动执行。</p><p>下面是一个 Generator 函数,用于依次读取两个文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">gen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/fstab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/shells'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> co <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'co'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">co</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>co 模块可以让你不用编写 Generator 函数的执行器。Generator 函数只要传入 co 函数，就会自动执行。co 函数返回一个 Promise 对象，因此可以用 then 方法添加回调函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">co</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Generator 函数执行完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>co 模块的原理：其实就是将两种自动执行器（Thunk 函数和 Promise 对象），包装成一个模块。使用 co 的前提条件是，Generator 函数的 yield 命令后面，只能是 Thunk 函数或 Promise 对象。如果数组或对象的成员，全部都是 Promise 对象，也可以使用 co（co v4.0 版以后，yield 命令后面只能是 Promise 对象，不再支持 Thunk 函数）。</p><h2 id="async（异步）函数"><a href="#async（异步）函数" class="headerlink" title="async（异步）函数"></a>async（异步）函数</h2><h3 id="是什么-2"><a href="#是什么-2" class="headerlink" title="是什么"></a>是什么</h3><p>async 函数属于 ES7。目前，它仍处于提案阶段，但是转码器 Babel 和 regenerator 都已经支持。async 函数可以说是目前异步操作最好的解决方案，是对 Generator 函数的升级和改进。</p><h3 id="怎么用-2"><a href="#怎么用-2" class="headerlink" title="怎么用"></a>怎么用</h3><p>1）语法</p><p>async 函数声明定义了异步函数，它会返回一个 AsyncFunction 对象。和普通函数一样，你也可以定义一个异步函数表达式。</p><p>调用异步函数时会返回一个 promise 对象。当这个异步函数成功返回一个值时，将会使用 promise 的 resolve 方法来处理这个返回值，当异步函数抛出的是异常或者非法值时，将会使用 promise 的 reject 方法来处理这个异常值。</p><p>异步函数可能会包括 await 表达式，这将会使异步函数暂停执行并等待 promise 解析传值后，继续执行异步函数并返回解析值。</p><p><strong>注意：await 只能用在 async 函数中。</strong></p><p>前面依次读取两个文件的代码写成 async 函数如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">asyncReadFile</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/fstab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/shells'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>async 函数将 Generator 函数的星号（*）替换成了 async，将 yield 改为了 await。</p><p>2）async 函数的改进</p><p>async 函数对 Generator 函数的改进，体现在以下三点。</p><p>（1）内置执行器。Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">asyncReadFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）更好的语义。async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</p><p>（3）更广的适用性。co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。</p><p>3）基本用法</p><p>同 Generator 函数一样，async 函数返回一个 Promise 对象，可以使用 then 方法添加回调函数。当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">resolveAfter2Seconds</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">add1</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">resolveAfter2Seconds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">resolveAfter2Seconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">await</span> a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">await</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">add1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2s后打印60</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolveAfter2Seconds</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">resolveAfter2Seconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4s后打印60</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）捕获错误</p><p>可以使用.catch 回调捕获错误，也可以使用传统的 try…catch。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myFunction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">await</span> <span class="token function">somethingThatReturnsAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 另一种写法</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myFunction</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">await</span> <span class="token function">somethingThatReturnsAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）并发的异步操作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>多个 await 命令后面的异步操作会按顺序完成。如果不存在继发关系，最好让它们同时触发。上面的代码只有 getFoo 完成，才会去执行 getBar，这样会比较耗时。如果这两个是独立的异步操作，完全可以让它们同时触发。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 写法一</span><span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写法二</span><span class="token keyword">let</span> fooPromise <span class="token operator">=</span> <span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> barPromise <span class="token operator">=</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">await</span> fooPromise<span class="token punctuation">;</span><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token keyword">await</span> barPromise<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6核心内容精讲--快速实践ES6（一）</title>
      <link href="/posts/26561.html"/>
      <url>/posts/26561.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文大量参考了阮一峰老师的开源教程<a href="http://es6.ruanyifeng.com/">ECMAScript6 入门</a>和 MDN，适合新手入门或者对 ES6 常用知识点进行全面回顾，目标是以较少的篇幅涵盖 ES6 及部分 ES7 在实践中的绝大多数使用场景。更全面、更深入的请进入上面的教程。如果您觉得有遗漏的常见知识点或者错误的地方，请评论指出！</p><h2 id="新的变量声明方式-let-和-const"><a href="#新的变量声明方式-let-和-const" class="headerlink" title="新的变量声明方式 let 和 const"></a>新的变量声明方式 let 和 const</h2><h3 id="是什么："><a href="#是什么：" class="headerlink" title="是什么："></a>是什么：</h3><p>新的变量声明方式，提供变量的块级作用域，同时通过一些限制来更防止我们犯错误。也就是说是更好的声明变量的方式</p><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><p>1）let/const 与 var 的区别是提供了块级作用域以及变量创建时不会立即初始化</p><p>2）在同一个作用域内 let/const 禁止重复声明相同的变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// SyntaxError</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3）let 声明的变量可重新赋值，const 声明的变量不能重新赋值，即常量。</p><p>4）暂时性死区：在当前作用域，使用的变量已经存在，但是在代码执行到变量声明前禁止访问。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  tmp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常见使用场景"><a href="#常见使用场景" class="headerlink" title="常见使用场景"></a>常见使用场景</h3><p>1）因为能创建块级作用域，所以常见于 if 和 for 中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）const 在实践中常用来声明一个对象，之后可以再对这个对象的属性进行修改</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'baz'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><h3 id="是什么：-1"><a href="#是什么：-1" class="headerlink" title="是什么："></a>是什么：</h3><p>按照阮一峰大神的说法：ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。也就是说通过模式匹配来进行变量赋值。</p><h3 id="怎么用："><a href="#怎么用：" class="headerlink" title="怎么用："></a>怎么用：</h3><p>1）数组基本用法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">;</span> <span class="token comment">//1</span>b<span class="token punctuation">;</span> <span class="token comment">//2</span>c<span class="token punctuation">;</span> <span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）对象基本用法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> foo<span class="token operator">:</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> bar<span class="token operator">:</span> <span class="token string">'bbb'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>foo<span class="token punctuation">;</span> <span class="token comment">// "aaa"</span>bar<span class="token punctuation">;</span> <span class="token comment">// "bbb"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3）函数参数的解构赋值</p><p>如在 vuex 中 action 不使用解构如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter">context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用解构</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">actions<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token function">increment</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> commit <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）支持不完全解构</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5）如果解构不成功，变量的值就等于 undefined,同时解构赋值允许指定默认值,默认值生效的条件是对象的属性值严格等于 undefined。</p><h3 id="常见使用场景-1"><a href="#常见使用场景-1" class="headerlink" title="常见使用场景"></a>常见使用场景</h3><p>1）交换变量的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）提取 JSON 数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> jsonData <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  id<span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>  status<span class="token operator">:</span> <span class="token string">'OK'</span><span class="token punctuation">,</span>  data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">867</span><span class="token punctuation">,</span> <span class="token number">5309</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> id<span class="token punctuation">,</span> status<span class="token punctuation">,</span> data<span class="token operator">:</span> number <span class="token punctuation">&#125;</span> <span class="token operator">=</span> jsonData<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> status<span class="token punctuation">,</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 42, "OK", [867, 5309]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）函数参数的默认值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">jQuery<span class="token punctuation">.</span><span class="token function-variable function">ajax</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  url<span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    async <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function-variable function">beforeSend</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    cache <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function-variable function">complete</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    crossDomain <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    global <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// ... more config</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ... do stuff</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）指定加载模块的什么功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mapActions <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h3 id="干嘛的："><a href="#干嘛的：" class="headerlink" title="干嘛的："></a>干嘛的：</h3><p>箭头函数可以用来替换函数表达式，不用写 function，更加简化。也就是说是函数表达式的简化方式</p><h3 id="怎么用：-1"><a href="#怎么用：-1" class="headerlink" title="怎么用："></a>怎么用：</h3><p>1）注意箭头函数中的 this 指向外层的 this</p><p>2）无法用 call/apply/bind 来改变 this 指向。</p><p>3）在 ES6 中，会默认采用严格模式，因此默认情况下 this 不是指向 window 对象，而是 undefined。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// undefined，不是window</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4）不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><p>关键是你需要 this 指向什么</p><h2 id="默认参数和-rest-参数"><a href="#默认参数和-rest-参数" class="headerlink" title="默认参数和 rest 参数"></a>默认参数和 rest 参数</h2><h3 id="是什么：-2"><a href="#是什么：-2" class="headerlink" title="是什么："></a>是什么：</h3><p>默认参数就是设置参数默认值，rest 参数（翻译为不具名参数，也叫做剩余参数）是将传入的未具名的参数作为一个数组集合</p><h3 id="怎么用：-2"><a href="#怎么用：-2" class="headerlink" title="怎么用："></a>怎么用：</h3><p>如下，默认参数给参数赋一个默认值，rest 参数使用三个点（…）加数组集合名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">arg1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>restArg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> restArg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, [2, 3, 4]</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2, [3, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><h3 id="是什么：-3"><a href="#是什么：-3" class="headerlink" title="是什么："></a>是什么：</h3><p>同 rest 参数一样，也是三个点。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。因此常用于函数调用。</p><h3 id="常见使用场景："><a href="#常见使用场景：" class="headerlink" title="常见使用场景："></a>常见使用场景：</h3><p>1）合并数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">,</span> <span class="token operator">...</span>arr3<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）与解构赋值结合</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ES5</span>a <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rest <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// ES6</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span> <span class="token operator">=</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）将字符串转为数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token operator">...</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [ "t", "e", "s", "t"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h2><h3 id="语法变化"><a href="#语法变化" class="headerlink" title="语法变化"></a>语法变化</h3><p>1）属性简写，当对象的一个属性名称与本地变量名相同的时候，可以省略冒号和值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token punctuation">&#123;</span> foo <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>baz<span class="token punctuation">;</span> <span class="token comment">// &#123;foo: "bar"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）属性名表达式，可以在以对象字面量方式定义对象是使用表达式作为属性名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ES5只能这样</span>obj<span class="token punctuation">[</span><span class="token string">'a'</span> <span class="token operator">+</span> <span class="token string">'bc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment">// ES6还能这样</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">[</span><span class="token string">'a'</span> <span class="token operator">+</span> <span class="token string">'bc'</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）方法简写，省去:和 function</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h3><p>更好的判断方法，与===的不同有两点：一是+0 不等于-0，二是 NaN 等于自身。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span><span class="token punctuation">;</span> <span class="token comment">// false</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><p>1）Object.assign 方法用于对象的合并，用法与 jQuery 和 underscore 的 extend 方法类似，而且同样会改变 target。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source1<span class="token punctuation">,</span> source2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（enumerable: false）。</p><p>3）Object.assign 方法实行的是浅拷贝，而不是深拷贝。</p><h3 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf"></a>Object.setPrototypeOf</h3><p>用来设置一个对象的 prototype 对象，返回参数对象本身</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h3><p>Object.getPrototypeOf 方法可以用来从子类上获取父类。因此，可以使用这个方法判断，一个类是否继承了另一个类。参见下面类与继承章节</p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>对象的每个属性都有一个描述对象（Descriptor），Object.getOwnPropertyDescriptor 方法可以获取该属性的描述对象。这个描述对象有 value、writable、enumerable、configurable 四大属性。</p><p>ES5 下面三个操作会忽略 enumerable 为 false 的属性。</p><ul><li>for…in 循环：只遍历对象自身的和继承的可枚举的属性</li><li>Object.keys()：返回对象自身的所有可枚举的属性的键名</li><li>JSON.stringify()：只串行化对象自身的可枚举的属性</li></ul><p>ES6 新增的操作 Object.assign()，也会忽略 enumerable 为 false 的属性，只拷贝对象自身的可枚举的属性。</p><p>ES6 一共有 5 种方法可以遍历对象的属性。</p><p>（1）for…in</p><p>for…in 循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</p><p>（2）Object.keys(obj)</p><p>Object.keys 返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。</p><p>（3）Object.getOwnPropertyNames(obj)</p><p>Object.getOwnPropertyNames 返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。</p><p>（4）Object.getOwnPropertySymbols(obj)</p><p>Object.getOwnPropertySymbols 返回一个数组，包含对象自身的所有 Symbol 属性。</p><p>（5）Reflect.ownKeys(obj)</p><p>Reflect.ownKeys 返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 或字符串，也不管是否可枚举。</p><p>以上的 5 种方法遍历对象的属性，都遵守同样的属性遍历的次序规则。</p><ul><li>首先遍历所有属性名为数值的属性，按照数字排序。</li><li>其次遍历所有属性名为字符串的属性，按照生成时间排序。</li><li>最后遍历所有属性名为 Symbol 值的属性，按照生成时间排序。</li></ul><p>大多数时候，我们只关心对象自身的可枚举属性。所以，尽量不要用 for…in 循环，而用 Object.keys()代替。</p><h2 id="字符串扩展"><a href="#字符串扩展" class="headerlink" title="字符串扩展"></a>字符串扩展</h2><p>以前判断一个字符串是否包含某个字符串只能通过 indexOf 的值是否大于-1 来判断，现在新增了三种方法：</p><p>includes()：表示是否包含该字符串。</p><p>startsWith()：表示该字符串是否在头部。</p><p>endsWith()：表示该字符串是否在尾部。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'hello world'</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><h4 id="干嘛的：-1"><a href="#干嘛的：-1" class="headerlink" title="干嘛的："></a>干嘛的：</h4><p>和 handlebars 那些模板引擎功能类似，有模板字符串可以不用拼接字符串了</p><h4 id="怎么用：-3"><a href="#怎么用：-3" class="headerlink" title="怎么用："></a>怎么用：</h4><p>用反引号``将整个字符串包裹起来，${}表示一个变量或者一个表达式，可以嵌套</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">tmpl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">addrs</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">      &lt;table>      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>addrs        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        &lt;tr>&lt;td></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>addr<span class="token punctuation">.</span>first<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/td>&lt;/tr>        &lt;tr>&lt;td></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>addr<span class="token punctuation">.</span>last<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/td>&lt;/tr>      </span><span class="token template-punctuation string">`</span></span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">      &lt;/table>    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span> first<span class="token operator">:</span> <span class="token string">'Jane'</span><span class="token punctuation">,</span> last<span class="token operator">:</span> <span class="token string">'Bond'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span> first<span class="token operator">:</span> <span class="token string">'Lars'</span><span class="token punctuation">,</span> last<span class="token operator">:</span> <span class="token string">'Croft'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">tmpl</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h3><p>函数名后面紧接一个模板字符串。该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能（tagged template）。当字符串模板有变量时，函数的第一个参数为被变量分开的字符串组成的数组，后面的参数依次为变量，这些变量的参数序列可以使用 rest 参数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>tag<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a <span class="token operator">+</span> b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> world </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>a <span class="token operator">*</span> b<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token comment">// 等同于</span><span class="token function">tag</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Hello '</span><span class="token punctuation">,</span> <span class="token string">' world '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h2><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><p>Array.of 方法用于将一组值，转换为数组。可以替代 Array，且其行为非常统一，不像 Array 只有一个正整数参数 n 时，会生成 n 个空位构成的数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [undefined * 1]，其实不是undefined，是空位，如下可证明两者并不一样</span><span class="token number">0</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token number">0</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p>Array.from 方法用于将两类对象转为真正的数组：类数组对象（array-like object）和可遍历（iterable）对象（包括 ES6 新增的数据结构 Set 和 Map）。Array.from 还可以接受第二个参数，作用类似于数组的 map 方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> length<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['a']</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['h', 'e', 'l', 'l', 'o']，因为字符串有Iterator接口，可遍历</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 4, 9]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常见使用场景：</p><p>1）转换 NodeList 集合。常见的类似数组的对象是 DOM 操作返回的 NodeList 集合，以及函数内部的 arguments 对象。但是后者使用 rest 参数更简便</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// NodeList对象</span><span class="token keyword">let</span> elementDivList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>elementDivList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">div</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）数组去重。与下面要讲到的 Set 配合即可很简单地实现数值去重。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> uniqueArr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uniqueArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 3, 5, 8, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数组实例的-copyWithin-方法"><a href="#数组实例的-copyWithin-方法" class="headerlink" title="数组实例的 copyWithin 方法"></a>数组实例的 copyWithin 方法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它接受三个参数。</p><ul><li>target（必需）：从该位置开始替换数据。</li><li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。</li><li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, 4, 5, 4, 5]</span><span class="token comment">/* 从索引2开始读取数据，到数组尾部停止，即读到（3, 4, 5），然后从索引0开始替换数据 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="数组实例的-find-和-findIndex-方法"><a href="#数组实例的-find-和-findIndex-方法" class="headerlink" title="数组实例的 find 和 findIndex 方法"></a>数组实例的 find 和 findIndex 方法</h3><p>找到第一个符合条件的 item（项）或 index（索引），前者相当于 underscore 中的 first 方法，后者则和 underscore 中的同名方法一致。另外，这两个方法都可以借助 Object.is 发现 NaN，弥补了数组的 IndexOf 方法的不足。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>  <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>  <span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组实例的-fill-方法"><a href="#数组实例的-fill-方法" class="headerlink" title="数组实例的 fill 方法"></a>数组实例的 fill 方法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype  <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>fillItem<span class="token punctuation">,</span> <span class="token punctuation">(</span>start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 3, 10, 10, 10]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组实例的-includes-方法"><a href="#数组实例的-includes-方法" class="headerlink" title="数组实例的 includes 方法"></a>数组实例的 includes 方法</h3><p>与字符串的 includes 方法类似。该方法属于 ES7，但 Babel 转码器已经支持。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>  <span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// false</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// true</span>  <span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Set-和-Map"><a href="#Set-和-Map" class="headerlink" title="Set 和 Map"></a>Set 和 Map</h2><p>ES6 中增加了两个新的数据结构：Set 和 Map。Set 是不包含重复值的列表,而 Map 则是键与相对应的值的集合。</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h4 id="是什么：-4"><a href="#是什么：-4" class="headerlink" title="是什么："></a>是什么：</h4><p>Set 是不包含重复值的有序列表。</p><h4 id="怎么用：-4"><a href="#怎么用：-4" class="headerlink" title="怎么用："></a>怎么用：</h4><p>1）Set 构造函数可以接受一个数组（或类似数组的对象）作为参数，用来初始化。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）四个操作方法（add()、delete()、has()、clear()）和一个属性（size）,使用方法根据名字和下面例子就知道了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意2被add了两次</span>s<span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment">// 2</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>s<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment">// 2</span>s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment">// 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）三个遍历器生成函数（keys()、values()、entries()）和一个遍历方法（forEach()）</p><p>keys 方法、values 方法、entries 方法返回的都是遍历器对象（详见 Iterator）。都这可以使用遍历器对象的方法 for…of 进行遍历。由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以 keys 方法和 values 方法的行为完全一致。forEach 方法与 ES5 数组的 forEach 类似。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> set<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// red</span><span class="token comment">// green</span><span class="token comment">// blue</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> set<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// red</span><span class="token comment">// green</span><span class="token comment">// blue</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> set<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ["red", "red"]</span><span class="token comment">// ["green", "green"]</span><span class="token comment">// ["blue", "blue"]</span>set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）Set 转化为数组，有两种方法：…扩展运算符和 Array.from()</p><p>这两者可互换，因此前面提到的使用 Array.from()来数组去重也可以这样做：[…new Set(arr)]</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方法一</span><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// set的值是2, 4, 6</span><span class="token comment">// 方法二</span><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=></span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// set的值是2, 4, 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="是什么：-5"><a href="#是什么：-5" class="headerlink" title="是什么："></a>是什么：</h4><p>一种由键值对集合构成的数据结构，类似于对象，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">&#123;</span> p<span class="token operator">:</span> <span class="token string">'Hello World'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "content"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="怎么用：-5"><a href="#怎么用：-5" class="headerlink" title="怎么用："></a>怎么用：</h4><p>1）Set 构造函数可以接收任何一个具有 Iterator 接口的数据结构作为参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token string">'bar'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）5 个操作方法（set(key, value)、get(key)、has(key)、delete(key)、clear()）和一个属性（size）</p><p>3）遍历生成函数和遍历方法和 Set 类似，Map 结构的默认遍历器接口（Symbol.iterator 属性），就是 entries 方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">map<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">===</span> map<span class="token punctuation">.</span>entries<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4）Map 转为数组，使用…扩展运算符</p><h3 id="WeakSet-和-WeakMap"><a href="#WeakSet-和-WeakMap" class="headerlink" title="WeakSet 和 WeakMap"></a>WeakSet 和 WeakMap</h3><p>WeakSet、WeakMap 分别和 Set、Map 类似，不过存储的是对象的弱引用方式，这样在内存管理上更加容易优化。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6核心内容精讲--快速实践ES6（二）</title>
      <link href="/posts/63419.html"/>
      <url>/posts/63419.html</url>
      
        <content type="html"><![CDATA[<h2 id="Iterator-和-for…of"><a href="#Iterator-和-for…of" class="headerlink" title="Iterator 和 for…of"></a>Iterator 和 for…of</h2><h3 id="是什么："><a href="#是什么：" class="headerlink" title="是什么："></a>是什么：</h3><p>Iterator(迭代器)是专门用来控制如何遍历的对象，具有特殊的接口。</p><p>Iterator 接口是一种数据遍历的协议，只要调用迭代器对象对象的 next 方法，就会得到一个对象，表示当前遍历指针所在的那个位置的信息，这个包含 done 和 value 两个属性。</p><p>迭代器对象创建后，可以反复调用 next()使用。</p><h3 id="怎么用："><a href="#怎么用：" class="headerlink" title="怎么用："></a>怎么用：</h3><p>Iterator 对象带有 next 方法，每一次调用 next 方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含 value 和 done 两个属性的对象。其中，value 属性是当前成员的值，done 属性是一个布尔值，表示遍历是否结束。<br>ES6 规定，默认的 Iterator 接口部署在数据结构的 Symbol.iterator 属性，或者说，一个数据结构只要具有 Symbol.iterator 属性，就可以认为是“可遍历的”（iterable）。Symbol.iterator 属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  data<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            value<span class="token operator">:</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            done<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> value<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// hello</span><span class="token comment">// world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，for-of 循环首先调用 obj 对象的 Symbol.iterator 方法，紧接着返回一个新的迭代器对象。迭代器对象可以是任意具有.next()方法的对象,for-of 循环将重复调用这个方法，每次循环调用一次。return 的对象中 value 表示当前的值，done 表示是否完成迭代。</p><p>Iterator 的作用有三个：</p><ol><li><p>为各种数据结构，提供一个统一的、简便的访问接口；</p></li><li><p>使得数据结构的成员能够按某种次序排列；</p></li><li><p>ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费。</p></li></ol><p>一个数据结构只要部署了 Symbol.iterator 属性，就被视为具有 iterator 接口，就可以用 for…of 循环遍历它的成员。也就是说，for…of 循环内部调用的是数据结构的 Symbol.iterator 方法。</p><p>for…of 循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如 arguments 对象、DOM NodeList 对象）、后文的 Generator 对象，以及字符串。</p><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>ES6 引入了一种第六种基本类型的数据：Symbol。Symbol 是一种特殊的、不可变的数据类型，可以作为对象属性的标识符使用。</p><h3 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h3><p>调用 Symbol()创建一个新的 symbol，它的值与其它任何值皆不相等。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> sym <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError，阻止创建一个显式的Symbol包装器对象而不是一个Symbol值</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1 <span class="token operator">===</span> s2<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用使用场景："><a href="#常用使用场景：" class="headerlink" title="常用使用场景："></a>常用使用场景：</h3><p>由于每一个 Symbol 值都是不相等的，因此常作为对象的属性名来防止某一个键被不小心改写或覆盖，这个以 symbol 为键的属性可以保证不与任何其它属性产生冲突。</p><p>作为对象属性名时的遍历：参见对象的遍历那节</p><h3 id="内置的-Symbol-值："><a href="#内置的-Symbol-值：" class="headerlink" title="内置的 Symbol 值："></a>内置的 Symbol 值：</h3><p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方法。其中一个很重要的就是 Iterator 中提到的 Symbol.iterator</p><h2 id="Reflect（反射）"><a href="#Reflect（反射）" class="headerlink" title="Reflect（反射）"></a>Reflect（反射）</h2><h3 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h3><p>Reflect 是一个内置的对象，它提供可拦截 JavaScript 操作的方法。</p><h3 id="为什么要增加-Reflect-对象"><a href="#为什么要增加-Reflect-对象" class="headerlink" title="为什么要增加 Reflect 对象"></a>为什么要增加 Reflect 对象</h3><p><a href="https://github.com/tvcutsem/harmony-reflect/wiki#reflect">参考链接</a></p><p>1）更有用的返回值</p><p>比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而 Reflect.defineProperty(obj, name, desc)则会返回 false。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 老写法</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// success</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// failure</span><span class="token punctuation">&#125;</span><span class="token comment">// 新写法</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// success</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// failure</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）函数操作。某些 Object 操作是命令式，比如 name in obj 和 delete obj[name]，而 Reflect.has(obj, name)和 Reflect.deleteProperty(obj, name)让它们变成了函数行为</p><p>3）更加可靠的函数调用方式</p><p>在 ES5 中，当我们想传一个参数数组 args 来调用函数 f，并且将 this 绑定为 this，可以这样写：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">f</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是，f 可能是一个故意或者不小心定义了它自己的 apply 方法的对象。当你想确保你调用的是内置的 apply 方法时，一种典型的方法是这样写的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是这种方法不仅冗长而且难以理解。通过使用 Reflect，你可以以一种更简单、容易的方式来可靠地进行函数调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4）可变参数的构造函数</p><p>假设你想调用一个参数是可变的构造函数。在 ES6 中，由于新的扩展运算符，你可能可以这样写：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 ES5 中，这更加难写，因为只有通过 F.apply 或者 F.call 传递可变参数来调用函数，但是没有 F.contruct 来传递可变参数实例化一个构造函数。通过 Reflect，在 ES5 中可以这样写（内容翻译自参考链接，链接的项目是 ES6 Reflect 和 Proxy 的一个 ES5 shim，所以会这么说）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token constant">F</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5）为 Proxy(代理，见下一章)的 traps 提供默认行为</p><p>当使用 Proxy 对象去包裹存在的对象时，拦截一个操作是很常见的。执行一些行为，然后去“做默认的事情”，这是对包裹的对象进行拦截操作的典型形式。例如，我只是想在获取对象 obj 的属性时 log 出所有的属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> loggedObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// now do the default thing</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Reflect 和 Proxy 的 API 被设计为互相联系、协同的，因此每个 Proxy trap 都有一个对应的 Reflect 去“做默认的事情”。因此当你发现你想在 Proxy 的 handler 中“做默认的事情”是，正确的事情永远都是去调用 Reflect 对象对应的方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> loggedObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Reflect 方法的返回类型已经被确保了能和 Proxy traps 的返回类型兼容。</p><p>6）控制访问或者读取时的 this</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token operator">...</span> <span class="token comment">// get property name as a string</span>Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> name<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span> <span class="token comment">// if obj[name] is an accessor, it gets run with `this === wrapper`</span>Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>Reflect 对象一共有 14 个静态方法（其中 Reflect.enumerate 被废弃）</p><p>与大多数全局对象不同，Reflect 没有构造函数。不能将其与一个 new 运算符一起使用，或者将 Reflect 对象作为一个函数来调用。</p><p>Reflect 对象提供以下静态函数，它们与代理处理程序方法（Proxy 的 handler）有相同的名称。这些方法中的一些与 Object 上的对应方法基本相同，有些遍历操作稍有不同，见对象扩展遍历那节。</p><h4 id="Reflect-apply"><a href="#Reflect-apply" class="headerlink" title="Reflect.apply()"></a>Reflect.apply()</h4><p>对一个函数进行调用操作，同时可以传入一个数组作为调用参数。和 Function.prototype.apply()功能类似。</p><h4 id="Reflect-construct"><a href="#Reflect-construct" class="headerlink" title="Reflect.construct()"></a>Reflect.construct()</h4><p>对构造函数进行 new 操作，相当于执行 new target(…args)。</p><h4 id="Reflect-defineProperty"><a href="#Reflect-defineProperty" class="headerlink" title="Reflect.defineProperty()"></a>Reflect.defineProperty()</h4><p>和 Object.defineProperty()类似。</p><h4 id="Reflect-deleteProperty"><a href="#Reflect-deleteProperty" class="headerlink" title="Reflect.deleteProperty()"></a>Reflect.deleteProperty()</h4><p>删除对象的某个属性，相当于执行 delete target[name]。</p><h4 id="Reflect-enumerate"><a href="#Reflect-enumerate" class="headerlink" title="Reflect.enumerate()"></a>Reflect.enumerate()</h4><p>该方法会返回一个包含有目标对象身上所有可枚举的自身字符串属性以及继承字符串属性的迭代器，for…in 操作遍历到的正是这些属性。</p><h4 id="Reflect-get"><a href="#Reflect-get" class="headerlink" title="Reflect.get()"></a>Reflect.get()</h4><p>获取对象身上某个属性的值，类似于 target[name]。</p><h4 id="Reflect-getOwnPropertyDescriptor"><a href="#Reflect-getOwnPropertyDescriptor" class="headerlink" title="Reflect.getOwnPropertyDescriptor()"></a>Reflect.getOwnPropertyDescriptor()</h4><p>类似于 Object.getOwnPropertyDescriptor()。</p><h4 id="Reflect-getPrototypeOf"><a href="#Reflect-getPrototypeOf" class="headerlink" title="Reflect.getPrototypeOf()"></a>Reflect.getPrototypeOf()</h4><p>类似于 Object.getPrototypeOf()。</p><h4 id="Reflect-has"><a href="#Reflect-has" class="headerlink" title="Reflect.has()"></a>Reflect.has()</h4><p>判断一个对象是否存在某个属性，和 in 运算符的功能完全相同。</p><h4 id="Reflect-isExtensible"><a href="#Reflect-isExtensible" class="headerlink" title="Reflect.isExtensible()"></a>Reflect.isExtensible()</h4><p>类似于 Object.isExtensible().</p><h4 id="Reflect-ownKeys"><a href="#Reflect-ownKeys" class="headerlink" title="Reflect.ownKeys()"></a>Reflect.ownKeys()</h4><p>返回一个包含所有自身属性（不包含继承属性）的数组。</p><h4 id="Reflect-preventExtensions"><a href="#Reflect-preventExtensions" class="headerlink" title="Reflect.preventExtensions()"></a>Reflect.preventExtensions()</h4><p>类似于 Object.preventExtensions()。</p><h4 id="Reflect-set"><a href="#Reflect-set" class="headerlink" title="Reflect.set()"></a>Reflect.set()</h4><p>设置对象身上某个属性的值，类似于 target[name] = val。</p><h4 id="Reflect-setPrototypeOf"><a href="#Reflect-setPrototypeOf" class="headerlink" title="Reflect.setPrototypeOf()"></a>Reflect.setPrototypeOf()</h4><p>类似于 Object.setPrototypeOf()。</p><h2 id="Proxy（代理）"><a href="#Proxy（代理）" class="headerlink" title="Proxy（代理）"></a>Proxy（代理）</h2><h3 id="是什么-2"><a href="#是什么-2" class="headerlink" title="是什么"></a>是什么</h3><p>Proxy 对象用于定义基本操作的自定义行为 (例如属性查找，赋值，枚举，函数调用等)。</p><p>一些术语：</p><ul><li>handler：包含 traps 的对象。</li><li>traps：提供访问属性的方法，与操作系统中的 traps 定义相似。</li><li>target：被代理虚拟化的对象，这个对象常常用作代理的存储后端。</li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Proxy 对象的所有用法，都是上面这种形式，不同的只是 handler 参数的写法。其中，new Proxy()表示生成一个 Proxy 实例，target 参数表示所要代理的目标对象，handler 参数也是一个对象，用来定制代理行为。</p><p>下面代码对一个空对象进行了代理，重定义了属性的读取（get）和设置（set）行为。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">getting </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">setting </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//  setting count!</span><span class="token operator">++</span>obj<span class="token punctuation">.</span>count<span class="token punctuation">;</span><span class="token comment">//  getting count!</span><span class="token comment">//  setting count!</span><span class="token comment">//  2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="handler-对象的方法"><a href="#handler-对象的方法" class="headerlink" title="handler 对象的方法"></a>handler 对象的方法</h4><p>handler 是一个包含了 Proxy 的 traps 的占位符对象。</p><p>所有的 trap 都是可选的，如果某个 trap 没有定义，将会对 target 进行默认操作。这些 trap 和 Reflect 的静态方法是对应的，可以使用 Reflect 对应的静态方法提供默认行为。上面的例子中，handler 定义了 get 和 set 两个 trap，每个 trap 都是一个方法，接收一些参数。返回了对应的 Reflect 方法来执行默认方法。</p><p>handler 的每个方法可以理解为对相应的某个方法进行代理拦截。</p><p>handler.getPrototypeOf(target)：Object.getPrototypeOf 的一个 trap</p><p>handler.setPrototypeOf(target, proto)：Object.setPrototypeOf 的一个 trap</p><p>handler.isExtensible(target)：Object.isExtensible 的一个 trap</p><p>handler.preventExtensions(target)：Object.preventExtensions 的一个 trap</p><p>handler.getOwnPropertyDescriptor(target, propKey)：Object.getOwnPropertyDescriptor 的一个 trap</p><p>handler.defineProperty(target, propKey, propDesc)：Object.defineProperty 的一个 trap</p><p>handler.has(target, propKey)：in 操作的一个 trap</p><p>handler.get(target, propKey, receiver)：获取属性值的一个 trap</p><p>handler.set(target, propKey, value, receiver)：设置属性值的一个 trap</p><p>handler.deleteProperty(target, propKey)：delete 操作的一个 trap</p><p>handler.ownKeys(target)：Object.getOwnPropertyNames 和 Object.getOwnPropertySymbols 的一个 trap</p><p>handler.apply(target, object, args)：函数调用的一个 trap</p><p>handler.construct(target, args)：new 操作的一个 trap</p><h4 id="Proxy-revocable"><a href="#Proxy-revocable" class="headerlink" title="Proxy.revocable()"></a>Proxy.revocable()</h4><p>Proxy.revocable 方法返回一个可取消的 Proxy 实例。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span> proxy<span class="token punctuation">,</span> revoke <span class="token punctuation">&#125;</span> <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">revocable</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>proxy<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>proxy<span class="token punctuation">.</span>foo<span class="token punctuation">;</span> <span class="token comment">// 123</span><span class="token function">revoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>proxy<span class="token punctuation">.</span>foo<span class="token punctuation">;</span> <span class="token comment">// TypeError: Revoked</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Proxy.revocable 方法返回一个对象，该对象的 proxy 属性是 Proxy 实例，revoke 属性是一个函数，可以取消 Proxy 实例。上面代码中，当执行 revoke 函数之后，再访问 Proxy 实例，就会抛出一个错误。</p><p>Proxy.revocable 的一个使用场景是，目标对象不允许直接访问，必须通过代理访问，一旦访问结束，就收回代理权，不允许再次访问。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>上面说的那些可能都比较虚，去看一下 w3cplus 上翻译的<a href="https://www.w3cplus.com/javascript/use-cases-for-es6-proxies.html">实例解析 ES6 Proxy 使用场景</a>，可能就会更清楚地明白该怎么用。</p><p>如实例解析 ES6 Proxy 使用场景中所说，Proxy 其功能非常类似于设计模式中的代理模式，该模式常用于三个方面：</p><ul><li>拦截和监视外部对对象的访问</li><li>降低函数或类的复杂度</li><li>在复杂操作前对操作进行校验或对所需资源进行管理</li></ul><p>有以下 5 个常见使用场景：</p><ol><li><p>抽离校验模块</p></li><li><p>私有属性</p></li><li><p>访问日志</p></li><li><p>预警和拦截</p></li><li><p>过滤操作</p></li></ol><h2 id="类与继承"><a href="#类与继承" class="headerlink" title="类与继承"></a>类与继承</h2><h3 id="类："><a href="#类：" class="headerlink" title="类："></a>类：</h3><p>将原先 JavaScript 中传统的通过构造函数生成新对象的方式变为类的方式，contructor 内是构造函数执行的代码，外面的方法为原型上的方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ES5</span><span class="token keyword">function</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Point</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">toString</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">'('</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义类</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 静态方法，static关键字，就表示该方法不会被实例继承(但是会被子类继承)，而是直接通过类来调用</span>  <span class="token keyword">static</span> <span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">'('</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">')'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><p>通过 extends 关键字来实现。super 关键字则是用来调用父类</p><p>ES5 的继承，实质是先创造子类的实例对象 this，然后再将父类的方法添加到 this 上面（Parent.apply(this)）。ES6 的继承机制完全不同，实质是先创造父类的实例对象 this（所以必须先调用 super 方法），然后再用子类的构造函数修改 this。理解了这句话，下面 1,2 两点也就顺其自然了：</p><p>1）子类必须在 constructor 方法中调用 super 方法，否则新建实例时会报错。这是因为子类没有自己的 this 对象，而是继承父类的 this 对象，然后对其进行加工。如果不调用 super 方法，子类就得不到 this 对象。</p><p>2）在子类的构造函数中，只有调用 super 之后，才可以使用 this 关键字，否则会报错。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的constructor(x, y)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的toString()</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>ColorPoint<span class="token punctuation">)</span> <span class="token operator">===</span> Point<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）mixin: 继承多个类</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mix</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>mixins</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">class</span> <span class="token class-name">Mix</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> mixin <span class="token keyword">of</span> mixins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">copyProperties</span><span class="token punctuation">(</span>Mix<span class="token punctuation">,</span> mixin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">copyProperties</span><span class="token punctuation">(</span><span class="token class-name">Mix</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> mixin<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> Mix<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">copyProperties</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token string">'constructor'</span> <span class="token operator">&amp;&amp;</span> key <span class="token operator">!==</span> <span class="token string">'prototype'</span> <span class="token operator">&amp;&amp;</span> key <span class="token operator">!==</span> <span class="token string">'name'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> desc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DistributedEdit</span> <span class="token keyword">extends</span> <span class="token class-name">mix</span><span class="token punctuation">(</span>Loggable<span class="token punctuation">,</span> Serializable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）new.target 属性：通过检查 new.target 对象是否是 undefined，可以判断函数是否通过 new 进行调用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'必须使用new生成实例'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 另一种写法</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">.</span>target <span class="token operator">===</span> Person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'必须使用new生成实例'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span><span class="token keyword">var</span> notAPerson <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Decorator-装饰器"><a href="#Decorator-装饰器" class="headerlink" title="Decorator(装饰器)"></a>Decorator(装饰器)</h2><h3 id="是什么-3"><a href="#是什么-3" class="headerlink" title="是什么"></a>是什么</h3><p>Decorator 是用来修改类（包括类和类的属性）的一个函数。</p><p>这是 ES 的一个提案，其实是 ES7 的特性，目前 Babel 转码器已经支持。</p><h3 id="怎么用-1"><a href="#怎么用-1" class="headerlink" title="怎么用"></a>怎么用</h3><p>1）修饰类：在类之前使用@加函数名，装饰器函数的第一个参数，就是所要修饰的目标类</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">testable</span><span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isTestable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@testable<span class="token keyword">class</span> <span class="token class-name">MyTestableClass</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyTestableClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>isTestable<span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>装饰器函数也可以是一个工厂方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">testable</span><span class="token punctuation">(</span><span class="token parameter">isTestable</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    target<span class="token punctuation">.</span>isTestable <span class="token operator">=</span> isTestable<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@<span class="token function">testable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyTestableClass</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>MyTestableClass<span class="token punctuation">.</span>isTestable<span class="token punctuation">;</span> <span class="token comment">// true</span>@<span class="token function">testable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>MyClass<span class="token punctuation">.</span>isTestable<span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）修饰类的属性：修饰器函数一共可以接受三个参数，第一个参数是所要修饰的目标对象，第二个参数是所要修饰的属性名，第三个参数是该属性的描述对象。装饰器在作用于属性的时候，实际上是通过 Object.defineProperty 来进行扩展和封装的。</p><p>下面是一个例子，修改属性描述对象的 enumerable 属性，使得该属性不可遍历。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>  @nonenumerable  <span class="token keyword">get</span> <span class="token function">kidCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">nonenumerable</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  descriptor<span class="token punctuation">.</span>enumerable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> descriptor<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p><a href="https://github.com/jayphelps/core-decorators.js">core-decorators.js</a>这个第三方模块提供了几个常见的修饰器。</p><p>在修饰器的基础上，可以实现 Mixin 模式等。</p><h2 id="Module-模块"><a href="#Module-模块" class="headerlink" title="Module(模块)"></a>Module(模块)</h2><p>在 ES6 之前，前端和 nodejs 实践中已经有一些模块加载方案，如 CommonJS、AMD、CMD 等。ES6 在语言标准的层面上，实现了模块功能。</p><p>模块功能主要由两个命令构成：export 和 import。export 命令用于规定模块的对外接口，import 命令用于输入其他模块提供的功能。</p><h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><p>一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。必须使用 export 关键字输出该变量。有以下两种不同的导出方式：</p><h4 id="命名导出"><a href="#命名导出" class="headerlink" title="命名导出"></a>命名导出</h4><p>命名导出规定的是对外的接口，必须与模块内部的变量建立一一对应关系。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> myFunction <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 导出一个函数声明</span><span class="token keyword">export</span> <span class="token keyword">const</span> foo <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 导出一个常量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="默认导出-每个脚本只能有一个-，使用-export-default-命令："><a href="#默认导出-每个脚本只能有一个-，使用-export-default-命令：" class="headerlink" title="默认导出 (每个脚本只能有一个)，使用 export default 命令："></a>默认导出 (每个脚本只能有一个)，使用 export default 命令：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> myFunctionOrClass<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本质上，export default 就是输出一个叫做 default 的变量或方法，然后系统允许你为它取任意名字</p><p>对于只导出一部分值来说，命名导出的方式很有用。在导入时候，可以使用相同的名称来引用对应导出的值。</p><p>关于默认导出方式，每个模块只有一个默认导出。一个默认导出可以是一个函数，一个类，一个对象等。当最简单导入的时候，这个值是将被认为是”入口”导出值。</p><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>使用 export 命令定义了模块的对外接口以后，其他 JS 文件就可以通过 import 命令加载这个模块。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'my_module'</span><span class="token punctuation">;</span> <span class="token comment">// 指定加载某个输出值</span><span class="token keyword">import</span> <span class="token string">'lodash'</span><span class="token punctuation">;</span> <span class="token comment">// 仅执行</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> lastName <span class="token keyword">as</span> surname <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./profile'</span><span class="token punctuation">;</span> <span class="token comment">// 为输入的模块重命名</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> circle <span class="token keyword">from</span> <span class="token string">'./circle'</span><span class="token punctuation">;</span> <span class="token comment">// 整体加载</span><span class="token comment">/*export和import复合写法*/</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'my_module'</span><span class="token punctuation">;</span><span class="token comment">// 等同于</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'my_module'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ES6-模块与-CommonJS-模块的差异"><a href="#ES6-模块与-CommonJS-模块的差异" class="headerlink" title="ES6 模块与 CommonJS 模块的差异"></a>ES6 模块与 CommonJS 模块的差异</h3><p>它们有两个重大差异。</p><ul><li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li><li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</li></ul><p>CommonJS 是运行时加载，ES6 是编译时加载，使得静态分析成为可能</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>ES6 的模块自动采用严格模式。因此 ES6 模块中，顶层的 this 指向 undefined。</p></li><li><p>export 一般放在两头即开始或者结尾这样更能清晰地明白暴露了什么变量</p></li><li><p>注意，import 命令具有提升效果，会提升到整个模块的头部，首先执行。因为不是运行时加载，不支持条件加载、按需加载等</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SASS学习总结</title>
      <link href="/posts/31259.html"/>
      <url>/posts/31259.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2012/06/sass.html">SASS用法指南</a><br>SASS是一种CSS预处理器（css preprocessor）。它的基本思想是，用一种专门的编程语言，进行网页样式设计，然后再编译成正常的CSS文件。</p><p>SASS提供四个编译风格的选项：</p><ul><li><p>nested：嵌套缩进的css代码，它是默认值。</p></li><li><p>expanded：没有缩进的、扩展的css代码。</p></li><li><p>compact：简洁格式的css代码。</p></li><li><p>compressed：压缩后的css代码。</p></li></ul><p>导入文件</p><p>@import命令，用来导入外部文件。</p><p>　　@import “path/filename.scss”;</p><p>如果导入的是.css文件，则等同于css的import命令。</p><p>注释</p><p>sass有两种注释方式，一种是标准的css注释方式/* */，另一种则是//双斜杆形式的单行注释，不过这种单行注释不会被转译出来。</p><p>1 变量</p><p>SASS允许使用变量，所有变量以$开头</p><p>普通变量</p><p>定义之后可以在全局范围内使用。</p><p>默认变量</p><p>sass的默认变量仅需要在值后面加上!default即可。</p><p>sass的默认变量一般是用来设置默认值，然后根据需求来覆盖的，覆盖的方式也很简单，只需要在默认变量之前重新声明下变量即可</p><p>默认变量的价值在进行组件化开发的时候会非常有用。</p><p>特殊变量</p><p>一般我们定义的变量都为属性值，可直接使用，但是如果变量作为属性或在某些特殊情况下等则必须要以#{$variables}形式使用。</p><p>多值变量</p><p>多值变量分为list类型和map类型，简单来说list类型有点像js中的数组，而map类型有点像js中的对象</p><p>全局变量</p><p>在变量值后面加上!global即为全局变量。这个目前还用不上，不过将会在sass 3.4后的版本中正式应用。目前的sass变量范围饱受诟病，所以才有了这个全局变量。</p><p>2 嵌套(Nesting)</p><p>sass的嵌套包括两种：一种是选择器的嵌套；另一种是属性的嵌套。我们一般说起或用到的都是选择器的嵌套。</p><p>在选择器嵌套中，可以使用&amp;表示父元素选择器</p><p>属性嵌套：所谓属性嵌套指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。</p><pre><code>.fakeshadow &#123;  border: &#123;    style: solid;    left: &#123;      width: 4px;      color: #888;    &#125;    right: &#123;      width: 2px;      color: #ccc;    &#125;  &#125;&#125;</code></pre><p>@at-root：sass3.3.0中新增的功能，用来跳出选择器嵌套的。</p><p>3 混合(mixin)</p><p>sass中使用@mixin声明混合，可以传递参数，参数名以$符号开始，多个参数以逗号分开，也可以给参数设置默认值。声明的@mixin通过@include来调用</p><p>多个参数mixin</p><p>调用时可直接传入值，如@include传入参数的个数小于@mixin定义参数的个数，则按照顺序表示，后面不足的使用默认值，如不足的没有默认值则报错。除此之外还可以选择性的传入参数，使用参数名与值同时传入。</p><p>多组值参数mixin</p><p>如果一个参数可以有多组值，如box-shadow、transition等，那么参数则需要在变量后加三个点表示，如$variables…。</p><pre><code>@content@content在sass3.2.0中引入，可以用来解决css3的@media等带来的问题。它可以使@mixin接受一整块样式，接受的样式从@content开始。 //sass style//-------------------------------                     @mixin max-screen($res)&#123;  @media only screen and ( max-width: $res )  &#123;    @content;  &#125;&#125;@include max-screen(480px) &#123;  body &#123; color: red &#125;&#125;//css style//-------------------------------@media only screen and (max-width: 480px) &#123;  body &#123; color: red &#125;&#125; </code></pre><p><strong>@mixin通过@include调用后解析出来的样式是以拷贝形式存在的，而下面的继承则是以联合声明的方式存在的，所以从3.2.0版本以后，建议传递参数的用@mixin，而非传递参数类的使用下面的继承%。</strong></p><p>4 继承</p><p>sass中，选择器继承可以让选择器继承另一个选择器的所有样式，并联合声明。使用选择器的继承，要使用关键词@extend，后面紧跟需要继承的选择器。</p><p>占位选择器%</p><p>从sass 3.2.0以后就可以定义占位选择器%。这种选择器的优势在于：如果不调用则不会有任何多余的css文件，避免了以前在一些基础的文件中预定义了很多基础的样式，然后实际应用中不管是否使用了@extend去继承相应的样式，都会解析出来所有的样式。占位选择器以%标识定义，通过@extend调用。</p><p>占位选择器的出现，使css文件更加简练可控，没有多余。所以可以用其定义一些基础的样式文件，然后根据需要调用产生相应的css。</p><pre><code>//sass style//-------------------------------%ir&#123;  color: transparent;  text-shadow: none;  background-color: transparent;  border: 0;&#125;%clearfix&#123;  @if $lte7 &#123;    *zoom: 1;  &#125;  &amp;:before,  &amp;:after &#123;    content: &quot;&quot;;    display: table;    font: 0/0 a;  &#125;  &amp;:after &#123;    clear: both;  &#125;&#125;#header&#123;  h1&#123;    @extend %ir;    width:300px;  &#125;&#125;.ir&#123;  @extend %ir;&#125;//css style//-------------------------------#header h1,.ir&#123;  color: transparent;  text-shadow: none;  background-color: transparent;  border: 0;&#125;#header h1&#123;  width:300px;&#125;</code></pre><p>在@media中暂时不能@extend @media外的代码片段，以后将会可以。</p><p>5 函数</p><p>sass定义了很多函数可供使用，当然你也可以自己定义函数，以@fuction开始。sass的官方函数链接为：sass fuction，实际项目中我们使用最多的应该是颜色函数，而颜色函数中又以lighten减淡和darken加深为最，其调用方法为lighten($color,$amount)和darken($color,$amount)，它们的第一个参数都是颜色值，第二个参数都是百分比。</p><pre><code>// pixels to rems @function pxToRem($px) &#123;  @return $px / $baseFontSize * 1rem;&#125;</code></pre><p>6 运算</p><p>sass具有运算的特性，可以对数值型的Value(如：数字、颜色、变量等)进行加减乘除四则运算。请注意运算符前后请留一个空格，不然会出错。另外，要注意运算单位</p><p>7 条件判断及循环</p><p>@if判断</p><p>@if可一个条件单独使用，也可以和@else结合多条件使用</p><p>三目判断</p><p>if($condition, $if_true, $if_false)</p><p>for循环 </p><p>for循环有两种形式，分别为：@for $var from <start> through <end>和@for $var from <start> to <end>。$i表示变量，start表示起始值，end表示结束值，这两个的区别是关键字through表示包括end这个数，而to则不包括end这个数。</p><p>@each循环</p><p>语法为：@each $var in <list or map>。其中$var表示变量，而list和map表示list类型数据和map类型数据。sass 3.3.0新加入了多字段循环和map数据循环。</p><p>多个字段list数据循环</p><pre><code>//sass style//-------------------------------$animal-data: (puma, black, default),(sea-slug, blue, pointer),(egret, white, move);@each $animal, $color, $cursor in $animal-data &#123;  .#&#123;$animal&#125;-icon &#123;    background-image: url(&#39;/images/#&#123;$animal&#125;.png&#39;);    border: 2px solid $color;    cursor: $cursor;  &#125;&#125;//css style//-------------------------------.puma-icon &#123;  background-image: url(&#39;/images/puma.png&#39;);  border: 2px solid black;  cursor: default; &#125;.sea-slug-icon &#123;  background-image: url(&#39;/images/sea-slug.png&#39;);  border: 2px solid blue;  cursor: pointer; &#125;.egret-icon &#123;  background-image: url(&#39;/images/egret.png&#39;);  border: 2px solid white;  cursor: move; &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> SASS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript篇03--promise</title>
      <link href="/posts/20535.html"/>
      <url>/posts/20535.html</url>
      
        <content type="html"><![CDATA[<p>Promise 是一种异步处理模式。<br>Promise 这种规范，它能帮助开发者用同步的方式，编写异步的代码。<br>再说的直白点，Promise 就是一种对执行结果不确定的一种预先定义，如果成功，就 xxxx；如果失败，就 xxxx，就像事先给出了一些承诺。</p><p>使用 promise 机制的优点如下： 1.可以对函数进行链式调用，所以你不会陷入代码缩进噩梦中； 2.在调用链的过程中，可以保证上一个函数调用完成之后才会调用下一个函数； 3.每一个 then()调用都带有两个参数（两个都是函数）。第一个是成功之后的回调，第二个是出错之后的处理器； 4.如果调用链中出现了错误，错误将会被冒泡传递到其余的错误处理函数中。所以，最终来说，所有错误都可以在任意一个回调函数中进行处理。</p><p>Promise 背后的概念非常简单，有两部分:<br>Deferreds，定义工作单元，<br>Promises，从 Deferreds 返回的数据。<br>基本上，你会用 Deferred 作为通信对象，用来定义工作单元的开始，处理和结束三部分。<br>Promise 是 Deferred 响应数据的输出；它有状态 (等待，执行和拒绝)，以及句柄，或叫做回调函数，反正就是那些在 Promise 执行，拒绝或者提示进程中会被调用的方法。<br>Promise 不同于回调的很重要的一个点是，你可以在 Promise 状态变成执行(resolved)之后追加处理句柄。这就允许你传输数据，而忽略它是否已经被应用获取，然后缓存它，等等之类的操作，因此你可以对数据执行操作，而不管它是否已经或者即将可用。</p><p>$q服务<br>$q 服务是 AngularJS 中自己封装实现的一种 Promise 实现，相对与 Kris Kwal’s Q 要轻量级的多。</p><p>先介绍一下$q 常用的几个方法：<br>1)defer() 创建一个 deferred 对象，这个对象可以执行几个常用的方法，比如 resolve,reject,notify 等.这个对象有 promise 属性。<br>2)all()<br>3)when() 传入一个不确定的参数，如果符合 Promise 标准，就返回一个 promise 对象。</p><p>defer()方法：<br>defer()用于创建一个 deferred 对象，defer.promise 用于返回一个 promise 对象，来定义 then 方法。then 中有三个参数，分别是成功回调、失败回调、状态变更回调。<br>在$q 中，可以使用 resolve 方法，变成完成状态；使用 reject 方法，变成拒绝状态。</p><p>all()方法：<br>$q.all()，允许你等待并行的 promise 处理，当所有的 promise 都被处理结束之后，调用共同的回调。在 Angular 中，这个方法有两种调用方式:以 Array 方式或 Object 方式。Array 方式接收多个 promise，然后在调用.then()的时候使用一个数据结果对象，在结果对象里面包含了所有的 promise 结果，按照输入数组的顺序排列。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">funcA</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'funcA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'hello,funA'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">funcB</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'funcB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">'hello,funB'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>$q<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种方式是接收一个 promise 集合对象，允许你给每个 promise 一个别名，在回调函数中可以使用它们(有更好的可读性)。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$q<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> first<span class="token operator">:</span> <span class="token function">funcA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> second<span class="token operator">:</span> <span class="token function">funcB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">results</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>建议使用数组表示法，如果你只是希望可以批处理结果，就是说，如果你把所有的结果都平等处理。而以对象方式来处理，则更适合需要自注释代码的时候。</p><p>when()方法：<br>如果你想通过一个普通变量创建一个 promise，或者你不清楚你要处理的对象是不是 promise 时非常有用。<br>$q.when()在诸如服务中的缓存这种情况也很好用:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">'myApp'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token string">'MyService'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$q<span class="token punctuation">,</span> MyResource</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cachedSomething<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getSomething</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedSomething<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> $q<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>cachedSomething<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// on first call, return the result of MyResource.get()</span>    <span class="token comment">// note that 'then()' is chainable / returns a promise,</span>    <span class="token comment">// so we can return that instead of a separate promise object</span>    <span class="token keyword">return</span> MyResource<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>$promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">something</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      cachedSomething <span class="token operator">=</span> something<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与这个类似？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">'MyService'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token string">'githubService'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>  <span class="token string">'$q'</span><span class="token punctuation">,</span>  <span class="token string">'$http'</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$q<span class="token punctuation">,</span> $http</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> <span class="token function-variable function">getPullRequests</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> deferred <span class="token operator">=</span> $q<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> promise <span class="token operator">=</span> deferred<span class="token punctuation">.</span>promise<span class="token punctuation">;</span>      <span class="token keyword">var</span> progress<span class="token punctuation">;</span>      $http        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://api.github.com/repos/angular/angular.js/pulls'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            progress <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>            deferred<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span>progress<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          deferred<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          deferred<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> promise<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>      getPullRequests<span class="token operator">:</span> getPullRequests<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后可以这样调用它:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">MyService<span class="token punctuation">.</span><span class="token function">getSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">something</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>something<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 Promise 中，定义了三种状态：等待状态，完成状态，拒绝状态。<br>关于状态有几个规定： 1)状态的变更是不可逆的 2)等待状态可以变成完成或者拒绝</p><p>promise 对象有另外三个方法:.then()，是唯一 Promise 规范要求的方法，用三个回调方法作为参数；一个成功回调，一个失败回调，还有一个状态变化回调。</p><p>$q 在 Promise 规范之上还添加了两个方法: catch()，可以用于定义一个通用方法，它会在 promise 链中有某个 promise 处理失败时被调用。还有 finally()，不管 promise 执行是成功或者失败都会执行。注意，这些不应该和 Javascript 的异常处理混淆或者并用: 在 promise 内部抛出的异常，不会 catch()俘获</p><p>链式 Promise<br>Promise 链会把上一个 then 的返回结果传递给调用链的下一个 then(如果没有就是 undefined)<br>如果 then 回调返回一个 promise 对象，下一个 then 只会在这个 promise 被处理结束的时候调用。<br>在链最后的 catch 为整个链式处理提供一个异常处理点<br>在链最后的 finally 总是会被执行，不管 promise 被处理或者被拒绝，起清理作用</p><p>拦截响应</p><p>Promise 机制还可以做一些非常酷的事情：拦截响应。</p><p>我们已经学过的内容有：向服务端发送请求、处理响应、把响应很好地包装成抽象的东西及处理异步调用。但是在真实的应用中，对于每一次服务端调用，最终还必须做一些通用的操作，例如错误处理、鉴权以及其他安全方面的处理（例如剪裁数据）。</p><p>在深入理解了$q 接口之后，我们就可以使用拦截响应的方式来处理以上所有任务了。响应拦截的机制允许我们在响应到达应用之前对其进行拦截，并在上面进行一些操作，例如转换数据形式、处理错误等所有你能想到的操作。</p><p>下面来看一个例子，它会拦截响应，然后做一些很小的数据转换操作。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//把拦截器注册为一个服务</span>myModule<span class="token punctuation">.</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token string">'myInterceptor'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$q<span class="token punctuation">,</span> notifyService<span class="token punctuation">,</span> errorLog</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promise</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>      <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//什么都不做</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//notify服务将会使用错误信息来刷新UI</span>        <span class="token function">notifyService</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//同时把错误信息打印到控制台，以便调试</span>        <span class="token function">errorLog</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> $q<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//确保我们所创建的拦截器是拦截器链的一部分</span>$httpProvider<span class="token punctuation">.</span>responseInterceptors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'myInterceptor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<br><a href="http://www.cnblogs.com/xing901022/p/4928147.html">AngularJS 中的 Promise — $q 服务详解</a><br><a href="http://www.cnblogs.com/whitewolf/p/promise-best-practice.html">Promise 的前世今生和妙用技巧</a><br><a href="http://my.oschina.net/ilivebox/blog/293771">AngularJS 中的 Promise 和设计模式</a><br><a href="https://github.com/xieranmaya/blog/issues/3">剖析 Promise 内部结构</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack入门</title>
      <link href="/posts/23985.html"/>
      <url>/posts/23985.html</url>
      
        <content type="html"><![CDATA[<h2 id="webpack-简述"><a href="#webpack-简述" class="headerlink" title="webpack 简述"></a>webpack 简述</h2><p>按照<a href="http://webpack.github.io/docs/what-is-webpack.html">webapck 官网</a>所说，webpack 是一个模块打包工具(webpack is a module bundler)。它接收依赖的模块，将其转化为静态资源。</p><p>webpack 与众不同的三大核心概念</p><ol><li><p>Code Spliting</p></li><li><p>Loaders</p></li><li><p>Plugin System</p></li></ol><h2 id="配置-configuration"><a href="#配置-configuration" class="headerlink" title="配置(configuration)"></a><a href="https://webpack.github.io/docs/configuration.html">配置(configuration)</a></h2><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><p>如果使用 CLI，webpack 将会读取 webpack.config.js 文件（或者通过–config 选项传递的文件），这个文件需要暴露这样的配置对象：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// configuration</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常见 CLI option</p><p>1)开发环境简写 -d</p><p>等价于：–debug –devtool source-map –output-pathinfo</p><p>2)生产环境简写 -p</p><p>等价于：–optimize-minimize –optimize-occurrence-order</p><p>3)监视模式 –watch</p><p>4)配置文件 –config example.config.js</p><p>指定新的配置文件，而不是默认的 webpack.config.js</p><p>5)常见的显示选项</p><ul><li><p>–progress</p></li><li><p>–display-chunks</p></li><li><p>–display-reasons</p></li><li><p>–display-error-details</p></li><li><p>–display-modules</p></li><li><p>–display-exclude</p></li></ul><p>可以通过 script 来定义脚本，然后 npm run 命令名。</p><p>** 一个简单的配置对象，注意不是 json，只是简单的 object **</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>context<span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/app"</span><span class="token punctuation">,</span>entry<span class="token operator">:</span> <span class="token string">"./entry"</span><span class="token punctuation">,</span>output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>path<span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/dist"</span><span class="token punctuation">,</span>filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><p>context：根目录（绝对路径!）。可以认为是文件查找的上下文。默认 process.cwd()</p><h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><p>entry：包的入口点，有三种形式</p><ol><li><p>一个 string</p></li><li><p>一个由多个 string 构成的 array</p></li><li><p>一个 object（多页面场景下），key 是 chunk 的 name，value 可以是 string 或者 array</p></li></ol><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><h4 id="output-filename"><a href="#output-filename" class="headerlink" title="output.filename"></a>output.filename</h4><p>不要在这里指定绝对路径</p><p>多入口情况下使用占位符</p><ul><li><p>[name] 模块名称</p></li><li><p>[hash] 模块编译后的（整体）Hash 值</p></li><li><p>[chunkhash] 分片的 Hash 值,可以认为是文件的版本号，也可以认为是文件的 MD5 值，在静态资源的版本管理中非常有用</p></li></ul><h4 id="output-path"><a href="#output-path" class="headerlink" title="output.path"></a>output.path</h4><h4 id="output-publicPath"><a href="#output-publicPath" class="headerlink" title="output.publicPath"></a>output.publicPath</h4><p>指定 public URL 地址，当我们要将 output 的文件放在不同的域名或者 CDN 上时十分有用</p><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><p>module.loaders 一个自动应用的 loaders 的数组，每项（item）可以有这些属性：</p><ul><li><p>test: A condition that must be met</p></li><li><p>exclude: A condition that must not be met</p></li><li><p>include: An array of paths or files where the imported files will be transformed by the loader</p></li><li><p>loader: A string of “!” separated loaders</p></li><li><p>loaders: An array of loaders as string</p></li></ul><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><h4 id="resolve-alias"><a href="#resolve-alias" class="headerlink" title="resolve.alias"></a>resolve.alias</h4><p>模块别名定义，方便后续直接引用别名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">resolve<span class="token operator">:</span> <span class="token punctuation">&#123;</span>alias<span class="token operator">:</span> <span class="token punctuation">&#123;</span> AppStore <span class="token operator">:</span> <span class="token string">'js/stores/AppStores.js'</span><span class="token punctuation">,</span><span class="token comment">//之后直接 require('AppStore')</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="resolve-root"><a href="#resolve-root" class="headerlink" title="resolve.root"></a>resolve.root</h4><p>包含你模块的目录（绝对路径），也可以是一个目录数组，这个设置应该被用于添加个人目录到 webpack 查找路径里</p><p>必须是个绝对路径，不要这样写./app/modules</p><h4 id="resolve-modulesDirectories"><a href="#resolve-modulesDirectories" class="headerlink" title="resolve.modulesDirectories"></a>resolve.modulesDirectories</h4><p>这是一个目录数组，用来解析到当前目录以及祖先目录和查找模块。这个函数的工作原理和 node 如何查找 node_modules 目录很像。比如如果值为[“mydir”]，webpack 会查找“./mydir”, “../mydir”, “../../mydir”等等</p><p>默认: [“web_modules”, “node_modules”]</p><h4 id="resolve-extensions"><a href="#resolve-extensions" class="headerlink" title="resolve.extensions"></a>resolve.extensions</h4><p>一个用来解析模块的拓展名数组。比如，为了发现一个 CoffeeScript 文件，你的数组里应该包含字符串”.coffee”</p><p>默认: [“”, “.webpack.js”, “.web.js”, “.js”]</p><p><strong>注意：设置这个选项将会重写默认值</strong></p><h3 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h3><p>指定不该被 webpack 打包的模块，但是在打包后的包中仍然保留了请求。</p><p>我们可以通过它来暴露全局变量，而在需要的文件中直接 require 或 import 就可以了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">externals<span class="token operator">:</span> <span class="token punctuation">&#123;</span>  jquery<span class="token operator">:</span> <span class="token string">'jQuery'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>给编译器添加额外的插件</p><h2 id="各种-loaders"><a href="#各种-loaders" class="headerlink" title="各种 loaders"></a>各种 loaders</h2><p>webpack 可以使用 loader 来预处理文件。这允许你打包除 JavaScript 之外的任何静态资源。你可以使用 Node.js 来很简单地编写自己的 loader。</p><p>loader 的使用有三种方法，分别是：</p><ul><li><p>在 require 中显式指定，即上面看到的用法</p></li><li><p>在配置项（webpack.config.js）中指定</p></li><li><p>在命令行中指定</p><p>1)<a href="https://www.npmjs.com/package/babel-loader">babel-loader</a></p></li></ul><p>转换 ES6 语法或 React 语法</p><p>通过 presets 选择 ES6 特性，也可以在 package.json 中指定</p><p>解决 babel-loader 处理 React 的 preset 问题：npm i –save-dev babel-preset-react</p><p>2)css 相关</p><ul><li><p>style-loader 将模块的导出作为样式添加到 DOM 中</p></li><li><p>css-loader 解析 CSS 文件后，使用 import 加载，并且返回 CSS 代码,可以在 loader 后面?modules 以支持<a href="https://github.com/css-modules/css-modules">CSS Module</a></p></li><li><p>less-loader 加载和转译 LESS 文件</p></li><li><p>sass-loader 加载和转译 SASS/SCSS 文件，须先安装 node-sass，windows 可能安装出错，使用 cnpm i node-sass –save-dev 或者如下：</p><p>npm install –save-dev node-sass –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> –disturl=<a href="https://npm.taobao.org/dist">https://npm.taobao.org/dist</a> –sass-binary-site=<a href="http://npm.taobao.org/mirrors/node-sass">http://npm.taobao.org/mirrors/node-sass</a></p></li><li><p>postcss-loader 使用 PostCSS 加载和转译 CSS/SSS 文件，可以进行 autoprefixer</p></li></ul><p>CSS 中@import 另一个 CSS 怎么处理？（非 SASS、LESS）</p><p>给 css-loader 添加参数</p><pre><code>loader: &#39;style-loader!css-loader?importLoaders=1!postcss-loader&#39;</code></pre><p>3)模板相关</p><ul><li><p>html-loader 导出 HTML 为字符串，需要引用静态资源</p></li><li><p>jade-loader 加载 Jade 模板并返回一个函数</p></li><li><p>markdown-loader 将 Markdown 转译为 HTML</p></li><li><p>handlebars-loader 将 Handlebars 转换为 HTML</p></li><li><p>ejs-loader 将 underscore 模板转换为 HTML</p><p>4)图片相关</p></li><li><p>file-loader</p></li><li><p>url-loader 与 file-loader，但如果文件小于限制，可以返回 data URL</p></li><li><p>image-loader 压缩图片</p></li></ul><p>components 模板引用相对路径图片不会替换？</p><p>可以使用绝对路径或者这样写 src=”${require(‘../../assets/bg.png’)}”</p><p>5)bundle-loader</p><p>bundle-loader 是一个用来在运行时异步加载模块的 loader。可以用来做代码分割</p><p>6)exports-loader</p><p>可以从模块中导出变量。</p><p>在实际使用中，用 exports-loader 最多的场景是将某些不支持模块化规范的模块所声明的全局变量作为模块内容导出。<br>如下可以导出全局变量 Hello，exports-loader 还可以支持同时导出多个变量，例如 exports?HELLO,WORLD</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  module<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    loaders<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> test<span class="token operator">:</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./hello'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loader<span class="token operator">:</span> <span class="token string">'exports?Hello'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7)imports-loaders</p><p>用于向一个模块的作用域内注入变量（Can be used to inject variables into the scope of a module）</p><p>8)expose-loader</p><p>把一个模块导出并付给一个全局变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'expose?libraryName!./file.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Exposes the exports for file.js to the global context on property "libraryName".</span><span class="token comment">// In web browsers, window.libraryName is then available.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="各种-plugins"><a href="#各种-plugins" class="headerlink" title="各种 plugins"></a>各种 plugins</h2><p>1)<a href="https://github.com/jantimon/html-webpack-plugin#configuration">HtmlWebpackPlugin</a></p><p>参数：</p><ul><li><p>template html 模板地址，默认为 webpack.config.js 所在的目录</p></li><li><p>inject 插入位置</p></li><li><p>title</p></li><li><p>date 等</p><p>2)CommonsChunkPlugin</p></li></ul><p>将多个入口起点之间共享的公共模块，生成为一些 chunk，并且分离到单独的 bundle 中，例如，1vendor.bundle.js 和 app.bundle.js</p><p>3)ExtractTextWebpackPlugin</p><p>从 bundle 中提取文本（CSS）到分离的文件（app.bundle.css）</p><p>4)ProvidePlugin</p><p>ProvidePlugin 可以将模块作为一个变量，被 webpack 在其他每个模块中引用。只有你需要使用此变量的时候，这个模块才会被 require 进来。多数之前遗留的模块，会依赖于已存在的某些特定全局变量，比如 jQuery 插件中的$或者jQuery。在这种场景，你可以在每次遇到全局标识符$的时候，在 webpack 中预先设置 var $ = require(“jquery”)。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>ProvidePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      $<span class="token operator">:</span> <span class="token string">'jquery'</span><span class="token punctuation">,</span>      jQuery<span class="token operator">:</span> <span class="token string">'jquery'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Environment-flags"><a href="#Environment-flags" class="headerlink" title="Environment flags"></a>Environment flags</h2><p>windows 下使用 cross-env 的 npm 包兼容处理，可以在 package.json 设置如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"clear"</span><span class="token operator">:</span> <span class="token string">"rm -rf build&amp;&amp; mkdir build"</span><span class="token punctuation">,</span><span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"npm run clear&amp;&amp; cross-env NODE_ENV=development webpack-dev-server --host 0.0.0.0 --devtool eval --progress --color --profile"</span><span class="token punctuation">,</span><span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"npm run clear&amp;&amp; cross-env NODE_ENV=production webpack -p --progress"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>webpack.config.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> isProduction <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">;</span>plugins<span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'process.env'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token constant">NODE_ENV</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">||</span> <span class="token string">'development'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Code-splitting（代码分割）"><a href="#Code-splitting（代码分割）" class="headerlink" title="Code splitting（代码分割）"></a>Code splitting（代码分割）</h2><p>使用 require.ensure</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span>require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> content <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;h1>'</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">'&lt;/h1>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// a.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>require.ensure 告诉 Webpack，./a.js 应该从 bundle.js 分离并且打包成一个单独的文件</p><p><strong>注意 require.ensure 只会加载模块而不会去解析</strong></p><p>也可以用 bundle-loader 进行代码分割</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span><span class="token comment">// Now a.js is requested, it will be bundled into another file</span><span class="token keyword">var</span> load <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'bundle-loader!./a.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// To wait until a.js is available (and get the exports)</span><span class="token comment">//  you need to async wait for it.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  document<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;h1>'</span> <span class="token operator">+</span> file <span class="token operator">+</span> <span class="token string">'&lt;/h1>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vendor-chunk"><a href="#vendor-chunk" class="headerlink" title="vendor chunk"></a>vendor chunk</h2><p>可以用 CommonsChunkPlugin 插件将公共库(vendor)打包成一个单独的文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  entry<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    app<span class="token operator">:</span> <span class="token string">'./main.js'</span><span class="token punctuation">,</span>    vendor<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'jquery'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    filename<span class="token operator">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span>      <span class="token comment">/* chunkName= */</span> <span class="token string">'vendor'</span><span class="token punctuation">,</span>      <span class="token comment">/* filename= */</span> <span class="token string">'vendor.js'</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模块热替换-Hot-Module-Replacement"><a href="#模块热替换-Hot-Module-Replacement" class="headerlink" title="模块热替换(Hot Module Replacement)"></a>模块热替换(Hot Module Replacement)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i webpack-dev-server --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://segmentfault.com/a/1190000003872635">配置</a></p><h2 id="主要参考资料"><a href="#主要参考资料" class="headerlink" title="主要参考资料"></a>主要参考资料</h2><p><a href="https://webpack.github.io/docs/">webpack 官方文档</a></p><p><a href="https://github.com/ruanyf/webpack-demos">阮一峰 webpack 教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web组件开发入门</title>
      <link href="/posts/22329.html"/>
      <url>/posts/22329.html</url>
      
        <content type="html"><![CDATA[<p>本文是学习慕课网<a href="http://www.imooc.com/learn/99">阿当大话西游之 WEB 组件</a>后的一个总结。</p><h2 id="组件的分类"><a href="#组件的分类" class="headerlink" title="组件的分类"></a>组件的分类</h2><p>1 框架组件：依赖于某种框架的组件</p><p>2 定制组件：根据公司业务定制的组件</p><p>3 独立组件：不依赖框架的组件</p><h2 id="定义和加载组件"><a href="#定义和加载组件" class="headerlink" title="定义和加载组件"></a>定义和加载组件</h2><h3 id="解决-css-和-js-命名冲突"><a href="#解决-css-和-js-命名冲突" class="headerlink" title="解决 css 和 js 命名冲突"></a>解决 css 和 js 命名冲突</h3><p>css：通过加前缀来形成命名空间，不要用子孙选择器</p><p>js：通过匿名函数自执行来隐藏变量，通过给 window 添加属性来暴露全局变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> abc <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">TabView</span><span class="token punctuation">(</span><span class="token parameter">cfg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> cfg<span class="token punctuation">.</span>a<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> cfg<span class="token punctuation">.</span>b<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">TabView</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">c</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      abc<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">d</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      abc<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  window<span class="token punctuation">.</span>TabView <span class="token operator">=</span> TabView<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件的依赖关系"><a href="#组件的依赖关系" class="headerlink" title="组件的依赖关系"></a>组件的依赖关系</h3><p>传统通过 script 标签引入组件的问题：</p><p>1 需手动处理组件间的依赖关系</p><p>2 加载项太多，破坏页面的整洁度</p><p>如何解决：使用 require.js</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="如何定制皮肤"><a href="#如何定制皮肤" class="headerlink" title="如何定制皮肤"></a>如何定制皮肤</h3><p>通过 cfg 设置一个 skinClassName 参数来给容器添加 class 来控制皮肤</p><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>简单回调的问题</p><p>1）只能绑定一个回调</p><p>2）回调的绑定时间和组件的实例化时间耦合在一起</p><p>如果相对独立的多个功能模块都需要绑定组件的同一事件，怎么办？</p><p>自定义事件本质：观察者模式</p><p>优点：跳出原生事件的限制，提高封装的抽象层级</p><h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p>return this</p><h2 id="Widget-类"><a href="#Widget-类" class="headerlink" title="Widget 类"></a>Widget 类</h2><p>原生 function 类的问题</p><p>1）所有类继承自 object</p><p>2）Object 提供的帮助太少了</p><p>组件分类：</p><p>Utility：与 UI 无关</p><p>Widget：与 UI 有关</p><h3 id="为-Widget-类添加统一的生命周期"><a href="#为-Widget-类添加统一的生命周期" class="headerlink" title="为 Widget 类添加统一的生命周期"></a>为 Widget 类添加统一的生命周期</h3><h2 id="更高级的内容"><a href="#更高级的内容" class="headerlink" title="更高级的内容"></a>更高级的内容</h2><p>组件的 MVC</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flexbox学习总结</title>
      <link href="/posts/7684.html"/>
      <url>/posts/7684.html</url>
      
        <content type="html"><![CDATA[<h2 id="flex-语法"><a href="#flex-语法" class="headerlink" title="flex 语法"></a>flex 语法</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 main start，结束位置叫做 main end；交叉轴的开始位置叫做 cross start，结束位置叫做 cross end。</p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做 main size，占据的交叉轴空间叫做 cross size。</p><h3 id="容器上的属性"><a href="#容器上的属性" class="headerlink" title="容器上的属性"></a>容器上的属性</h3><p>以下 6 个属性设置在容器上：<br>flex-direction<br>flex-wrap<br>flex-flow<br>justify-content<br>align-items<br>align-content</p><p>flex-direction：flex-direction 属性决定主轴的方向（即项目的排列方向）。</p><pre><code>row(默认) | row-reverse | column | column-reverse</code></pre><p>flex-wrap：默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap 属性定义，如果一条轴线排不下，如何换行。</p><pre><code>nowrap(默认) | wrap | wrap-reverse</code></pre><p>flex-flow：flex-flow 属性是 flex-direction 属性和 flex-wrap 属性的简写形式，默认值为 row nowrap</p><p>justify-content：justify-content 属性定义了项目在主轴上的对齐方式。</p><pre><code>flex-start | flex-end | center | space-between | space-around</code></pre><p>align-items 属性：align-items 属性定义项目在交叉轴上如何对齐。</p><pre><code>flex-start | flex-end | center | baseline | stretch</code></pre><p>align-content：align-content 属性定义了多根轴线在交叉轴上的对齐方式。如果项目只有一根轴线，该属性不起作用</p><pre><code>flex-start | flex-end | center | space-between | space-around | stretch</code></pre><h3 id="项目上的属性"><a href="#项目上的属性" class="headerlink" title="项目上的属性"></a>项目上的属性</h3><p>以下 6 个属性设置在项目上：</p><pre><code>orderflex-growflex-shrinkflex-basisflexalign-self</code></pre><p>order：order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</p><p>flex-grow：flex-grow 属性定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。</p><p>如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间（如果有的话）。如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p><p>flex-shrink：flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</p><p>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</p><p>flex-basis：flex-basis 属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为 auto，即项目的本来大小。</p><pre><code>flex-basis: &lt;length&gt; | auto; /* default auto */</code></pre><p>它可以设为跟 width 或 height 属性一样的值（比如 350px），则项目将占据固定空间。</p><p>flex：flex 属性是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选。</p><p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</p><p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p><p>align-self：align-self 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。默认值为 auto，表示继承父元素的 align-items 属性，如果没有父元素，则等同于 stretch。</p><pre><code>align-self: auto | flex-start | flex-end | center | baseline | stretch</code></pre><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>网格布局</p><p>1 基本网格布局</p><p>最简单的网格布局，就是平均分布。item 设置 flex:1 即可</p><pre><code>.Grid &#123;  display: flex;&#125;.Grid-cell &#123;  flex: 1;&#125;</code></pre><p>2 百分比布局</p><p>某个网格的宽度为固定的百分比，其余网格平均分配剩余的空间。</p><p>给需要百分比的 item 设置 width: 百分比;或 flex: 0 0 百分比;，自动分配的 item 设置 flex: 1;</p><p>3 圣杯布局</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;description&quot; content=&quot;flex 圣杯布局&quot;&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;  &lt;title&gt;JS Bin&lt;/title&gt;&lt;/head&gt;&lt;body class=&quot;HolyGrail&quot;&gt;  &lt;header&gt;header&lt;/header&gt;  &lt;div class=&quot;HolyGrail-body&quot;&gt;    &lt;main class=&quot;HolyGrail-content&quot;&gt;content&lt;/main&gt;    &lt;nav class=&quot;HolyGrail-nav&quot;&gt;left nav&lt;/nav&gt;    &lt;aside class=&quot;HolyGrail-ads&quot;&gt;right ad&lt;/aside&gt;  &lt;/div&gt;  &lt;footer&gt;footer&lt;/footer&gt;&lt;/body&gt;&lt;/html&gt;*&#123;  margin: 0;&#125;.HolyGrail &#123;  display: flex;  min-height: 100vh;  flex-direction: column;  text-align: center;&#125;header,footer &#123;  flex: 0 0 40px;  background-color: #ccc;&#125;.HolyGrail-body &#123;  display: flex;  flex: 1;&#125;.HolyGrail-content &#123;  flex: 1;  background-color: #0f0;&#125;.HolyGrail-nav, .HolyGrail-ads &#123;  /* 两个边栏的宽度设为12em */  flex: 0 0 12em;  background-color: #00f;&#125;.HolyGrail-nav &#123;  /* 导航放到最左边 */  order: -1;  background-color: #f00;&#125;</code></pre><p><a href="https://jsbin.com/lusunofase/1/edit?html,css,output">查看 demo</a></p><p>如果是小屏幕，躯干的三栏自动变为垂直叠加。</p><pre><code>@media (max-width: 768px) &#123;  .HolyGrail-body &#123;    flex-direction: column;    flex: 1;  &#125;  .HolyGrail-nav,  .HolyGrail-ads,  .HolyGrail-content &#123;    flex: auto;  &#125;&#125;</code></pre><p>4 流式布局</p><p>每行的项目数固定，会自动分行。</p><pre><code>.parent &#123;  width: 200px;  height: 150px;  background-color: black;  display: flex;  flex-flow: row wrap;  align-content: flex-start;&#125;.child &#123;  box-sizing: border-box;  background-color: white;  flex: 0 0 25%;  height: 50px;  border: 1px solid red;&#125;</code></pre><p>兼容</p><pre><code>*在旧版的规范中，使用比例伸缩布局时，子元素的内容长短不同会导致无法“等分”，这个时候，我们需要给子元素设置一个“width:0%”来解决问题。*不要给flexbox里的子元素设置“margin:auto”的属性，在部分安卓机下，它会导致该元素的宽度撑开到100%占位</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>css tricks 上的<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">A Complete Guide to Flexbox</a></p><p>阮一峰的<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程：语法篇</a></p><p>腾讯 ISUX 的<a href="https://isux.tencent.com/flexbox.html">移动端全兼容的 flexbox 速成班</a></p><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">更多参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webstorm入门</title>
      <link href="/posts/31473.html"/>
      <url>/posts/31473.html</url>
      
        <content type="html"><![CDATA[<h2 id="主题和配色"><a href="#主题和配色" class="headerlink" title="主题和配色"></a>主题和配色</h2><p><a href="https://github.com/OtaK/jetbrains-monokai-sublime">sublime 主题</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置分类</p><p>webstorm 的配置分为项目配置和全局配置，在打开一个项目的时候，会在项目根目录生成.idea 的隐藏文件夹，这个文件夹里保存的就是项目配置，而全局配置保存在文档目录，全局配置都可以导出。</p><p>通过 file &gt; settings 打开配置窗口</p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><p>1 插件配置：Plugins</p><p>2 SVN、github 配置：Version Control</p><p>3 文件模板配置: Editor &gt; File and Code Templates</p><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>1 SVN、Git 配置</p><p>SVN 使用的是命令行工具，因此在 windows 下需要额外安装 svn 命令行软件，<a href="http://subversion.apache.org/packages.html#windows">地址</a>,通过这种方法暂时不能使用 1.9 format，只能使用更低的如 1.8 format。其实在安装了 TortoiseSVN 时，只要把 subversion &gt; general 的所有勾去掉即可。</p><p>配置 github 的最后会弹出输入保存用户名和密码的数据进行密码保护的确认，建议点击 cancel 即可。</p><p>2 项目文件夹标记配置</p><p>在开发的时候，常常资源等信息并不是指向根目录，在书写资源路径的时候提示是不正确的，这时候就需要配置文件夹功能了。打开 Project &gt; Directories 里打开</p><p>绿色的为测试目录，红色的为排除目录，蓝色的为资源根目录。设置 docs 和 node_modules 排除目录</p><p>3 项目代码检查</p><p>打开 Languages and Frameworks &gt; JavaScript &gt; Code Quality Tolls &gt; JSHint 启用，默认配置即可。</p><p>4 CSS 预处理语言的预编译、JS 实时压缩</p><p>有了 webstorm，基本不需要 grunt、gulp 等前端开发辅助工具了，webstorm 内置的文件监听，可以完成常用的功能，如 CSS 预处理语言的预编译、JS 的实时压缩等。</p><p>打开 Tools &gt; File Watchers，然后点击右边的加号开始新建即可</p><p>5 项目脚本库</p><p>打开 Languages and Frameworks &gt; JavaScript &gt; Libraries</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>ctrl+/ 单行注释</p><p>ctrl+shift+/ 块注释</p><p>ctrl+shift+ +/- 展开/折叠</p><p>ctrl+alt+L 格式化代码</p><p>ctrl+shift+ up/down 上下移动句子</p><p>Alt+回车 导入包,自动修正</p><p>Ctrl+N 查找类</p><p>Ctrl+Shift+N 查找文件</p><p>Ctrl+Alt+L 格式化代码</p><p>Ctrl+Alt+O 优化导入的类和包</p><p>Alt+Insert 生成代码(如 get,set 方法,构造函数等)</p><p>Ctrl+E 或者 Alt+Shift+C 最近更改的代码</p><p>Ctrl+R 替换文本</p><p>Ctrl+F 查找文本</p><p>Ctrl+Shift+Space 自动补全代码</p><p>Ctrl+空格 代码提示</p><p>Ctrl+Alt+Space 类名或接口名提示</p><p>Ctrl+P 方法参数提示</p><p>Ctrl+Shift+Alt+N 查找类中的方法或变量</p><p>Alt+Shift+C 对比最近修改的代码</p><p>Shift+F6 重构-重命名</p><p>Ctrl+Shift+先上键</p><p>Ctrl+X 删除行</p><p>Ctrl+D 复制行</p><p>Ctrl+/ 或 Ctrl+Shift+/ 注释（// 或者/<em>…</em>/ ）</p><p>Ctrl+J 自动代码</p><p>Ctrl+E 最近打开的文件</p><p>Ctrl+H 显示类结构图</p><p>Ctrl+Q 显示注释文档</p><p>Alt+F1 查找代码所在位置</p><p>Alt+1 快速打开或隐藏工程面板</p><p>Alt+2 快速打开或隐藏 favorites</p><p>Ctrl+Alt+ left/right 返回至上次浏览的位置</p><p>Alt+ left/right 切换代码视图</p><p>Alt+ Up/Down 在方法间快速移动定位</p><p>Ctrl+Shift+Up/Down 代码向上/下移动。</p><p>F2 或 Shift+F2 高亮错误或警告快速定位</p><p>代码标签输入完成后，按 Tab，生成代码。</p><p>选中文本，按 Ctrl+Shift+F7 ，高亮显示所有该文本，按 Esc 高亮消失。</p><p>Ctrl+W 选中代码，连续按会有其他效果</p><p>选中文本，按 Alt+F3 ，逐个往下查找相同文本，并高亮显示。</p><p>Ctrl+Up/Down 光标跳转到第一行或最后一行下</p><p>Ctrl+B 快速打开光标处的类或方法</p><p>参考：</p><p><a href="http://frontenddev.org/article/webstorm-portal-2-configuration.html">webstorm 入门 2-配置</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> webstorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery插件开发入门</title>
      <link href="/posts/14775.html"/>
      <url>/posts/14775.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>jQuery 插件开发包括两种：</p><ol><li><p>给 jQuery 添加静态方法</p></li><li><p>给 jQuery 的原型添加方法</p></li></ol><h2 id="给-jQuery-添加静态方法"><a href="#给-jQuery-添加静态方法" class="headerlink" title="给 jQuery 添加静态方法"></a>给 jQuery 添加静态方法</h2><ol><li>直接添加新的全局函数</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">jQuery<span class="token punctuation">.</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'This is a test. This is only a test.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用 jQuery.extend(object)</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">jQuery<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'This is a test. This is only a test.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">bar</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">param</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'This function takes a parameter, which is "'</span> <span class="token operator">+</span> param <span class="token operator">+</span> <span class="token string">'".'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于一些全局配置的插件，可以在插件中进行调用，这样直接引用插件 javascript 即可，不用再调用</p><h2 id="给-jQuery-的原型添加方法"><a href="#给-jQuery-的原型添加方法" class="headerlink" title="给 jQuery 的原型添加方法"></a>给 jQuery 的原型添加方法</h2><p>这是插件开发中最常用的一种方法</p><h3 id="最简单的形式"><a href="#最简单的形式" class="headerlink" title="最简单的形式"></a>最简单的形式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">pluginName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// code</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><p>在插件函数的立即作用域中，关键字 this 指向调用插件的 jQuery 对象，不需要再用$包裹</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">pluginName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 没有必要再写$(this)，因为"this"就是jQuery对象</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="保持链式调用"><a href="#保持链式调用" class="headerlink" title="保持链式调用"></a>保持链式调用</h3><p>为了保持链式调用，插件请 return this。</p><h3 id="设置默认参数并将之暴露出来"><a href="#设置默认参数并将之暴露出来" class="headerlink" title="设置默认参数并将之暴露出来"></a>设置默认参数并将之暴露出来</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">pluginName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> opts <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>hilight<span class="token punctuation">.</span>defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>pluginName<span class="token punctuation">.</span>defaults <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    foo<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样用户既可以用过传参也可以通过修改$.fn.pluginName.defaults 来修改默认参数</p><h3 id="暴露一些公有函数"><a href="#暴露一些公有函数" class="headerlink" title="暴露一些公有函数"></a>暴露一些公有函数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">pluginName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> opts <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>pluginName<span class="token punctuation">.</span>defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>pluginName<span class="token punctuation">.</span>defaults <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    foo<span class="token operator">:</span> <span class="token string">'bar'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>pluginName<span class="token punctuation">.</span><span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">'bar'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样用户既可以调用公有函数，也可以去修改它。</p><h3 id="更安全的闭包写法"><a href="#更安全的闭包写法" class="headerlink" title="更安全的闭包写法"></a>更安全的闭包写法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$<span class="token punctuation">,</span> window<span class="token punctuation">,</span> document<span class="token punctuation">,</span> <span class="token keyword">undefined</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">pluginName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// code</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">,</span> window<span class="token punctuation">,</span> document<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加上“;”是为了防止插件之前代码没有“;”引发的错误，加上 window 和 document 是这样 window 等系统变量在插件内部就有了一个局部的引用，可以提高访问速度，同时内部也可以压缩这些变量，undefined 是为了防止他人误修改 undefined 引发插件 bug。</p><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>以下出自网友的<a href="http://www.ghugo.com/javascript-writing-better-jquery-plugins/">博客</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> Plugin<span class="token punctuation">,</span> privateMethod<span class="token punctuation">;</span> <span class="token comment">//插件的私有方法</span>  <span class="token comment">/**   * 这里是一个自运行的单例模式。   *   */</span>  Plugin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 插件实例化部分，初始化时调用的代码可以放这里     */</span>    <span class="token keyword">function</span> <span class="token function">Plugin</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//将插件的默认参数及用户定义的参数合并到一个新的obj里</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>settings <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//将dom jquery对象赋值给插件，方便后续调用</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$element <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 插件的公共方法，相当于接口函数，用于给外部调用     */</span>    <span class="token class-name">Plugin</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doSomething</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/**       * 方法内容       */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Plugin<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 插件的私有方法   */</span>  <span class="token function-variable function">privateMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 这里是关键   * 定义一个插件 plugin   */</span>  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">plugin</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> instance<span class="token punctuation">;</span>    instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     *判断插件是否已经实例化过，如果已经实例化了则直接返回该实例化对象     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将实例化后的插件缓存在dom结构里（内存里）</span>        <span class="token keyword">return</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">'plugin'</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Plugin</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token comment">/**     * 优雅处： 如果插件的参数是一个字符串，则 调用 插件的 字符串方法。     * 如 $('#id').plugin('doSomething') 则实际调用的是 $('#id).plugin.doSomething();     * doSomething是刚才定义的接口。     * 这种方法 在 juqery ui 的插件里 很常见。     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> instance<span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 插件的默认值   */</span>  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>plugin<span class="token punctuation">.</span>defaults <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    property1<span class="token operator">:</span> <span class="token string">'value'</span><span class="token punctuation">,</span>    property2<span class="token operator">:</span> <span class="token string">'value'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">/**   * 优雅处： 通过data-xxx 的方式 实例化插件。   * 这样的话 在页面上就不需要显示调用了。   */</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Plugin</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'[data-plugin]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.learningjquery.com/2007/10/a-plugin-development-pattern">A Plugin Development Pattern</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript常见封装方法</title>
      <link href="/posts/48038.html"/>
      <url>/posts/48038.html</url>
      
        <content type="html"><![CDATA[<p>1.最简单的，使用变量，然后用匿名函数包裹，不封装</p><p>2.对象字面量简单封装（不完整的模块模式，因为无法达到变量、方法私有效果。不过确实有分离和组织代码的能力，也就算一种简略的模块模式的实现方式）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> Carousel <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">bind</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">showPre</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">showNext</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.原型构造器模式封装</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Carousel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Carousel</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">init</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">bind</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">showPre</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">showNext</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.模块模式与原型构造器模式绑定多个：使用一个数组保存实例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> CarouselCenter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> carouselList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">$carousel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    $carousel<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> $cal <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>$cal<span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'init'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      carouselList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Carousel</span><span class="token punctuation">(</span>$cal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      $cal<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'init'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> carouselList<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">Carousel</span><span class="token punctuation">(</span><span class="token parameter">$carousel</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">Carousel</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">bind</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$pre<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        _this<span class="token punctuation">.</span><span class="token function">showPre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$next<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        _this<span class="token punctuation">.</span><span class="token function">showNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">showPre</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$ct<span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$ct<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$ct<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imgWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$ct<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> left<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">showNext</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> $ct <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$ct<span class="token punctuation">;</span>      $ct<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> left<span class="token operator">:</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imgWidth <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        $ct<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$ct<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $ct<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    init<span class="token operator">:</span> init<span class="token punctuation">,</span>    getList<span class="token operator">:</span> getList<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 调用</span><span class="token comment">// CarouselCenter.init($('#c1'))</span><span class="token comment">// CarouselCenter.init($('#c2'))</span><span class="token comment">// CarouselCenter.init($('#c2')) //不会重复绑定</span><span class="token comment">// CarouselCenter.init($('.carousel'))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.通用写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">window<span class="token punctuation">,</span> $</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">Carousel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">Carousel</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  window<span class="token punctuation">.</span>Carousel <span class="token operator">=</span> Carousel<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> jQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps:</p><p>模式目的：编写易于维护的代码，其中一个最重要方面是能够找到代码中重复出现的主题并优化它们。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js高级程序设计学习之高级函数</title>
      <link href="/posts/31836.html"/>
      <url>/posts/31836.html</url>
      
        <content type="html"><![CDATA[<h2 id="安全的类型检测"><a href="#安全的类型检测" class="headerlink" title="安全的类型检测"></a>安全的类型检测</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Array]'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object Function]'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//检测原生JSON对象</span><span class="token keyword">function</span> <span class="token function">isRegExp</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object RegExp]'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> isNativeJson <span class="token operator">=</span>  window<span class="token punctuation">.</span><span class="token constant">JSON</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object JSON]'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过要注意 Object.prototype.toString 本身可能被改写。</p><h2 id="作用域安全的构造函数"><a href="#作用域安全的构造函数" class="headerlink" title="作用域安全的构造函数"></a>作用域安全的构造函数</h2><p>当使用 new 调用构造函数时，构造函数内用到的 this 对象会指向新创建的对象实例，如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'oliver'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题是当没有使用 new 操作符，直接调用构造函数，this 会映射到全局对象 window 上，导致错误对象属性的意外增加：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">'oliver'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//oliver</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决办法是创建一个作用域安全的构造函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果this是Person的实例</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//否则调用new操作符</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">'oliver'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//oliver</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'troy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//troy</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，如果使用构造函数窃取模式的继承且不实用原型链，那么这个继承很可能被破坏如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果this是Person的实例</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//否则调用new操作符</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">'Oliver'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合使用原型链或者寄生组合则可以解决这个问题：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果this是Person的实例</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//否则调用new操作符</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">Person</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">People</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关键点</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">'Oliver'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Oliver</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="惰性载入函数"><a href="#惰性载入函数" class="headerlink" title="惰性载入函数"></a>惰性载入函数</h2><p>惰性函数表示函数执行的分支仅会发生一次。有两种实现惰性载入函数的方式，第一种就是在函数被调用时在处理函数。在第一次调用的过程中，该函数被覆盖为另一个按合适方式执行的函数，这样任何对原函数的调用就不用再经过执行的分支了。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> XMLHttpRequest <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">createXHR</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//关键点</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ActiveXObject <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">createXHR</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//关键点</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'MSXML2.XMLHttp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">createXHR</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//关键点</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'No XHR object available.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">createXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关键点</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种实现惰性载入函数的方式就是在声明函数时就指定适当的函数。这样，第一次调用函数时就不会损失性能了，而在代码首次加载时会损失一些性能。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> createXHR <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> XMLHttpRequest <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//关键点</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ActiveXObject <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//关键点</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'MSXML2.XMLHttp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//关键点</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'No XHR object available.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子中使用的技巧是创建一个匿名、自执行的函数，用以确定应该使用哪一个函数实现。</p><h2 id="函数绑定"><a href="#函数绑定" class="headerlink" title="函数绑定"></a>函数绑定</h2><p>函数绑定要创建一个函数，可以在特定的 this 环境中以指定参数调用另一个函数。该技巧常常和回调函数与事件处理程序一起使用， 以便在将函数作为变量传递的同时保留代码的执行环境。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  message<span class="token operator">:</span> <span class="token string">'Event handled'</span><span class="token punctuation">,</span>  <span class="token function-variable function">handleClick</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>handler<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> handler<span class="token punctuation">.</span>handleClick<span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> btn1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'my-btn1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> handler<span class="token punctuation">.</span>handleClick<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> btn2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'my-btn2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn2<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>  <span class="token string">'click'</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    handler<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>btn1 点击后显示 undefined，btn2 利用闭包来修正这个问题</p><p>由于代码之中存在着 this 变量，而 this 在当前环境下指向确定的对象，但是当更改代码的执行环境时，就会出现问题了。为了解决这个问题， javascript 函数库中实现了一个 bind() 函数来解决这个问题。</p><p>一个简单的 bind() 函数接收一个函数和一个环境， 并返回一个在给定环境中调用给定函数的函数， 并且将所有参数原封不动传递过去。 语法如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里使用的 arguments 并不是 bind() 的， 是内部函数的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  message<span class="token operator">:</span> <span class="token string">'Event handled'</span><span class="token punctuation">,</span>  <span class="token function-variable function">handleClick</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'my-btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token function">bind</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span>handleClick<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ECMAScript5 为所有函数定义了一个原生的 bind() 方法， 进一步简化了操作。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  message<span class="token operator">:</span> <span class="token string">'Event handled'</span><span class="token punctuation">,</span>  <span class="token function-variable function">handleClick</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'my-btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> handler<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它们主要用于事件处理程序以及 setTimeout() 和 setInterval()。 然而被绑定函数与普通函数相比有更多的开销， 它们需要更多内存， 同时也因为多重函数调用稍微慢一些， 所以最好只在必要时使用。</p><h2 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h2><p>它用于创建已经设置好了一个或多个参数的函数。 函数柯里化的基本方法是： 使用一个闭包返回一个函数。 当函数被调用时， 返回的函数还需要设置一些传入的参数。</p><p>柯里化函数通常由以下步骤动态的创建： 调用另一个函数并为它传入要柯里化的函数和必要参数。 下面是创建柯里化函数的通用方式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> innerArgs <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> finalArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>innerArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> finalArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数柯里化还常常作为函数绑定的一部分包含在其中，构造出更为复杂的 bind 函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> contenxt</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> innerArgs <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> finalArgs <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">cancat</span><span class="token punctuation">(</span>innerArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> finalArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你想除了 event 对象再额外给事件处理程序传递参数时，这非常有用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>  btn<span class="token punctuation">,</span>  <span class="token string">'click'</span><span class="token punctuation">,</span>  <span class="token function">bind</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span>handleClick<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token string">'my-btn'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ES5 的 bind 方法也实现了函数柯里化，只需要在 this 值后再传另一个参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">EventUtil<span class="token punctuation">.</span><span class="token function">addHandler</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> handler<span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> <span class="token string">'my-btn'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数绑定和柯里化都不应滥用，因为每个函数会带来额外的开销</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery API学习总结</title>
      <link href="/posts/25542.html"/>
      <url>/posts/25542.html</url>
      
        <content type="html"><![CDATA[<p>jQuery，在工作中很常用，但是很多 API 或者使用这些 API 的注意事项也经常会忘记，因此写个博客总结一下，这样也能复习一下 jQuery API。主要参考了<a href="http://www.css88.com/jqapi-1.9/">jQuery 中文文档</a>,适用于 jQuery1.9~3.1 版本。</p><p>jQuery API 主要分为选择器、属性/CSS 相关（属性、CSS、尺寸、位置）、数据 data、DOM 操作、遍历和筛选、事件、效果、Ajax、jQuery 核心、实用工具、延迟对象、回调对象和其他一些杂项。</p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>基本选择、层级选择、属性选择、子元素筛选这些和 CSS 基本一致。jQuery 还支持这些选择器：</p><h3 id="基本筛选"><a href="#基本筛选" class="headerlink" title="基本筛选"></a>基本筛选</h3><p>:animated</p><p><em>注意事项 1: 如果您使用一个自定义的 jQuery 绑定一个没有效果模块，:animated 选择器会抛出一个错误；</em></p><p><em>注意事项 2: 因为:animated 是一个 jQuery 延伸出来的选择器，并不是的 CSS 规范的一部分，使用:animated 查询不能充分利用原生 DOM 提供的 querySelectorAll() 方法来提高性能。为了当使用:animated 的时候在现代浏览器上获得更佳的性能，首先使用纯 CSS 选择器选择元素，然后使用.filter(“:animated”)，其他非 CSS 规范选择器同理。</em></p><p>:eq(index)</p><p>要匹配元素的索引值，从 0 开始计数（由于 JavaScript 数组使用基于 0 的索引，而:nth-child(n)是基于 1 的索引的，以符合 CSS 规范），支持负值</p><p>:even</p><p>这是基于 0 的索引，所以:even 选择器是选择第一个元素，第三个元素，依此类推在匹配</p><p>:first</p><p>:first 伪类选择器相当于:eq(0)。它也可以写为:lt(1)。虽然:first 只匹配一个单独的元素，但是:first-child 选择器可以匹配多个：即为每个父级元素匹配第一个子元素。</p><p>:gt()</p><p>:header</p><p>选择所有标题元素</p><p>:lang()</p><p>选择指定语言的所有元素。</p><p>:last</p><p>:lt()</p><p>:not()</p><p>.not()方法可以让代码更易读。而使用 :not() 通常会构建出一个非常复杂的选择器。所以大多数情况下，推荐使用 .not()方法。</p><p>:odd</p><p>:root</p><p>在 HTML 中，文档的根元素，和$(“:root”)选择的元素一样，永远是&lt;html&gt;元素</p><p>:target</p><p>如果文档的 URI 包含一个格式化的标识符，或 hash（哈希），然后:target 选择器将匹配 ID 和标识符相匹配的元素。例如，给定的 URI <a href="http://example.com/#foo%EF%BC%8C">http://example.com/#foo，</a> $( “p:target” )，将选择&lt;p id=”foo”&gt;元素。</p><h3 id="内容筛选"><a href="#内容筛选" class="headerlink" title="内容筛选"></a>内容筛选</h3><p>:contains()</p><p>选择所有包含指定文本的元素。</p><p>:empty</p><p>选择所有没有子元素的元素（包括文本节点）。</p><p><em>注意：W3C 的建议 p 元素都至少有一个子节点，即使这个子节点是文字（见 <a href="http://www.w3.org/TR/html401/struct/text.html%EF%BC%83edef-P%EF%BC%89%E3%80%82%E5%8F%A6%E4%B8%80%E6%96%B9%E9%9D%A2%EF%BC%8C%E5%85%B6%E4%BB%96%E4%B8%80%E4%BA%9B%E5%85%83%E7%B4%A0%E5%A7%8B%E7%BB%88%E6%98%AF%E7%A9%BA%E7%9A%84%EF%BC%88%E5%8D%B3%E6%B2%A1%E6%9C%89%E5%AD%90%E8%8A%82%E7%82%B9%EF%BC%89%EF%BC%9A%E4%BE%8B%E5%A6%82input,img,br%E5%92%8Chr%E3%80%82">http://www.w3.org/TR/html401/struct/text.html＃edef-P）。另一方面，其他一些元素始终是空的（即没有子节点）：例如input,img,br和hr。</a></em></p><p>:has()</p><p>选择元素其中至少包含指定选择器匹配的一个/种元素。</p><p>:parent</p><p>选择所有含有子元素或者文本的父级元素。这个正好和 :empty 相反。</p><h3 id="可见性筛选"><a href="#可见性筛选" class="headerlink" title="可见性筛选"></a>可见性筛选</h3><p>:hidden</p><p>:visible</p><p>元素可以被认为是隐藏的几个情况：</p><ul><li>他们的 CSS display 值是 none。</li><li>他们是 type=”hidden”的表单元素。</li><li>它们的宽度和高度都显式设置为 0。</li><li>一个祖先元素是隐藏的，因此该元素是不会在页面上显示。</li></ul><p>元素 visibility:hidden 或 opacity:0 被认为是可见的，因为他们仍然占据布局空间。在动画，隐藏一个元素，该元素被认为是可见的直到动画结束。<br>不在文档中的元素是被认为是不可见的;如果当他们被插入到文档中，jQuery 没有办法知道他们是否是可见的，因为元素可见性依赖于适用的样式。<br>jQuery 3 稍微修改了:hidden (以及:visible)的含义。 这个版本开始，如果一个元素没有任何布局盒子，那么它将被视为:hidden。例如，br 元素和没有内容的内联元素将不能通过:hidden 选择器被选择。</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>:button</p><p>:checkbox</p><p>:checked</p><p>:disabled</p><p>:enabled</p><p>:focus</p><p>:file</p><p>:image</p><p>:input</p><p>:password</p><p>:radio</p><p>:reset</p><p>:selected</p><p>:submit</p><p>:text</p><h2 id="属性-CSS-相关"><a href="#属性-CSS-相关" class="headerlink" title="属性/CSS 相关"></a>属性/CSS 相关</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>属性有.attr()，.prop()，.removeAttr()，.removeProp()，.val()这 5 个方法。</p><p>1 .attr()</p><p>获取匹配的元素集合中的第一个元素的属性的值 或 设置每一个匹配元素的一个或多个属性。</p><p><em>jQuery 的很多方法都是默认获取的时候为第一个元素的值，而写入或设置的时候为修改所有匹配的元素</em></p><p>1.1 .attr( attributeName )</p><p>获取匹配的元素集合中的第一个元素的属性的值。</p><p>根据 W3C 的表单规范 ，checked 属性是一个布尔属性，这意味着,如果这个属性（attribute）是目前存在，即使，该属性没有对应的值，或者被设置为空字符串值，或甚至是”false”，相应的属性（property）为 true。这才是真正的所有布尔属性（attributes）。<br>checked 特性（attribute）值不会因为复选框的状态而改变，而 checked 属性（property）会因为复选框的状态而改变。因此，跨浏览器兼容的方法来确定一个复选框是否被选中，是使用该属性（property）：</p><pre><code>if ( elem.checked )if ( $(elem).prop(&quot;checked&quot;) )if ( $(elem).is(&quot;:checked&quot;) )</code></pre><p><em>除了 checked，对于其他的动态属性 selected，disabled 和 value 也应该使用 prop()方法</em></p><p><em>在 Internet Explorer 9 之前的版本，使用.prop()设置 DOM 元素的属性进行赋值时，若所赋值的类型不是基本类型(number, string, 或 boolean)，而且也没有在 DOM 元素从文档中被移除之前使用 .removeProp() 方法。为了安全的在 DOM 对象上进行赋值而不用担心内存泄露问题，请使用 .data()方法。</em></p><p>1.2 .attr( attributeName, value )</p><p>value 类型: String or Number or Null。如果为 null， 指定的属性将被删除（就像.removeAttr()一样）</p><p>1.3 .attr( attributes )</p><p>attributes 类型: PlainObject，一个要设置的属性-值集合对象</p><p>1.4 .attr( attributeName, function(Integer index, String attr) )</p><p>这个函数返回用来设置的值。this 指向当前的元素。接收该元素在集合中索引位置（index）和 原来属性值（attr）作为参数。</p><p><em>注意 如果 setter 函数没有返回任何数据（例如：function(index, attr){})，属性的当前值返回值是 undefined，作为一个 getter 行为。实际上，如果不进行任何更改的 setter 函数不返回的东西。</em></p><p><em>警告： 当设置样式名（“class”）属性时，必须使用引号！</em></p><p><em>注意: 试图改变 由 document.createElement()创建的 input 或 button 的 type 属性，在 Internet Explorer 8 或更老的版本中将抛出一个例外。</em></p><p>2 .prop()</p><p>参见 attr().</p><p>禁用页面所有复选框</p><pre><code>&lt;script&gt;$(&quot;input[type=&#39;checkbox&#39;]&quot;).prop(&#123;  disabled: true&#125;);&lt;/script&gt;</code></pre><p>3 .removeAttr( attributeName )</p><p>attributeName 类型: String，要移除的属性名,从 1.7 版本开始，它可以是一个空格分隔的属性列表。</p><p><em>注意: Internet Explorer 8， 9 ，和 11 中，使用.removeAttr()<br>删除一个内联 onclick 事件处理程序不会达到预期的效果，为了避免潜在的问题，使用 .prop()代替：</em></p><pre><code>$element.prop(&quot;onclick&quot;, null);console.log(&quot;onclick property: &quot;, $element[0].onclick);</code></pre><p>4 .removeProp( propertyName )</p><p>若尝试移除 DOM 元素或 window 对象上一些内建的 属性（ property ） ，浏览器可能会产生错误。如果真的那么做了，那么 jQuery 首先会将 属性（ property ） 设置成 undefined ，然后忽略任何浏览器产生的错误。一般来说,只需要移除自定义的 属性（ property ） ，而不是移除内建的（原生的）属性（ property ）。</p><p><em>注意: 不要使用此方法来删除原生的属性（ property ），比如 checked, disabled, 或者 selected。这将完全移除该属性，一旦移除，不能再次被添加到元素上。使用.prop()来设置这些属性设置为 false 代替。</em></p><p>5 .val()</p><p>5.1 .val()</p><p>当该集合中第一个元素是一个 select-multiple（即 select 元素设置了 multiple 属性），.val()返回一个包含每个选择项值的数组。在 jQuery 3.0 中， 如果没有选项被选中，它将返回一个空数组；在 jQuery 3.0 之前的版本中， 它将返回 null。</p><pre><code>function displayVals() &#123;  var singleValues = $(&quot;#single&quot;).val();  var multipleValues = $(&quot;#multiple&quot;).val() || []; //确保没有选项被选中时为[]  $(&quot;p&quot;).html(&quot;&lt;b&gt;Single:&lt;/b&gt; &quot; +              singleValues +              &quot; &lt;b&gt;Multiple:&lt;/b&gt; &quot; +              multipleValues.join(&quot;, &quot;));&#125;$(&quot;select&quot;).change(displayVals);displayVals();</code></pre><p>对于选择框（select），复选框（checkbox）和单选按钮（radio button），您也可以使用:selected 和 :checked 选择器来获取值。</p><p><em>注意: 通过 .val() 方法从 &lt;textarea&gt; 元素中获取的值是不含有回车（\r）字符的。但是如果该值是通过 XHR 传递给服务器的，回车（\r）字符会被保留（或者是被浏览器添加的，但是在原始数据中并不包含回车（\r））。可以使用下面的 valHook 方法解决这个问题：</em></p><pre><code>$.valHooks.textarea = &#123;  get: function( elem ) &#123;    return elem.value.replace( /\r?\n/g, &quot;\r\n&quot; );  &#125;&#125;;</code></pre><p>5.2 .val( value )</p><p>value 类型: String or Number or Array，一个文本字符串,一个数字，或一个以字符串形式的数组来设定每个匹配元素的值。</p><p>val() 允许你传递一个元素值的数组。当使用在包含像<input type="checkbox">, <input type="radio">, 和<select>中的 <option>元素的 jQuery 对象上的时候是非常有用的。在这种情况下，input 和 option 的 value 与数组元素相匹配的情况下将被选中（checked）或选定（selected），而那些与数组元素值不匹配的 value 是未选中（unchecked）或未被选（unselected），这取决于元素类型。对于 <input type="radio"> 属于一个单选按钮组 ，还有<select>的其他元素都将被取消选中。</p><pre><code>&lt;select id=&quot;single&quot;&gt;  &lt;option&gt;Single&lt;/option&gt;  &lt;option&gt;Single2&lt;/option&gt;&lt;/select&gt;&lt;select id=&quot;multiple&quot; multiple=&quot;multiple&quot;&gt;  &lt;option selected=&quot;selected&quot;&gt;Multiple&lt;/option&gt;  &lt;option&gt;Multiple2&lt;/option&gt;  &lt;option selected=&quot;selected&quot;&gt;Multiple3&lt;/option&gt;&lt;/select&gt;&lt;br/&gt;&lt;input type=&quot;checkbox&quot; name=&quot;checkboxname&quot; value=&quot;check1&quot;/&gt; check1&lt;input type=&quot;checkbox&quot; name=&quot;checkboxname&quot; value=&quot;check2&quot;/&gt; check2&lt;input type=&quot;radio&quot;  name=&quot;r&quot; value=&quot;radio1&quot;/&gt; radio1&lt;input type=&quot;radio&quot;  name=&quot;r&quot; value=&quot;radio2&quot;/&gt; radio2&lt;script&gt;    $(&quot;#single&quot;).val(&quot;Single2&quot;);    $(&quot;#multiple&quot;).val([&quot;Multiple2&quot;, &quot;Multiple3&quot;]);    $(&quot;input&quot;).val([&quot;check1&quot;,&quot;check2&quot;, &quot;radio1&quot; ]);&lt;/script&gt;</code></pre><p>使用这个方法（或使用原生的 value 属性（property））设置值，不会触发 change 事件。为此，相关的事件处理程序不会被执行。如果要执行它们，你应该在设置值之后调用 .trigger( “change” )</p><p>5.3 .val( function( Integer index, String value ) )</p><pre><code>$(&#39;input:text.items&#39;).val(function( index, value ) &#123;  return value + &#39; &#39; + this.className;&#125;);</code></pre><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>CSS 主要有以下一些方法：</p><p>.addClass()</p><p>.css()</p><p>jQuery.cssHooks</p><p>jQuery.cssNumber</p><p>jQuery.escapeSelector()</p><p>.hasClass()</p><p>.removeClass()</p><p>.toggleClass()</p><p>1 .addClass()</p><p>1.1 .addClass( className )</p><p>1.2 .addClass( function(index, currentClass) )</p><p>在 jQuery 1.12/2.2 版本之前， .addClass()方法操纵是选定元素的 className 特性（property），不是 class 属性（attribute）。一旦特性（property）改变，浏览器就会更新相应地的属性（attribute）。此行为的一个言外之意是，这种方法只适用于 HTML DOM 语义的文档（例如，不是纯 XML 文档）。</p><p>在 jQuery1.12/2.2 中，改变了这种行为以改善对 XML 文档，包括 SVG 的支持。从这个版本开始，class 属性（attribute）被替换（愚人码头注：这个版本开始，.addClass()方法操作的是 class 属性（attribute），而不是 className 特性（property））。因此，.addClass()可以在 XML 或 SVG 文档中使用。</p><p>对所有匹配的元素可以一次添加多个用空格隔开的样式类名。</p><p>2 .hasClass( className )</p><p>在 jQuery 1.12/2.2 中, 这个方法支持 XML 文档, 包括 SVG。</p><p>3 .removeClass()</p><p>如果一个样式类名作为一个参数,只有这样式类会被从匹配的元素集合中删除 。 如果没有样式名作为参数，那么所有的样式类将被移除。</p><p>4 .toggleClass()</p><p>4.1 .toggleClass( className )</p><p>4.2 .toggleClass( className, state )</p><p>state 类型: Boolean,一个布尔值（不止是真值/假值），用于判断样式是否应该被添加或移除。</p><p>4.3 .toggleClass( function( Integer index, String className, Boolean state ) [, state ] )</p><p>5 .css()</p><p>.css( propertyName )</p><p>.css( propertyNames )</p><p>.css( propertyName, value )</p><p>.css( propertyName, function(index, value) )</p><p>.css( properties )</p><p>5.1 从 jQuery 1.9 开始, 传递一个 CSS 的样式属性的数组给.css()将返回 属性 - 值 配对的对象。例如，要获取元素 4 个边距宽度值 border-width，你可以使用$( elem ).css([ “borderTopWidth”, “borderRightWidth”, “borderBottomWidth”, “borderLeftWidth” ]).</p><p>5.2 当一个数只被作为值（value）的时候， jQuery 会将其转换为一个字符串，并添在字符串的结尾处添加 px(愚人码头注：.css(“width”,50})，.css(“width”,”50”})，.css(“width”,’50px’})这 3 条语句是等价的，具体可以查看 <a href="http://jsfiddle.net/feiwen8772/b78mgmdd/)%E3%80%82">http://jsfiddle.net/feiwen8772/b78mgmdd/)。</a> 如果属性值需要非 px 的其他单位，请使用添加了合适单位的字符串（愚人码头注：例如，’12em’）</p><p>5.3 样式属性的值设置为空字符串 — 例如，$(‘#mydiv’).css(‘color’, ‘’) — 那么会从元素上移除该属性（若该属性存在的话）， 该属性之前可能是通过 jQuery 的 .css() 方法设置的 HTML style 属性，也有可能是通过直接对 style 属性进行 DOM 操作而被设置的。 因此，该属性的元素样式将恢复到之前应用的任何值。</p><p><em>注意: .css()忽略了!important 声明！ 因此，语句$( “p” ).css( “color”, “red !important” )，不会将页面中所有段落颜色转变为红色。 强烈建议使用类（class）来代替; 否则请使用 jQuery 插件。</em></p><p>5.4 从 jQuery1.6 开始，.css()接受类似于.animate()的相对值。相对值时以+= 或者 -=开头的字符串，表示递增或递减当前的值。 例如，如果一个元素的左边填充（padding-left）是 10px 的，.css( “padding-left”, “+=15” )将返回总的左填充（padding-left ）为 55px。</p><p>5.5 <em>注意: 如果设置函数没有返回任何东西(例如. function(index, style){})，或者如果返回 undefined，当前的值不会改变。只有当某些条件得到满足，选择性的设定值的时后是有用的。</em></p><p>6 jQuery.cssHooks</p><p>直接向 jQuery 中添加钩子，用于覆盖设置或获取特定 CSS 属性时的方法，目的是为了标准化 CSS 属性名或创建自定义属性。</p><pre><code>(function($) &#123;  if ( !$.cssHooks ) &#123;    throw(&quot;jQuery 1.4.3+ is needed for this plugin to work&quot;);    return;  &#125;  function styleSupport( prop ) &#123;    var vendorProp, supportedProp,        capProp = prop.charAt(0).toUpperCase() + prop.slice(1),        prefixes = [ &quot;Moz&quot;, &quot;Webkit&quot;, &quot;O&quot;, &quot;ms&quot; ],        div = document.createElement( &quot;div&quot; );    if ( prop in div.style ) &#123;      supportedProp = prop;    &#125; else &#123;      for ( var i = 0; i &lt; prefixes.length; i++ ) &#123;        vendorProp = prefixes[i] + capProp;        if ( vendorProp in div.style ) &#123;          supportedProp = vendorProp;          break;        &#125;      &#125;    &#125;    div = null;    $.support[ prop ] = supportedProp    return supportedProp;  &#125;  var borderRadius = styleSupport( &quot;borderRadius&quot; );  // Set cssHooks only for browsers that  // support a vendor-prefixed border radius  if ( borderRadius &amp;&amp; borderRadius !== &quot;borderRadius&quot; ) &#123;    $.cssHooks.borderRadius = &#123;      get: function( elem, computed, extra ) &#123;        return $.css( elem, borderRadius );      &#125;,      set: function( elem, value) &#123;        elem.style[ borderRadius ] = value;      &#125;    &#125;;  &#125;&#125;)(jQuery);</code></pre><p>7 jQuery.cssNumber</p><p>一个对象，这个包含所有可以不使用单位的 CSS 属性。.css() 方法使用这个对象来确定是否可能附加 px 到无单位的值。</p><p>jQuery.cssNumber.someCSSProp = true;</p><p>默认情况下，这个对象包含以下属性：</p><ul><li>zIndex</li><li>fontWeight</li><li>opacity</li><li>zoom</li><li>lineHeight</li><li>widows (jQuery 1.6 开始添加)</li><li>orphans (jQuery 1.6 开始添加)</li><li>fillOpacity (jQuery 1.6.2 开始添加)</li><li>columnCount (jQuery 1.9 开始添加)</li><li>order (jQuery 1.10.2 开始添加)</li><li>flexGrow (jQuery 1.11.1 开始添加)</li><li>flexShrink (jQuery 1.11.1 开始添加)</li></ul><p>8 jQuery.escapeSelector()</p><p>转义 CSS 选择器中任何具有特殊的含义字符。</p><p>添加版本: 3.0</p><p>此方法对于一个 CSS 类名或一个 ID 包含的字符在 CSS 中具有特殊含义的情况下非常有用，如点或分号。</p><p>该方法本质上是<a href="https://drafts.csswg.org/cssom/#the-css.escape()-method">CSS 工作组 CSS.escape()方法</a>的 shim（垫片）。 主要的区别在于，$.escapeSelector() 可以可靠地使用在所有 jQuery 支持的浏览器中。</p><p>转义包含 hash 的 ID.</p><pre><code>$.escapeSelector( &quot;#target&quot; ); // &quot;\#target&quot;</code></pre><p>选择在一个 div 内，所有类名为.box 的元素。</p><pre><code>$( &quot;div&quot; ).find( &quot;.&quot; + $.escapeSelector( &quot;.box&quot; ) );</code></pre><h3 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h3><p>主要有.height()，.width()，.innerHeight()，.innerWidth()，.outerHeight()，.outerWidth()</p><p>1 .height()</p><p>1.1 .height()</p><p>.css(‘height’) 和 .height()之间的区别是后者返回一个没有单位的数值（例如，400），前者是返回带有完整单位的字符串（例如，400px）。当一个元素的高度需要数学计算的时候推荐使用.height() 方法 。</p><p><em>注意.height()总是返回容器的高度,不管 CSS box-sizing 属性值。截至 jQuery 1.8，这可能需要检索的 CSS 的宽度加加上 box-sizing 的属性，然后当元素有 box-sizing: border-box 时候，减去个元素上任何潜在 border 和 padding 值。为了避免这种问题，使用.css( “height” )而非.height()。</em></p><p><em>尺寸相关的 API 返回的数字， 包括的 .height()， 在某些情况下可能带有小数。你的代码不应该假定它是一个整数。 另外，当页面被用户缩放时，返回的尺寸可能是不正确的;浏览器没有一个公开的 API 来检测这种情况。</em></p><p><em>当元素或其父元素被隐藏时，.height()得到的值不能保证准确。要得到准确的值，你应该确保该元素在使用.height()前可见。jQuery 将尝试临时显示，然后再隐藏元素来测量元素尺寸，但这是不可靠的，（即使得到准确的值）也会显著影响页面的性能。这总临时显示然后再隐藏的测量功能，可能在 jQuery 未来的版本中删除。</em></p><p>1.2 .height( value )</p><p>1.3 .height( function(index, height) )</p><p>当调用.height(value)方法的时候，这个“value”参数可以是一个字符串（数字加单位）或者是一个数字。如果这个“value”参数只提供一个数字，jQuery 会自动加上单位 px。如果只提供一个字符串，任何有效的 CSS 尺寸都可以为高度赋值（就像 100px, 50%, 或者 auto）。注意在现代浏览器中，CSS 高度属性不包含 padding, border, 或者 margin。</p><p>如果没有给定明确的单位（像’em’ 或者 ‘%’），那么默认情况下”px”会被直接添加上去（也理解为”px”是默认单位）。</p><p><em>注意.height(‘value’)设置的容器宽度是根据 CSS box-sizing 属性来定的, 将这个属性值改成 border-box，将造成这个函数改变这个容器的 outerHeight，而不是原来的内容高度。</em></p><p>以上的注意事项，尺寸的其他方法同理。</p><p>2 .width()</p><p>3 .innerHeight()</p><p>用于获得匹配集合中第一个元素的当前计算的内部高度（包括 padding，但不包括 border），或 设置每一个匹配元素的内部高度。</p><p>这个方法返回元素的高度，包括顶部和底部的 padding，单位是像素。</p><p>这个方法不适用于 window 和 document 对象，对于这些对象可以使用.height()代替。</p><p>4 .innerWidth()</p><p>5 .outerHeight()</p><p>获取匹配元素集合中第一个元素的当前计算宽度值,包括 padding，border 和选择性的 margin。返回一个整数（不包含“px”）表示的值 ，或如果在一个空集合上调用该方法，则会返回 null。</p><p>.outerHeight( [includeMargin ] )</p><p>includeMargin (默认: false),类型： Boolean,一个布尔值，表明是否在计算时包含元素的 margin 值。</p><p>6 .outerWidth()</p><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p>位置主要有.offset(),.offsetParent(),.position(),.scrollLeft(),.scrollTop()</p><p>1 .offset()</p><p>1.1 .offset()</p><p>在匹配的元素集合中，获取的第一个元素的当前坐标，坐标相对于文档。</p><p>.offset()返回一个包含 top 和 left 属性的对象 。</p><p><em>注意：jQuery 不支持获取隐藏元素的偏移坐标。同样的，也无法取得隐藏元素的 border, margin, 或 padding 信息。</em></p><p><em>若元素的属性设置的是 visibility:hidden，那么我们依然可以取得它的坐标。但是若设置的属性是 display:none，由于在绘制 DOM 树时根本就不绘制该元素，所以它的位置属性值是 undefined。</em></p><p>1.2 .offset( coordinates )</p><p>coordinates 类型: PlainObject,一个包含 top 和 left 属性的对象，用整数指明元素的新顶部和左边坐标。</p><p>1.3 .offset( function(index, coords) )</p><p>返回用于设置坐标的一个函数。接收元素在匹配的元素集合中的索引位置作为第一个参数，和当前坐标作为第二个参数。这个函数应该返回一个包含 top 和 left 属性的对象。</p><p>.offset()方法允许我们重新设置元素的位置，这个元素的位置是相对于 document 对象的。如果对象原先的.position()样式属性是 static 的话，会被改成 relative 来实现重定位。</p><p>2 .offsetParent()</p><p>取得离指定元素最近的含有定位信息的祖先元素。含有定位信息的元素指的是，CSS 的 position 属性是 relative, absolute, 或 fixed 的元素</p><p>3 .position()<br>获取匹配元素中第一个元素的当前坐标，相对于 offset parent 的坐标。( 译者注：offset parent 指离该元素最近的而且被定位过的祖先元素 )</p><p>.position()方法可以取得元素相对于父元素的偏移位置。与.offset()不同, .offset()是获得该元素相对于 documet 的当前坐标,当把一个新元素放在同一个容器里面另一个元素附近时，用.position()更好用。</p><p>.position()返回一个包含 top 和 left 属性的对象.</p><p>4 .scrollLeft()</p><p>4.1 .scrollLeft()</p><p>获取匹配的元素集合中第一个元素的当前水平滚动条的位置。</p><p><em>注意:.scrollLeft(), 当直接调用或使用.animate()做动画，当元素被应用了隐藏，将不做任何改变。</em></p><p>4.2 .scrollLeft( value )</p><p>5 .scrollTop()</p><h2 id="数据-data"><a href="#数据-data" class="headerlink" title="数据 data"></a>数据 data</h2><p>有三个底层的方法 jQuery.data()，jQuery.hasData()，jQuery.removeData()和两个元素上的方法.data()，.removeData()，一般不要使用底层的方法，而是使用元素上的方法。</p><p>1 jQuery.hasData()</p><p>jQuery.hasData( element )</p><p>确定任何一个元素是否有与之相关的 jQuery 数据。</p><p>jQuery.hasData()方法提供了一种方法来确定一个元素是否有任何数据，这些数据是使用 jQuery.data()设置的。如果一个元素没有关联的 data 对象，该方法返回 false ;否则返回 true 。</p><p>jQuery.hasData(element) 的主要优点是它并不创建 data 对象。如果元素上没有 data 对象，那么该方法也不会与元素上的 data 对象关联。相反，jQuery.data(element)总是向调用者返回一个 data 对象，即使该元素上不含有 data 对象，它也会创建一个。</p><p><em>请注意，jQuery 的事件系统是使用 jQuery 数据 存储事件处理程序的。 因此，使用.on(), .bind(), .live(), .delegate()，或一个速记事件方法 绑定事件到一个元素上的时候，也会在那个元素上关联一个 data 对象。</em></p><p>2 .data()</p><p>在匹配元素上存储任意相关数据 或 返回匹配的元素集合中的第一个元素的给定名称的数据存储的值。</p><p>2.1 .data( key, value )</p><p>key 类型: String，一个字符串，用户存储数据的名称。（译者注：存储的数据名）</p><p>value 类型: Anything，新的数据值；它可以是任意的 Javascript 数据类型，除了 undefined。</p><p>2.2 .data( obj )</p><p>obj 类型: Object，一个用于更新数据的 键/值对</p><p>.data() 方法允许我们在 DOM 元素上绑定任意类型的数据,避免了循环引用的内存泄漏风险。我们可以在一个元素上设置不同的值，并获取这些值：</p><p>由于浏览器用插件和外部代码相互作用,.data()方法不能在<object>（除非是 Flash 插件），<applet> 或 <embed>元素上使用。</p><p><em>注意这个方法目前并不提供在 XML 文档上跨平台设置数据，作为 Internet Explorer 不允许通过自定义属性附加数据。</em></p><p><em>undefined 不是认可的数据值。比如这样调用.data( “name”, undefined ) ，将返回 “name”对应的数据， 也就是等同于调用.data( “name” )。</em></p><p>2.3 .data( key )</p><p>返回匹配的元素集合中的第一个元素的给定名称的数据存储的值。 通过.data(name, value)或 HTML5 data-* 属性设置</p><p>2.4 .data()</p><p>从 jQuery 1.4.3 起， HTML 5 data- 属性 将自动被引用到 jQuery 的数据对象中。嵌入式破折号处理属性（ attributes）的方式在 jQuery 1.6 中已经改变，以使之符合 W3C HTML5 规范.</p><p>如果没有传递 key 参数的数据存储， jQuery 将在元素的属性中搜索， 将驼峰式字符串转化为中横线字符串，然后在结果前面加上 data-。 所以，该字符串 lastValue 将被转换为 data-last-value。</p><p>每次尝试将字符串转换为一个 JavaScript 值（包括布尔值（booleans），数字（numbers），对象（objects），数组（arrays）和空（null））。如果这样做不会改变值的表示，那么该值将转换为一个数字（number）。例如，“1E02”和“100.000”是等同于数字（数字值 100），但将转换它们会改变他们的表示，所以他们被保留为字符串。字符串值“100”被转换为数字 100。</p><p>如果数据(data)属性是一个对象（以“{”开始）或数组（以’[‘开始），可以用 jQuery.parseJSON 将其解析成字符串；它必须遵循<a href="https://en.wikipedia.org/wiki/JSON#Data_types.2C_syntax_and_example">有效的 JSON 的语法</a>，包括带双引号的属性名称。如果该值不能解析为一个 JavaScript 值，它将被保留为字符串。</p><p>如果不想将取出的属性值直接当作字符串的话，请使用 attr()方法。</p><p>data-属性是在第一次使用这个数据属性后不再存取或改变（所有的数据值都在 jQuery 内部存储）。</p><p>调用 .data() 时如果不带参数，将会以 JavaScript 对象的形式获取所有数据。这个对象可以安全的存放在变量中，因为一旦这个新对象被提取出来，之后对元素进行的 .data(obj)操作，将不会再影响这个对象。另外，直接操作这个对象会比每次调用 .data() 来设置或获取值要快一些：</p><p>3 .removeData( [name ] )</p><p>在元素上移除绑定的数据</p><p>3.1 .removeData( [name ] )</p><p>name 类型: String,要移除的存储数据名.</p><p>3.2 .removeData( [list ] )</p><p>list 类型: Array or String,一个数组或空间分隔的字符串命名要删除的数据块。</p><p>.removeData()方法允许我们移除用.data()绑定的值。当带 name 参数调用的时候，.removeData()将删除那个特有的值，当不带任何参数的时候，.removeData()将移除所有的值。</p><p>需要注意的是.removeData()仅会删除来自 jQuery 内部.data()缓存中的数据， 并且元素上任何相应的 data-属性不会被删除。后调用 data()，会重新检索 data-的属性的值。 为了防止这种情况，可以在.removeData()旁边使用.removeAttr()来移除 data-属性。jQuery 1.4.3 以前,data()没有使用 data-属性，所以不存在这类问题。</p><p>从 jQuery 1.7 开始, 当键数组或一个空间分隔键的字符串作为参数，调用.removeData()时，将删除在该数组每一项元素或字符串的键值。</p><p>4 jQuery.data()</p><p>jQuery.data( element, key, value )</p><p>jQuery.data( element, key )</p><p>jQuery.data( element )</p><p>注意：这是一个底层的方法，你应该用.data()代替。</p><p>jQuery.data() 方法允许我们在 DOM 元素上附加任意类型的数据,避免了循环引用的内存泄漏风险。如果 DOM 元素是通过 jQuery 方法删除的或者当用户离开页面时，jQuery 同时也会移除添加在上面的数据。我们可以在一个元素上设置不同的值，并获取这些值：</p><p><em>.unload()方法只是作为.on( “unload”, handler )的一个速记写法，移除该事件可以使用.off( “unload” )。</em></p><p>关于 HTML5 data-* 属性: 这个低层次的方法不检索的 data-*属性， 除非.data()方法已经返回了它们。</p><p>调用 jQuery.data(element)时将获取一个 JavaScript 对象，它包含了元素上所有存储的数据。jQuery 内部自身使用这个方法来绑定数据，如事件处理器，所以不要以为这对象只包含你的代码中储存的数据。</p><p>其他和元素上的 data 方法一样</p><p>5 .removeData()</p><p>和元素上的 removeDate()同理</p><h2 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="DOM 操作"></a>DOM 操作</h2><h3 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h3><p>.clone( [withDataAndEvents ] )</p><p>withDataAndEvents (默认: false)<br>类型: Boolean，<br>一个 Boolean 值，表示是否会复制元素上的事件处理函数。从 jQuery 1.4 开始，元素数据也会被复制。</p><p>.clone( [withDataAndEvents ] [, deepWithDataAndEvents ] )</p><p>withDataAndEvents (默认: false)<br>类型: Boolean，<br>一个 Boolean 值，表示是否会复制元素上的事件处理函数。 默认值是 false。*对于 1.5.0 的默认值被不适当地设置成了 true，将在 1.5.1 以上改回 false 。</p><p>deepWithDataAndEvents (默认: value of withDataAndEvents)<br>类型: Boolean，<br>一个布尔值，指示是否对事件处理程序和克隆的元素的所有子元素的数据应该被复制。默认情况下它的值相匹配的第一个参数的值（ 默认值是 false）</p><p><em>注意:出于性能方面的考虑，表单元素动态的状态（例如，用户将数据输入到 textarea 中的值，或者用户在 select 中已经选中某一项）不会被复制到克隆元素。当克隆 input 元素时候，该元素的动态状态（例如，用户数据输入到文本输入框(愚人码头注： <input type="text">) 和用户选中一个复选框）将被保留在克隆元素中。</em></p><p>像我们讨论.append()一样，通常我们将页面上一个元素插入到 DOM 里另立个地方，它会被从老地方移走（愚人码头注：不是复制）</p><p>但是我们如果需要的是复制而不是移除，我们可以像下面这样写代码：</p><pre><code>$(&#39;.hello&#39;).clone().appendTo(&#39;.goodbye&#39;);</code></pre><p>然而，元素数据（data）内对象和数组不会被复制，将继续被克隆元素和原始元素共享。深复制的所有数据，需要手动复制每一个：</p><pre><code>// Original element with attached datavar $elem = $( &quot;#elem&quot; ).data( &quot;arr&quot;, [ 1 ] ),    $clone = $elem.clone( true )      // Deep copy to prevent data sharing      .data( &quot;arr&quot;, $.extend( [], $elem.data( &quot;arr&quot; ) ) );</code></pre><p>在 jQuery 1.5，withDataAndEvents 可以选择性增强 deepWithDataAndEvents 复制元素的事件和数据的克隆的所有子元素。</p><p><em>注意: 使用.clone()可能产生 id 属性重复的元素的副作用，id 应该是唯一的。在可能的情况下，建议，应避免克隆有此属性或标识符的元素，使用类（class）属性代替。</em></p><p>当使用 .clone()克隆一组元素，并且这些克隆生成的元素尚未被添加到 DOM 中，那么当这些元素被插入到 DOM 中时，不能保证是按它们的原顺序被插入的。但是，可以像下面例子中提到的那样，保证顺序的正确性：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;  &lt;style&gt;  #orig, #copy, #copy-correct &#123;    float: left;    width: 20%;  &#125;&lt;/style&gt;  &lt;script src=&quot;http://code.jquery.com/jquery-latest.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;orig&quot;&gt;    &lt;div class=&quot;elem&quot;&gt;&lt;a&gt;1&lt;/a&gt;&lt;/div&gt;    &lt;div class=&quot;elem&quot;&gt;&lt;a&gt;2&lt;/a&gt;&lt;/div&gt;    &lt;div class=&quot;elem&quot;&gt;&lt;a&gt;3&lt;/a&gt;&lt;/div&gt;    &lt;div class=&quot;elem&quot;&gt;&lt;a&gt;4&lt;/a&gt;&lt;/div&gt;    &lt;div class=&quot;elem&quot;&gt;&lt;a&gt;5&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id=&quot;copy&quot;&gt;&lt;/div&gt;&lt;div id=&quot;copy-correct&quot;&gt;&lt;/div&gt;&lt;script&gt;// sort order is not guaranteed here and may vary with browser$(&#39;#copy&#39;).append($(&#39;#orig .elem&#39;)          .clone()          .children(&#39;a&#39;)          .prepend(&#39;foo - &#39;)          .parent()          .clone());// correct way to approach where order is maintained$(&#39;#copy-correct&#39;)          .append($(&#39;#orig .elem&#39;)          .clone()          .children(&#39;a&#39;)          .prepend(&#39;bar - &#39;)          .end());&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="DOM-插入-包裹"><a href="#DOM-插入-包裹" class="headerlink" title="DOM 插入, 包裹"></a>DOM 插入, 包裹</h3><p>有三个方法：.wrap()，.wrapAll()，.wrapInner()</p><p>1 .wrap()</p><p>在集合中匹配的每个元素周围包裹一个 HTML 结构。</p><p>.wrap( wrappingElement )</p><p>wrappingElement<br>类型: Selector 或 htmlString 或 Element 或 jQuery，<br>一个选择器，元素，HTML 字符串，或 jQuery 对象指定的 html 结构环绕包裹的匹配元素。 当你传递一个包含多个元素一个 jQuery 集合， 或选择器的匹配多个元素时， 第一元素将被使用。</p><p>.wrap( function )<br>function<br>类型: Function( Integer index ) =&gt; String 或 jQuery，<br>一个回调函数，返回用于包裹匹配元素的 HTML 内容或 jQuery 对象。接受的 index 参数表示匹配元素在集合中的索引位置。该函数内的 this 指向集合中的当前元素。</p><pre><code>$(&#39;.inner&#39;).wrap(function() &#123;  return &#39;&lt;div class=&quot;&#39; + $(this).text() + &#39;&quot; /&gt;&#39;;&#125;);&lt;div class=&quot;container&quot;&gt;  &lt;div class=&quot;Hello&quot;&gt;    &lt;div class=&quot;inner&quot;&gt;Hello&lt;/div&gt;  &lt;/div&gt;  &lt;div class=&quot;Goodbye&quot;&gt;    &lt;div class=&quot;inner&quot;&gt;Goodbye&lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;</code></pre><p>使用一个嵌套深度为两层 div 的 jQuery 对象来包裹所有的段落。注意，这并不会移动用于包裹的对象，只是将克隆后的对象用于包裹。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;  &lt;style&gt;  div &#123; border: 2px solid blue; margin:2px; padding:2px; &#125;  .doublediv &#123; border-color:red; &#125;  p &#123; background:yellow; margin:4px; font-size:14px; &#125;  &lt;/style&gt;  &lt;script src=&quot;http://code.jquery.com/jquery-latest.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;  &lt;p&gt;Hello&lt;/p&gt;  &lt;p&gt;cruel&lt;/p&gt;  &lt;p&gt;World&lt;/p&gt;  &lt;div class=&quot;doublediv&quot;&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;$(&quot;p&quot;).wrap($(&quot;.doublediv&quot;));&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>2 .wrapAll()</p><p>.wrapAll( wrappingElement )</p><p>wrappingElement</p><p>类型: Selector 或 htmlString 或 Element 或 jQuery</p><p>一个选择器，元素，HTML 字符串，或 jQuery 对象指定的 html 结构环绕包裹的匹配元素。</p><p>.wrapAll( function )</p><p>function</p><p>类型: Function() =&gt; String 或 jQuery，</p><p>一个回调函数，返回的 HTML 内容或 jQuery 对象将包裹所有匹配的元素。函数内的 this 指向集合中的第一个元素。在 jQuery 3.0 之前，回调函数错误地调用集合中的每一个元素并且接收所述集合中这个元素的索引位置作为参数。</p><p>.wrapAll()函数可以接受任何字符串或对象，可以传递给$()工厂函数来指定一个 DOM 结构。这种结构可以嵌套多层，但是最内层只能有一个元素。所有匹配元素将会被当作是一个整体，在这个整体的外部用指定的 HTML 结构进行包裹。</p><p>为 span 标签包裹一个对象树。注意，任何 span 之间的元素都不会被包裹，例如例子中使用的 <strong> (红色文本)。即使是 span 之间的空格也不会被包裹。可以查看原始 HTML 的源代码。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;  &lt;style&gt;  div &#123; border:2px blue solid; margin:2px; padding:2px; &#125;  p &#123; background:yellow; margin:2px; padding:2px; &#125;  strong &#123; color:red; &#125;  &lt;/style&gt;  &lt;script src=&quot;http://code.jquery.com/jquery-latest.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;  &lt;span&gt;Span Text&lt;/span&gt;  &lt;strong&gt;What about me?&lt;/strong&gt;  &lt;span&gt;Another One&lt;/span&gt;&lt;script&gt;$(&quot;span&quot;).wrapAll(&quot;&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&quot;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>3 .wrapInner()</p><p>注意: 当通过一个选择器字符串传递给.wrapInner() 函数，其参数应该是格式正确的 HTML，并且 HTML 标签应该是被正确关闭的。下面是一些正确的例子：</p><pre><code>$(elem).wrapInner(&quot;&lt;div class=&#39;test&#39; /&gt;&quot;);$(elem).wrapInner(&quot;&lt;div class=&#39;test&#39;&gt;&lt;/div&gt;&quot;);$(elem).wrapInner(&quot;&lt;div class=\&quot;test\&quot;&gt;&lt;/div&gt;&quot;);</code></pre><h3 id="DOM-插入-内部插入"><a href="#DOM-插入-内部插入" class="headerlink" title="DOM 插入, 内部插入"></a>DOM 插入, 内部插入</h3><p>有.append()，.appendTo()，.prepend()，.prependTo()，.html()，.text()</p><p>1 .append()</p><p>.append( content [, content ] )</p><p>content<br>类型: String, Element, jQuery，<br>DOM 元素，文本节点，元素和文本节点的数组，HTML 字符串，或者 jQuery 对象，用来插在每个匹配元素里面的末尾。</p><p>content<br>类型: String, Element, Array, jQuery，<br>一个或多个 DOM 元素，文本节点，元素和文本节点的数组，HTML 字符串，或 jQuery 对象插入到每个匹配元素的末尾。</p><p>.append( function(index, html) )</p><p>function(index, html)<br>类型: Function()，<br>一个返回 HTML 字符串，DOM 元素（或多个），文本节点（或多个），jQuery 对象的函数，该字符串用来插入到匹配元素的末尾。接收 index 参数表示元素在匹配集合中的索引位置和 html 参数表示元素上原来的 HTML 内容。在函数中 this 指向元素集合中的当前元素。</p><p>如果一个被选中的元素被插入到另外一个地方，这是移动而不是复制。</p><p>和其他添加内容的方法类似， 例如.prepend() 和 .before(), .append() 还支持传递输入多个参数。支持的输入包括 DOM 元素，jQuery 对象，HTML 字符串，DOM 元素的数组。</p><p>.append() 可以接受任何数量的额外的参数</p><p><em>设计上，任何 jQuery 的构造或方法，都接受一个 HTML 字符串（作为参数） - jQuery(),.append(), .after()等 -可以潜在地执行代码。这可能会出现注入 script 标签或使用 HTML 属性执行的代码（例如，<img onload="">）。不要使用这些方法来插入来自不受信任来源的内容，如网址查询参数，Cookie 或表单输入获得的字符串。这样做可能会引起跨站点脚本（XSS）漏洞。将内容添加到文档之前删除或避免用户任何输入内容。</em></p><p><em>jQuery 没有正式的支持 SVG。在 SVG 文档上使用 jQuery 方法，除非该方法有明确的说明，否则可能会导致意外的行为。例如 jQuery 3.0 中支持 SVG 的方法有 addClass 和 removeClass。</em></p><p>2 .appendTo()</p><p>然而，如果有多个目标元素，插入元素的克隆副本被创建到每个目标元素，而不是只插入到最后一个目标元素，并且新的集合（原始元素加克隆元素）被返回。</p><p>在 jQuery 1.9 以前，追加到单个元素的情况下没有创建一个新的集合，而是返回原来的集合，当被用与数目不详的元素时，使得它难以可靠地使用.end()方法。</p><p>3 .prepend()</p><p>4 .prependTo()</p><p>5 .html()</p><p>5.1 .html()</p><p>这种方法使用浏览器的 innerHTML 属性。有些浏览器返回的结果可能不是原始文档的 HTML 源代码。例如，如果属性值只包含字母数字字符，Internet Explorer 有时丢弃包裹属性值的引号。</p><p>5.2 .html( htmlString )</p><p>5.3 .html( function(index, oldhtml) )</p><p>这个 .html() 方法对 XML 文档无效.</p><p>我们可以使用 .html() 来设置元素的内容，这些元素中的任何内容会完全被新的内容取代。此外，用新的内容替换这些元素前，jQuery 从子元素删除其他结构，如数据和事件处理程序。（愚人码头注：这样可以防止内存溢出。）</p><p>这种方法使用浏览器的 innerHTML 属性。有些浏览器可能不完全复制所提供的 HTML 源代码生成 DOM。例如，Internet Explorer 的版本 8 之前转换所有链接的 href 属性为绝对 URL 路径，和 Internet Explorer 第 9 版之前，不增加一个单独的兼容层的情况下，将无法正确处理 HTML5 元素。</p><p><em>要设置一个&lt;script&gt;元素的内容， 其不包含 HTML， 使用的 .text()方法，而不是.html()。所以在定义在 script 标签中的模板应该用.html()方法获取</em></p><p><em>注意:在 Internet Explorer 中，包括第 9 版， 设置 HTML 元素的文本内容可能会破坏其子节点的文本节点，结果导致子节点的文本节点从文档中被删除。如果你想保留这些 DOM 元素的引用，需要他们将保持不变，请使用.empty().html(string)来代替.html(string)，以便从文档中删除元素之前的元素被分配到新的字符串</em></p><p>6 .text()</p><p>6.1 .text()</p><p>和 .html() 方法不同， .text() 在 XML 和 HTML 文档中都能使用。.text() 方法返回一个字符串，包含所有匹配元素的合并文本。 （由于在不同的浏览器中的 HTML 解析器的变化，返回的文本中换行和其他空白可能会有所不同。）</p><p>.text() 方法不能使用在 input 元素或 scripts 元素上。 input 或 textarea 需要使用 .val() 方法获取或设置文本值。得到 scripts 元素的值，使用.html()方法</p><p>从 jQuery 1.4 开始， .text()方法返回文本内容和作为元素节点的 CDATA 节点。</p><p>6.2 .text( text )</p><p>text<br>类型: String or Number or Boolean,<br>用于设置匹配元素内容的文本。当提供的是一个数值或布尔值得时候，那么将被转换成一个字符串表现形式，提供给这个方法。</p><p>6.3 .text( function(index, text) )</p><p>function(index, text)<br>类型: Function(),<br>用来返回设置文本内容的一个函数。接收元素的索引位置和文本值作为参数。</p><h3 id="DOM-插入-外部插入"><a href="#DOM-插入-外部插入" class="headerlink" title="DOM 插入, 外部插入"></a>DOM 插入, 外部插入</h3><p>有.after()，.before()，.insertAfter()，.insertBefore()</p><p>1 .after()</p><p>1.1 .after( content [, content ] )</p><p>1.2 .after( function )</p><p>function 类型: Function( Integer index ) =&gt; htmlString or Element or jQuery</p><p>一个返回 HTML 字符串，DOM 元素（或多个），文本节点（或多个），或 jQuery 对象的函数，返回的内容用来插入到集合中每个匹配元素的后面（愚人码头注：外部插入）。 接收元素集合中该元素的索引位置作为一个参数（index 参数）。在函数中 this 指向元素集合中的当前元素。</p><p>1.3 .after( function-html ),1.10 版本添加</p><p>function 类型: Function( Integer index, String html ) =&gt; htmlString or Element or jQuery<br>一个返回 HTML 字符串，DOM 元素，jQuery 对象的函数，返回的内容用来插入到集合中每个匹配元素的后面（愚人码头注：外部插入）。接收元素集合中该元素的索引位置（愚人码头注：index 参数）和元素的原来 HTML 值（愚人码头注：html 参数）作为参数。在函数中 this 指向元素集合中的当前元素。</p><p><em>在此之前的 jQuery1.9， 如果该集合中的第一个节点没有在文档中， .after()将尝试添加 或 在当前的 jQuery 集合改变节点，在这种情况下返回一个新的 jQuery 集合，而不是原来的集合。该方法可能会或可能不会返回一个新的结果，这取决于它的参数个数或参数的连贯性！ 从 jQuery1.9 开始，.after(), .before(), 和 .replaceWith()总是返回原始未修改的集合。 试图在一个没有父级元素的节点上使用这些方法是没有效果的，也就是说，集合和它包含的节点都不会改变。</em></p><p>2 .before()</p><p>3 .insertAfter()</p><p>4 .insertBefore()</p><h3 id="DOM-移除"><a href="#DOM-移除" class="headerlink" title="DOM 移除"></a>DOM 移除</h3><p>有.detach()，.empty()，.remove()，.unwrap()</p><p>1 .detach()</p><p>.detach( [selector ] )，从 DOM 中去掉所有匹配的元素。</p><p>.detach() 方法和.remove()一样, 除了 .detach()保存所有 jQuery 数据和被移走的元素相关联。当需要移走一个元素，不久又将该元素插入 DOM 时，这种方法很有用。</p><p>2 .empty()</p><p>从 DOM 中移除集合中匹配元素的所有子节点。</p><p>为了避免内存泄漏，jQuery 先移除子元素的数据和事件处理函数，然后移除子元素。</p><p>如果你想删除元素，不破坏他们的数据或事件处理程序（这些绑定的信息还可以在之后被重新添加回来），请使用.detach()代替</p><p>3 .remove()</p><p>.remove( [selector ] )，将匹配元素集合从 DOM 中删除。</p><p>和 .empty()相似。.remove() 将元素移出 DOM。 当我们想将元素自身移除时我们用 .remove()，同时也会移除元素内部的一切，包括绑定的事件及与该元素相关的 jQuery 数据。要删除的元素不删除数据和事件的情况下，使用.detach()来代替。</p><p>4 .unwrap()</p><p>将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置。</p><p>4.1 .unwrap()</p><p>4.2 .unwrap( [selector ] )，添加版本 3.0</p><p>selector 类型: String，<br>一个选择器，用来检查匹配的父元素。如果一个元素的父不匹配该选择器，该元素将不会被解开。 (愚人码头注：该签名官网还未提供示例，可以查看我写的简单示例：<a href="http://jsbin.com/rufaqu/edit?html,css,js,output">http://jsbin.com/rufaqu/edit?html,css,js,output</a>)</p><p>.unwrap()删除元素的父级元素。和 .wrap()的功能相反。匹配的元素（以及他们的兄弟元素，如果有的话）取代他们的父母在 DOM 结构。</p><h3 id="DOM-替换"><a href="#DOM-替换" class="headerlink" title="DOM 替换"></a>DOM 替换</h3><p>有.replaceAll()，.replaceWith()</p><p>1 .replaceAll()</p><p>.replaceAll( target )，用集合的匹配元素替换每个目标元素。</p><p>.replaceAll() 方法会删除与节点相关联的所有数据和事件处理程序 。</p><p>2 .replaceWith()</p><p>.replaceWith()方法，和大部分其他 jQuery 方法一样，返回 jQuery 对象，所以可以和其他方法链接使用， 但是需要注意的是： （original）原始 jQuery 对象被返回。该对象指向已经从 DOM 中被移除的对象，而不是指向已经取代了它的新元素。</p><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><h3 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h3><p>有.eq(),.filter(),.first(),.has(),.is(),.last(),.map(),.not(),.slice()</p><p>1 .eq()</p><p>.eq( index ),支持负值，负值从最后一个元素倒数</p><p>2 .first()</p><p>3 .last()</p><p>4 .has()</p><p>.has( selector )</p><p>.has( contained )</p><p>contained<br>类型: Element，<br>用于匹配元素的 DOM 元素。</p><p>5 .is()</p><p>5.1 .is( selector )</p><p>5.2 .is( function(index) )</p><p>5.3 .is( jQuery object )</p><p>5.4 .is( element )</p><p>6 .filter()</p><p>参数种类同上</p><p>7 .not()</p><p>从匹配的元素集合中移除指定的元素。参数同理</p><p>8 .map()</p><p>.map( callback(index, domElement) )</p><p>如果你想处理一个简单的数组或对象中，使用 jQuery.map()代替。</p><p>由于返回值是一个 jQuery 包裹的数组，所以通常会使用 get()方法将其转换成普通的数组。</p><p>.map()方法特别适用于获取或设置元素集合中的值,如下获取一组 checkbox 的值</p><pre><code>$(&#39;:checkbox&#39;).map(function() &#123;  return this.id;&#125;).get().join();</code></pre><p>在回调函数中，this 指向每次迭代中的当前 DOM 元素。该函数可以返回一个单独的数据或数据数组，并在结果集合中插入。如果数组返回，数组中的元素插入到集合。如果函数返回 null 或 undefined ，没有元素将被插入。</p><p>将一组 div 等高：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;  &lt;style&gt;div &#123; width: 40px; float:left; &#125;input &#123; clear:left&#125;  &lt;/style&gt;  &lt;script src=&quot;http://code.jquery.com/jquery-latest.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;button&quot; value=&quot;equalize div heights&quot;&gt;&lt;div style=&quot;background:red; height: 40px; &quot;&gt;&lt;/div&gt;&lt;div style=&quot;background:green; height: 70px;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;background:blue; height: 50px; &quot;&gt;&lt;/div&gt;&lt;script&gt;$.fn.equalizeHeights = function() &#123;  var maxHeight = this.map(function(i,e) &#123; //this为实例，即jquery对象    return $(e).height();  &#125;).get();  return this.height( Math.max.apply(this, maxHeight) );&#125;;$(&#39;input&#39;).click(function()&#123;  $(&#39;div&#39;).equalizeHeights();&#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>9 .slice()</p><p>.slice( start [, end ] )</p><p>根据指定的下标范围，过滤匹配的元素集合，并生成一个新的 jQuery 对象。</p><p>jQuery 的.slice()方法是仿照的 JavaScript 数组的.slice()方法。其中的一个功能就是允许传入负的 start 和 end 参数。如果传递的是负数，那么下标位置是从结尾开始的，而不是从起始位置开始。</p><h3 id="各种遍历"><a href="#各种遍历" class="headerlink" title="各种遍历"></a>各种遍历</h3><p>.add()，.contents()，.each()，.end()</p><p>1 .add()</p><p>创建一个新的 jQuery 对象 ，元素添加到匹配的元素集合中。</p><p>1.1 .add( selector )</p><p>1.2 .add( elements )</p><p>1.3 .add( html )</p><p>1.4 .add( jQuery object )</p><p>1.5 .add( selector, context )</p><p>2 .contents()</p><p>获得匹配元素集合中每个元素的子元素，包括文字和注释节点。</p><p>给定一个 jQuery 对象，表示一个 DOM 元素的集合，.contents()方法允许我们通过 DOM 树中查找集合中的直接子元素，并根据匹配的元素创建一个新的 jQuery 对象。.contents()和.children()方法类似，只不过前者包括文本节点和注释节点，以及 jQuery 对象中产生的 HTML 元素。请注意，虽然这种方式可以传递文本节点和注释节点给一个 jQuery 集合，但是大多数操作不会支持他们。少数几个支持的操作将在他们的 API 文档页面中有一个明确的说明。</p><p>如果 iframe 与主页同域，.contents()方法也可用于获取 iframe 中的文件内容。</p><p>3 .each()</p><p>遍历一个 jQuery 对象，为每个匹配元素执行一个函数。</p><p>我们可以通过返回 false 以便在回调函数内中止循环。</p><p>注意: jQuery 的方法，返回一个 jQuery 对象遍历 jQuery 集合中的元素 - 被称为隐式迭代的过程。当这种情况发生时，它通常不需要显式地循环的.each()方法：</p><p>4 .end()</p><p>终止在当前链的最新过滤操作，并返回匹配的元素的以前状态。</p><p>大多数 jQueryDOM 遍历 方法来操作 jQuery 对象实例，并创建一个新的对象，匹配一个不同的 DOM 元素集合。当发生这种情况时，实际上是新的元素集合被压入到对象内部维护的栈中。每次过滤方法都会被压入栈中。当我们需要返回到前一个状态时，我们可以使用 end() 进行出栈操作，来返回栈中的前一个状态。</p><h3 id="树遍历"><a href="#树遍历" class="headerlink" title="树遍历"></a>树遍历</h3><p>有.addBack()，.children()，.find()，.closest()，.parent()，.parents()，.parentsUntil()，.next()，.nextAll()，.nextUntil()，.prev()，.prevAll()，.prevUntil()，.siblings()</p><p>1 .addBack()</p><p>.addBack( [selector ] )</p><p>添加堆栈中元素集合到当前集合，一个选择性的过滤选择器。</p><p>如上所述在讨论中的.end()， jQuery 对象维护一个堆栈内部来跟踪匹配的元素集合的变化。当一个 DOM 遍历方法被调用时，新的元素集合推入到堆栈中。 如果还需要包含先前的元素集合，.addBack() 可以提供帮助。</p><pre><code>$(&#39;li.third-item&#39;).nextAll().addBack()</code></pre><p>.css(‘background-color’, ‘red’);</p><p>2 .children()</p><p>.children()方法允许我们通过在 DOM 树中对这些元素的直接子元素进行搜索，并且构造一个新的匹配元素的 jQuery 对象。.find()和.children()方法是相似的，但后者只是针对向下一个级别的 DOM 树。还要注意的是和大多数的 jQuery 方法一样，.children()不返回文本节点;让所有子元素包括使用文字和注释节点，建议使用.contents()。</p><p>3 .find()</p><p>.find( selector )</p><p>.find( element ) 元素或 jQuery 对象</p><p>4 .closest()</p><p>从元素本身开始，在 DOM 树上逐级向上级元素匹配，并返回最先匹配的祖先元素。</p><p>.parents()和.closest()方法类似，它们都在 DOM 树遍历了。两者之间的差异，尽管细微，是重要的：</p><ul><li>.closest()开始于当前元素，.parents()开始于父元素</li><li>.closest()在 DOM 树中向上遍历，直到找到与提供的选择器相匹配的元素，.parents()向上遍历 DOM 树到文档的根元素，每个祖先元素加入到临时集合，如果提供一个选择器，则会使用该选择器在集合中进行过滤</li><li>.closest()返回包含零个或一个元素的 jQuery 对象，.parents()返回包含零个，一个或多个元素的 jQuery 对象</li></ul><p>5 .parent()</p><p>6 .parents()</p><p>.parents()和.parent()方法是相似的，但后者只是进行了一个单级的 DOM 树查找（愚人码头注：也就是只查找一层，直接的父元素，而不是更加上级的祖先元素）。此外，$( “html” ).parent()方法返回一个包含document的集合，而$( “html” ).parents()返回一个空集合。</p><p>7 ..parentsUntil()</p><p>8 .next()</p><p>9 .nextAll()</p><p>10 .nextUntil()</p><p>11 .prev()</p><p>12 .prevAll()</p><p>13 .prevUntil()</p><p>14 .siblings()</p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="浏览器事件"><a href="#浏览器事件" class="headerlink" title="浏览器事件"></a>浏览器事件</h3><p>1 .resize()</p><p>1.1 .resize( handler(eventObject) )</p><p>1.2 .resize( [eventData ], handler(eventObject) )</p><p>1.3 .resize()</p><p>这个函数的前两个用法是 .bind(‘resize’, handler) 的快捷方式，第 3 个不带参数的用法是 .trigger(‘resize’) 的快捷方式。</p><p>当浏览器 window 的尺寸改变时，window 元素上绑定的 resize 事件将被触发</p><p>2 .scroll()</p><p>当用户在元素内执行了滚动操作，就会在这个元素上触发 scroll 事件。它适用于 window 对象，但也可以是可滚动 frames 与 CSS overflow 属性设置为 scroll 的元素（或 auto 时，元素的显示高度小于其内容高度）</p><p>每当元素的滚动位置的变化时，该元素就会触发 scroll 事件，不管什么原因。鼠标点击或拖动滚动条，拖动里面的元素，按箭头键，或使用鼠标的滚轮都可能导致触发此事件。</p><h3 id="文档加载"><a href="#文档加载" class="headerlink" title="文档加载"></a>文档加载</h3><p>1 jQuery.holdReady()</p><p>暂停或恢复.ready() 事件的执行。</p><p>jQuery.holdReady( hold )</p><p>hold 类型: Boolean</p><p>指示是否暂停或恢复被请求的 ready 事件</p><p>在$.holdReady()方法允许调用者延迟 jQuery 的 ready 事件。这种先进的功能，通常会被用来允许在 ready 事件发生之前，动态加载其它的 JavaScript，例如 jQuery 插件，即使 DOM 可能已经准备就绪。该方法必须在文档早期被调用，例如，在 <head> 中加载完 jQuery 脚本之后，立刻调用该方法。如果在 ready 事件已经被调用后再调用该方法，将不会起作用。</p><p>为了延迟 ready 事件，首先要调用 $.holdReady(true)，当 ready 事件准备执行时，再调用 $.holdReady(false) 。注意，在 ready 事件中可以设置多个 hold。每一个都对应一次 $.holdReady(true) 调用。直到所有的 hold 都被释放，也就是调用了对应数量的 $.holdReady(false)之后，并且满足正常的文档 ready 条件时，ready 事件才会被真正执行。（见 ready 的更多信息。）)</p><pre><code>$.holdReady(true);$.getScript(&quot;myplugin.js&quot;, function() &#123;  $.holdReady(false);&#125;);</code></pre><p>2 .ready()</p><p>当 DOM 准备就绪时，指定一个函数来执行。</p><p>大多数浏览器提供了 DOMContentLoaded 事件形式的类似功能。 然而，jQuery 的 .ready() 方法的不同之处在于它是一个重要并且有效的方法：在代码调用.ready( handler )之前，如果 DOM 已经准备就绪并且浏览器已经触发 DOMContentLoaded，handler 处理函数仍然会被执行。 相反，如果 DOMContentLoaded 事件侦听器在这个事件触发后才被添加进来，那么这个 DOMContentLoaded 事件的处理程序将永远不会被执行。</p><p>浏览器还提供了 window 对象上的 load 事件。当这个事件触发时候，表明该网页上的所有资源已加载，包括图像。此事件可以使用 jQuery 的$( window ).on( “load”, handler )监听。当代码依赖加载的资源情况下，（例如，必需知道图像的尺寸时），那么代码应放置在一个 load 事件的处理程序中。</p><p>值得注意的是，虽然 DOM 准备就绪（ready）总是在页面被完全加载之前，但是在已经生效执行的 .ready() 处理程序代码中绑定 load 事件侦听器，通常是不安全的。例如，在页面加载后，可以使用一些方法动态加载脚本，如$.getScript() 。虽然动态加载的脚本中的 .ready() 处理程序始终会被执行， 但是在动态加载脚本中的 window 的 load 事件已经触发过了，所以那些 load 事件监听器将永远不会运行。</p><p>jQuery 提供了几种方法来绑定函数，当 DOM 已准备就绪时，绑定的函数将会运行。在 jQuery 3.0 中，只建议使用第一种语法（愚人码头注：即 $( handler )）; 其他语法仍然能正常工作，但已被标记为弃用（愚人码头注：将来的某个版本会被删除）。$(document).on( “ready”, handler ),从 jQuery 1.8 开始已被标记为弃用，在 jQuery 3.0 中已经被删除。请注意。</p><p>当$快捷方式不再可用时，$.noConflict()可以用于避免命名空间冲突。然而，传递给.ready() 的处理函数可以传递一个引用 jQuery 对象的参数。这使得处理程序中能够使用 jQuery 对象，例如，用作$,这样就可以不用关心它的别名：</p><pre><code>jq2 = jQuery.noConflict();jq2(function( $ ) &#123;  // 在这个代码块中可以像往常一样使用 $ ;实际的jQuery 对象是 jq2&#125;);</code></pre><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>1 .bind()</p><p>在 jQuery 3.0 中，.bind()已被标记为弃用。从 jQuery 1.7 开始，.on() 方法是将事件处理程序绑定到文档（document）的首选方法。所以我们不建议使用该方法。</p><p>2 .delegate()</p><p>在 jQuery 3.0 中，.delegate()已被标记为弃用。从 jQuery 1.7 开始，它已经被.on()方法取代。所以我们不建议使用该方法。</p><p>3 .on()</p><p>3.1 .on( events [, selector ] [, data ], handler(eventObject) )</p><p>events<br>类型: String，<br>一个或多个空格分隔的事件类型和可选的命名空间，或仅仅是命名空间，比如”click”, “keydown.myPlugin”, 或者 “.myPlugin”。</p><p>selector<br>类型: String，<br>一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素。如果选择器是 null 或者忽略了该选择器，那么被选中的元素总是能触发事件。，</p><p>data<br>类型: Anything，<br>当一个事件被触发时，要传递给事件处理函数的 event.data。</p><p>handler(eventObject)<br>类型: Function()，<br>事件被触发时，执行的函数。若该函数只是要执行 return false 的话，那么该参数位置可以直接简写成 false。</p><p>3.2 .on( events [, selector ] [, data ] )</p><p>events<br>类型: PlainObject，<br>一个对象，键是由一个或多个由空格分隔的事件类型及可选的名字空间，值是这些事件类型所对应的事件处理函数。</p><p>selector<br>类型: String，<br>一个选择器字符串，用于过滤出被选中的元素中能触发事件的后代元素。如果选择器是 null 或者忽略了该选择器，那么被选中的元素总是能触发事件。</p><p>data<br>类型: Anything，<br>当一个事件被触发时，要传递给事件处理函数的 event.data。</p><p>（1）Event names and namespaces（事件名称和命名空间）</p><p>事件名称可以添加指定的 event namespaces（命名空间） 来简化删除或触发事件。例如，”click.myPlugin.simple”为 click 事件同时定义了两个命名空间 myPlugin 和 simple。通过上述方法绑定的 click 事件处理，可以用.off(“click.myPlugin”) 或 .off(“click.simple”)删除绑定到相应元素的 Click 事件处理程序，而不会干扰其他绑定在该元素上的“click（点击）” 事件。命名空间类似 CSS 类，因为它们是不分层次的;只需要有一个名字相匹配即可。以下划线开头的名字空间是供 jQuery 使用的。</p><p>在.on()方法的第二种用法中，events 参数是一个 JavaScript 对象或者键值对。键等同于 events 参数，用空格分隔的事件名称字符串和可选命名空间。每个键的值是一个函数（或 false 的值），相当于 handler 参数，但是该值并不是方法中的最后一个参数。在其它方面，这两种形式在下面描述的内容中其行为都是相同的。</p><p>（2）Direct and delegated events（直接和委托的事件）</p><p>除了可以给未创建的后代元素绑定事件外，代理事件的另一个好处就是，当需要监视很多元素的时候，代理事件的开销更小。</p><p>注意: 委托事件不能用于 SVG.</p><p>（3）The event handler and its environment（事件处理程序和它的环境）</p><p>默认情况下，大多数事件的冒泡从最初的 event target（目标元素） 开始的，直到 document 元素。每个元素都沿着 DOM 层级这条路，jQuery 会调用任何匹配的已被绑定的事件处理程序。一个处理程序可以调用的 event.stopPropagation()防止事件向上冒泡文档树（从而防止这些元素的处理程序运行）。任何绑定到当前元素上的其他处理程序都将运行，为了防止这种情况，可以调用 event.stopImmediatePropagation()。（绑定在元素上的事件被调用的顺序和它们被绑定的顺序时一样的。 ）</p><p>类似地，一个处理程序可以调用的 event.preventDefault()取消浏览器默认操作行为。</p><p>调用 event.stopPropagation() 和 event.preventDefault()会从一个事件处理程序会自动返回 false。也可以直接将 false 当作 handler 的参数，作为 function(){ return false; } 的简写形式。</p><p>当 jQuery 的调用处理程序时，this 关键字指向的是当前正在执行事件的元素。对于直接事件而言，this 代表绑定事件的元素。对于代理事件而言，this 则代表了与 selector 相匹配的元素。(注意，如果事件是从后代元素冒泡上来的话，那么 this 就有可能不等于 event.target。)若要使用 jQuery 的相关方法，可以根据当前元素创建一个 jQuery 对象，即使用 $(this)。</p><p>（4） Passing data to the handler（将数据传递到处理程序）</p><p>如果 data 参数给.on()并且不是 null 或者 undefined，那么每次触发事件时，event.data 都传递给处理程序。data 参数可以是任何类型，但如果是字符串类型时，那么 selector 参数必须提供，或明确地传递 null，这样的 data 参数不会误认为是选择器。最好是使用一个对象（键值对） ，所以可以作为属性传递多个值。</p><p>jQuery 的 1.4 以后 ，相同的事件处理程序可以多次绑定到一个元素。这对于使用 event.data 功能，或者在闭包中使用唯一的数据时是特别有用的。例如：</p><pre><code>function greet( event ) &#123;  alert( &quot;Hello &quot; + event.data.name );&#125;$( &quot;button&quot; ).on( &quot;click&quot;, &#123;  name: &quot;Karl&quot;&#125;, greet );$( &quot;button&quot; ).on( &quot;click&quot;, &#123;  name: &quot;Addy&quot;&#125;, greet );</code></pre><p>按一下按钮时，上面的代码会产生两个不同的警告（alert）。</p><p>除了可以向 .on() 方法传入 data 参数外，还可以向 .trigger() 或 .triggerHandler() 中传入该参数。 这种方式提供数据（Data）被传递给事件处理程序的 Event 对象内，作为进一步的参数。 如果传递给.trigger() 和 .triggerHandler()的第二个参数是一个数组， 数组中的每个元素将作为事件处理程序的单独参数。</p><p>（5）Event performance（事件性能）</p><p>对于高频率事件，可以按如下的办法提高事件的性能：</p><ul><li>减少事件处理函数中的工作量；</li><li>对于在事件处理函数中要用到的信息做好缓存而不是再重新计算一次；</li><li>或使用 setTimeout 限制的页面更新的实际次数。</li></ul><p>为了获得更好的性能，在绑定代理事件时，绑定的元素最好尽可能的靠近目标元素。避免在大型文档中，过多的在 document 或 document.body 上添加代理事件。</p><p>若代理事件的选择器使用了过于复杂的形式，特别是使用了分层选择器的情况，虽然说这样做会大大的降低性能，但是对于大多数应用而言，它的速度依然是足够快的。通过为寻找更合适的元素绑定事件的方法，就可以很简单的避免使用分层选择器的情况。</p><p>（6）Additional notes（其他注意事项）</p><p>虽然不建议，伪类事件名称”hover”可以作为”mouseenter mouseleave”的缩写使用。不要与 接受两个函数的.hover()方法混淆，这里只用一个处理函数绑定到伪类事件名称”hover”;处理程序应该检查的 event.type 以确定是否是 mouseenter 或 mouseleave 事件。</p><p>jQuery 的事件系统需要一个 DOM 元素可以通过元素的属性附加数据，使事件就可以被跟踪和传递。object, embed, 和 applet 元素不能绑定数据，因此不能有 jQuery 的事件绑定。</p><p>W3C 指定明确指定 focus 和 blur 事件没有冒泡，但是 jQuery 定义的跨浏览器的 focusin 和 focusout 事件，并且可以冒泡。当 focus 和 blur 绑定委派的事件处理程序时，jQuery 分析名称，并提供将他们分别交付给 focusin 和 focusout。为了保持一致性和清晰度，使用冒泡事件类型的名称。</p><p>在所有的浏览器，load ，scroll, 和 error 事件(例如, 在一个 <img> 元素上)不会冒泡。在 Internet Explorer 8 和更低，paste 和 reset 事件不会冒泡，这样的事件是不支持委派使用，但若事件处理函数是直接绑定在产生事件的元素上的话，是可以使用这些事件的。</p><p>window 对象上的 error 事件使用非标准的参数和返回值约定，所以 jQuery 不支持该事件。作为替代，直接用 window.onerror 属性分配一个处理函数。</p><p>当事件被首次触发时，处理函数列表才会被设置到元素上。当前元素上添加或删除事件处理函数不会立即生效，直到下一次的事件被处理。 为了避免任何后续事件处理函数在一个元素的事件处理函数中执行，调用 event.stopImmediatePropagation() 这种行为违反了<a href="https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget-removeEventListener">W3C 的事件规范</a>。 为了更好地了解这种情况下，考虑下面的代码：</p><pre><code>var $test = $( &quot;#test&quot; );function handler1() &#123;  console.log( &quot;handler1&quot; );  $test.off( &quot;click&quot;, handler2 );&#125;function handler2() &#123;  console.log( &quot;handler2&quot; );&#125;$test.on( &quot;click&quot;, handler1 );$test.on( &quot;click&quot;, handler2 );</code></pre><p>在上面的代码，handler2 第一次无论如何都会被执行，即使使用.off()删除。 然而，该处理函数在下一次 click 事件被触发时将不执行。（愚人码头注：查看代码运行效果：<a href="http://jsfiddle.net/feiwen8772/dgxru81d/%EF%BC%89">http://jsfiddle.net/feiwen8772/dgxru81d/）</a></p><p>（7）一些事例</p><p>传递一个数组给.trigger()的事件处理程序，作为第二个参数。</p><pre><code>$( &quot;div&quot; ).on( &quot;click&quot;, function( event, salutation, name ) &#123;  alert( salutation + &quot;, &quot; + name );&#125;);$( &quot;div&quot; ).trigger( &quot;click&quot;, [ &quot;Goodbye&quot;, &quot;Jim&quot; ] );</code></pre><p>添加并触发自定义事件（非浏览器事件）。</p><pre><code>&lt;!doctype html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;title&gt;on demo&lt;/title&gt;  &lt;style&gt;  p &#123;    color: red;  &#125;  span &#123;    color: blue;  &#125;  &lt;/style&gt;  &lt;script src=&quot;//code.jquery.com/jquery-1.10.2.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Has an attached custom event.&lt;/p&gt;&lt;button&gt;Trigger custom event&lt;/button&gt;&lt;span style=&quot;display:none;&quot;&gt;&lt;/span&gt;&lt;script&gt;$( &quot;p&quot; ).on( &quot;myCustomEvent&quot;, function( event, myName ) &#123;  $( this ).text( myName + &quot;, hi there!&quot; );  $( &quot;span&quot; )    .stop()    .css( &quot;opacity&quot;, 1 )    .text( &quot;myName = &quot; + myName )    .fadeIn( 30 )    .fadeOut( 1000 );&#125;);$( &quot;button&quot; ).click(function () &#123;  $( &quot;p&quot; ).trigger( &quot;myCustomEvent&quot;, [ &quot;John&quot; ] );&#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>使用 对象 同时添加多个事件处理函数。</p><pre><code>$( &quot;div.test&quot; ).on(&#123;  click: function() &#123;    $( this ).toggleClass( &quot;active&quot; );  &#125;, mouseenter: function() &#123;    $( this ).addClass( &quot;inside&quot; );  &#125;, mouseleave: function() &#123;    $( this ).removeClass( &quot;inside&quot; );  &#125;&#125;);</code></pre><p>在同一个元素上绑定多个事件，一个 mouseenter 和 mouseleave：</p><pre><code>$( &quot;#cart&quot; ).on( &quot;mouseenter mouseleave&quot;, function( event ) &#123;  $( this ).toggleClass( &quot;active&quot; );&#125;);</code></pre><p>4 .off()</p><p>5 .one()</p><p>6 .trigger()</p><pre><code>$(&#39;#foo&#39;).on(&#39;custom&#39;, function(event, param1, param2) &#123;  alert(param1 + &quot;\n&quot; + param2);&#125;);$(&#39;#foo&#39;).trigger(&#39;custom&#39;, [&#39;Custom&#39;, &#39;Event&#39;]);</code></pre><p>注意: 对于非 window 的普通的对象和 DOM 对象， 如果一个触发事件名称和对象的一个属性名称相匹配， 如果事件处理程序没有调用 event.preventDefault()，jQuery 将尝试调用属性的方法。 如果不希望这种行为发生，请使用.triggerHandler() 来代替。（愚人码头注 .triggerHandler() 方法并不会触发事件的默认行为。）</p><p>注意: 和.triggerHandler()一样， 当调用.trigger()时，当一个事件名称匹配对象上属性名称时，属性名称会加上 on 前缀（如，在 具有非空 onclick 方法的 window 上触发 click）， jQuery 将尝试调用该属性作为方法。</p><p>注意: 当通过一个普通的对象不是类数组触发时 但仍然包含了 length 属性， 你应该传递对象到数组中（例如：[ { length: 1 } ]）。</p><p>7 .triggerHandler()</p><p>这个方法的行为与 .trigger() 相似，不同之处有如下几点：</p><ul><li><p>.triggerHandler( “event” )方法被触发时不会调用元素上的 .event()。 这意味着在表单上触发 .triggerHandler( “submit” )将不会调用表单上的.submit()。（愚人码头注：可以理解为.triggerHandler() 方法并不会触发事件的默认行为。(例如，表单提交)。）</p></li><li><p>.trigger() 会影响所有与 jQuery 对象相匹配的元素，而 .triggerHandler() 仅影响第一个匹配到的元素。</p></li><li><p>使用 .triggerHandler() 触发的事件，并不会在 DOM 树中向上冒泡。 如果它们不是由目标元素直接触发的，那么它就不会进行任何处理。<br>与普通的方法返回 jQuery 对象(这样就能够使用链式用法)相反，.triggerHandler()返回最后一个处理的事件的返回值。如果没有触发任何事件，会返回 undefined。</p></li></ul><p>8 .unbind()</p><p>在 jQuery 3.0 中，.unbind()已被标记为弃用。从 jQuery 1.7 开始，它已经被.off()方法取代。所以我们不建议使用该方法。</p><p>9 .undelegate()</p><p>在 jQuery 3.0 中，.undelegate()已被标记为弃用。从 jQuery 1.7 开始，它已经被.off()方法取代。所以我们不建议使用该方法。</p><h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><p>1 .blur()</p><p>一个元素失去焦点将触发 blur 事件。起初，这个事件仅适用于表单元素，如元素<input> 。在最新的浏览器中，这个事件适用范围已经扩大到包括所有元素类型。一个元素可以通过键盘命令失去焦点，比如 tab 键，或用鼠标点击网页上的其他地方。</p><p>应用不带参数的.blur()，我们可以手动触发这个事件:</p><p>2 .change()</p><p>一个元素的值改变的时候将触发 change 事件。此事件仅限用于<input>元素，<textarea>和<select>元素。对于下拉选择框，复选框和单选按钮，当用户用鼠标作出选择，该事件立即触发，但对于其他类型的 input 元素，该事件触发将推迟，直到元素失去焦点才会触发。</p><p>注意: 使用 JavaScript 改变输入元素的值，例如使用.val()，将不会触发该事件。</p><p>3 .focus()</p><p>当一个元素获得焦点时，focus 事件被触发。此事件起初适用于有限的元素，比如表单元素（<input>, <select>等）和链接元素（<a href>）。在最近版本的浏览器中，该事件可以扩展到所有包括通过显式设置 tabindex 属性的元素类型。一个元素可以通过键盘命令获得焦点，如 Tab 键，或按鼠标点击的元素。</p><p>试图将焦点设置到一个隐藏的元素在 Internet Explorer 中导致错误。请注意，.focus()只能在可见元素上使用。要在一个元素执行 focus 事件却又不想让这个元素获取焦点的话， 请使用.triggerHandler(“focus”) 来代替 .focus()。</p><p>focus 事件不会在 Internet Explorer 中冒泡。因此，用 focus 事件委派，跨浏览器无法正常工作。但是，在 1.4.2 版本， jQuery 的解决此限制，将 focus 模拟为 focusin 事件</p><p>4 .select()</p><p>当用户在一个元素中进行文本选择时，这个元素上的 select 事件就会被触发。此事件只能用在<input type="text"> 和<textarea>。</p><p>用于检索当前选定文本的方法在各个浏览器中是不同的。jQuery 的一个插件都提供跨平台的解决方案。</p><p>5 .submit()</p><p>当用户试图提交表单时，就会在这个表单元素上触发 submit 事件。它只能绑定在<form>元素上。以下几种情况会导致表单被提交：用户点击了<input type="submit">, <input type="image">, 或者 <button type="submit">，或者当某些表单元素获取焦点时，敲击 Enter（回车键），都可以提交。</p><p>根据不同的浏览器，Enter 键可能会导致表单被提交，如果这个表单只有一个文本框或只有一个 submit 按钮的话。界面不应该依赖于这个键的特殊行为，除非已经使用了 keypress 事件来监听 Enter 键的按下。</p><p>我们可以通过调用事件对象的.preventDefault()或在处理函数中返回 false 来取消提交：</p><p>在 Internet Explorer 中，JavaScript 的 submit 事件不会冒泡。但是，依赖 submit 事件代理的脚本，从 jQuery 1.4 开始，可以跨浏览器正常使用。</p><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p>1 .keydown()</p><p>当用户在一个元素上按下键盘上的键的时候，keydown 事件就会发送给这个元素。 如果按下该键不放（保持按下状态），事件被重复发送到该键，时间间隔取决于操作系统。它可以绑定到任何元素，但该事件只是发送到具有焦点的元素上。不同的浏览器中，可获得焦点的元素略有不同，但是表单元素总是能获取焦点，所以对于此事件类型表单元素是最合适的。</p><p>如果需要任何按键被捕获（例如，要实现网页全局上的快捷键），那么把这个事件附加到 document 对象上是非常有用的。所有的按键事件都会沿着各自的 DOM 树冒泡到 document 对象上，除非明确停止。</p><p>要确定哪个键被按下，我们可以检测传递给处理函数的 event 对象。而浏览器使用不同的属性来存储这些信息，jQuery 的规范了.which 属性，以便我们能够可靠地使用它来检索关键代码。此代码对应一个键盘上的按键，包括像方向键这种特殊键的代码，如果要捕获实际输入文本， .keypress()可能是一个更好的选择。</p><p>2 .keypress()</p><p>注意:：由于 keypress 事件没有统一的官方规范说明，所以在不同的浏览器，不同的浏览器版本，和不同的平台实际使用这个事件时可能遇到的问题。</p><p>当浏览器捕获一个元素上键盘输入时，keypress 就会发送个元素。这是类似 keydown 事件，除了当按键被一直按下（即连续插入字符的场合）时的处理。如果用户按下并按住这个键（不松开释放）的时候，keydown 事件只触发一次，但是 keypress 会在每个字符插入的时候都会触发事件。此外，组合键（如 Shift）会触发 keydown 事件，但不会触发 keypress 事件。</p><p>值得注意的是 keydown 和 keyup 提供一个代码，表示哪一个键被按下，而 keypress 表示被输入哪个字符。例如，按下了小写的 “a”，在 keydown 和 keyup 中，对应该键的代码是 65，但是对于 keypress 而言，接收到的代码是 97。如果是大写 “A” 的话，则所有的相关事件接收到的代码都是 65。由于这个区别，若想捕获敲击了哪个特殊键的话，例如，方向键，使用 .keydown()或.keyup() 更好。</p><p>在文本框中按下某个键时，显示 event 对象。注意：输出 event 对象时，要依赖一个简单的 $.print() 插件 (<a href="http://api.jquery.com/scripts/events.js)%E3%80%82">http://api.jquery.com/scripts/events.js)。</a></p><p>3 .keyup()</p><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>1 .click()</p><p>2 .contextmenu()</p><p>当在一个元素上点击鼠标的右键时,contextmenu 事件被发送到这个元素上,但在显示的上下文菜单(右键菜单)之前。 这时上下文菜单键被按下，该事件在 html 元素上被触发。 任何 HTML 元素都可以接受此事件。</p><p>3 .dblclick()</p><p>在同一元素上同时绑定 click 和 dblclick 事件是不可取的。各个浏览器事件触发的顺序是不同的，一些浏览器在 dblclick 之前接受两个 click 事件 ，而和其它浏览器只接受一个 click 事件。用户往往可通过不同的操作系统和浏览器配置双击灵敏度（两次点击之间的最大时间被检测为双击）</p><p>4 .focusin()</p><p>focusin 事件会在元素（或者其内部的任何元素）获得焦点时触发。这跟 focus 事件的显著区别在于，它可以在父元素上检测子元素获得焦点的情况(换而言之，它支持事件冒泡)。</p><p>5 .focusout()</p><p>focusout 事件会在元素（或者其内部的任何元素）失去焦点时触发。这跟 blur 事件的显著区别在于，它可以在父元素上检测子元素失去焦点的情况(换而言之，它支持事件冒泡)。</p><p>6 .hover()</p><p>.hover()方法是同时绑定 mouseenter 和 mouseleave 事件</p><p>7 .mousedown()</p><p>任何鼠标按钮被按下时 mousedown 事件就会被发送。若要区分是哪个键被按下了，我们可以使用 event 对象的 which 属性。并非所有浏览器都支持这个属性（在 IE 中，要使用 button 属性来代替），但是 jQuery 对该属性进行了标准化，因此你可以放心的在任何浏览器中使用该属性。敲击鼠标左键 which 的值是 1，敲击鼠标中键 which 的值是 2，敲击鼠标右键 which 的值是 3。</p><p>此事件主要用于确保主要按钮是用来开始拖动操作;如果不进行这样的判断，当用户尝试使用上下文菜单，可能会出现奇怪的结果。虽然可以通过这些属性，来检测鼠标中键和右键的点击，但不一定是可靠的。例如，在 Opera 和 Safari 中，默认情况下是无法检测鼠标右键的点击的。</p><p>如果在一个元素按住了鼠标不放，并且拖动鼠标离开这个元素，并释放鼠标键，这仍然是算作 mousedown 事件。在大多数的用户界面，这个动作的顺序被视为一个“取消”的按键，所以通常最好使用 click 事件，除非我们知道 mousedown 事件针对一个特定情况较好。</p><p>8 .mouseup()</p><p>9 .mouseenter()</p><p>mouseenter 事件和 mouseover 的不同之处是事件的冒泡的方式。如果 mouseover 在这个例子中使用了，然后当鼠标指针在 Inner 元素上移动，该处理程序将被触发。这通常是不受欢迎的行为。另一方面, mouseenter 事件只会在绑定它的元素上被调用，而不会在后代节点上被触发。</p><p>10 .mouseleave()</p><p>mouseleave 事件和 mouseover 的不同之处是事件的冒泡的方式。如果 mouseover 在这个例子中使用了，然后当鼠标指针在 Inner 元素上移出，该处理程序将被触发。这通常是不受欢迎的行为。另一方面, mouseleave 事件只会在绑定它的元素上被调用，而不会在后代节点上被触发</p><p>11 .mousemove()</p><p>当跟踪鼠标移动时，我们通常需要知道实际的鼠标指针的位置。event 对象传递给处理程序包含了一些有关鼠标的坐标信息。比如.clientX, .offsetX, 和 .pageX 属性是有效的，但对他们的支持不同浏览器。幸运的是，jQuery 的规范了.pageX 和.pageY 属性，以便他们能够在所有浏览器上使用。这些属性提供了鼠标指针位置相对于页面的左上角的 X 和 Y 坐标。</p><p>我们必须记住， mousemove 事件是当鼠标指针移动时触发的，即使是一个像素。这意味着多个事件在短时间内被触发。如果处理器做任何重大的处理，或者如果该事件存在多个处理函数，这可能造成浏览器的严重的性能问题。因此，优化 mousemove 处理程序尽可能，这一点很重要，当不再需要他们时应尽快解除绑定。</p><p>一个常见的模式是在 mousedown 处理器内部绑定 mousemove 处理器，并在一个相应 mouseup 处理函数解除绑定。要实现这一系列事件，请记住，与 mouseup 事件相比，mouseup 事件可能会被发送到不同的 HTML 元素上。由于这个原因，mouseup 事件通常应该绑定在更高的 DOM 树中，例如 <body>。</p><p>12 .mouseout()</p><p>由于此事件类型冒泡，可能导致引起的很多头痛的问题。例如，在这个例子中当鼠标指针移出 Inner 元素，mouseout 事件将被发送到 Inner 元素，然后冒泡到 Outer 元素 。这可能会不合时宜的触发绑定的 mouseout 处理函数。这可以用一个替代方法，见讨论. mouseleave ()。</p><p>13 .mouseover()</p><p>由于此事件类型冒泡，可能导致引起的很多头痛的问题。例如，在这个例子中当鼠标指针移出 Inner 元素，mouseover 事件将被发送到 Inner 元素，然后冒泡到 Outer 元素 。这可能会不合时宜的触发绑定的 mouseover 处理函数。这可以用一个替代方法，见讨论. mouseenter ()。</p><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>1 event.currentTarget</p><p>在事件冒泡过程中的当前 DOM 元素。</p><p>这个属性总是等于函数的 this。</p><p>如果您使用 jQuery.proxy 或另一种形式操作作用域，this 将等于您所提供的 context（上下文），而不是 event.currentTarget</p><p>2 event.target</p><p>target 属性可以是注册事件时的元素，或者它的子元素。通常用于比较 event.target 和 this 来确定事件是不是由于冒泡而触发的。经常用于事件冒泡时处理事件委托。</p><p>3 event.relatedTarget</p><p>在事件中涉及的其它任何 DOM 元素。</p><p>对于 mouseout 事件，它指向被进入的元素；对于 mouseover 事件，它指向被离开的元素。</p><p>4 event.data</p><p>当当前正在执行的处理程序绑定时，一个可选的数据对象传递给一个事件方法。</p><p>5 event.type</p><p>6 event.timeStamp</p><p>通过在代码中获得两个点之间的 event.timeStamp 值，并给出差值来分析事件的性能，此属性是很有用的。如果只是要确定当前的时间内的事件处理程序，使用(new Date).getTime()来代替。</p><p>7 event.which</p><p>event.which 将 event.keyCode 和 event.charCode 标准化了。推荐用 event.which 来监视键盘输入。更多细节请参阅： event.charCode on the MDN.</p><p>event.which 也将正常化的按钮按下(mousedown 和 mouseupevents)，左键报告 1，中间键报告 2，右键报告 3。使用 event.which 代替 event.button。</p><p>8 event.namespace</p><p>当事件被触发时此属性包含指定的命名空间。</p><p>这属性主要提供给插件作者用来处理的不同任务，具体取决于事件使用的命名空间。</p><p>9 event.result</p><p>事件被触发的一个事件处理程序的最后返回值，除非值是 undefined。</p><p>此属性当获取自定义事件前一个返回值时非常有用的。</p><p>10 event.pageX</p><p>11 event.pageY</p><p>12 event.isDefaultPrevented()</p><p>13 event.isImmediatePropagationStopped()</p><p>14 event.isPropagationStopped()</p><p>15 event.stopImmediatePropagation()</p><p>阻止剩余的事件处理函数执行并且防止事件冒泡到 DOM 树上。</p><p>16 event.stopPropagation()</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>1 .hide()</p><p>1.1 .hide()</p><p>1.2 .hide( [duration ] [, complete ] )</p><p>duration (默认: 400)<br>类型: Number or String，<br>一个字符串或者数字决定动画将运行多久。</p><p>complete<br>类型: Function()，<br>在动画完成时执行的函数。</p><p>1.3 .hide( [duration ] [, easing ] [, complete ] )</p><p>1.4 .hide( options )</p><p>options<br>类型: PlainObject，<br>一组包含动画选项的值的集合。 支持的选项：</p><p>duration (default: 400)</p><p>easing (default: swing)，jQuery 自身提供”linear” 和 “swing”，其他效果可以使用<a href="http://gsgd.co.uk/sandbox/jquery/easing/">jQuery Easing Plugin</a>插件）</p><p>queue (default: true)<br>Type: Boolean or String,<br>一个布尔值，指示是否将动画放置在效果队列中。如果为 false 时，将立即开始动画。 从 jQuery1.7 开始，队列选项也可以接受一个字符串，在这种情况下，在动画被添加到由该字符串表示的队列中。当一个自定义的队列名称被使用，动画不会自动启动;你必须调用.dequeue(“queuename”)来启动它。</p><p>specialEasing,<br>Type: PlainObject,<br>一组一个或多个通过相应的参数和相对简单函数定义的 CSS 属性 ( 1.4 新增)</p><p>step,<br>Type: Function( Number now, Tween tween ),<br>每个动画元素的每个动画属性将调用的函数。这个函数为修改 Tween 对象提供了一个机会来改变设置中得属性值。</p><p>progress,<br>Type: Function( Promise animation, Number progress, Number remainingMs ),<br>每一步动画完成后调用的一个函数，无论动画属性有多少，每个动画元素都执行单独的函数。 (version added: 1.8)</p><p>complete,<br>Type: Function(),<br>在动画完成时执行的函数。</p><p>done<br>Type: Function( Promise animation, Boolean jumpedToEnd )<br>在动画完成时执行的函数。 (他的 Promise 对象状态已完成). (version added: 1.8)</p><p>fail<br>Type: Function( Promise animation, Boolean jumpedToEnd )<br>动画失败完成时执行的函数。(他的 Promise 对象状态未完成)。 (version added: 1.8)</p><p>always<br>Type: Function( Promise animation, Boolean jumpedToEnd )<br>在动画完成或未完成情况下停止时执行的函数。(他的 Promise 对象状态已完成或未完成)。 (version added: 1.8)</p><p><em>所有 jQuery 效果，包括.hide(),都能通过设置 jQuery.fx.off = true 全局的关闭，效果等同于持续时间设置为 0。更多信息查看 jQuery.fx.off</em></p><p>2 .show()</p><p>注意: 如果使用!important 在你的样式中，比如 display: none !important，如果你希望.show()方法才能正常工作，必须使用.css(‘display’, ‘block !important’)重写样式。</p><p>3 .toggle()</p><p>3.1 .toggle( [duration ] [, complete ] )</p><p>3.2 .toggle( options )</p><p>3.3 .toggle( [duration ] [, easing ] [, complete ] )</p><p>3.4 .toggle(display)</p><p>display<br>类型: Boolean,<br>一个布尔值，使用 true 来显示元素，或者 false 隐藏它.</p><p>注意: 事件处理套件也有一个名为.toggle()方法(.toggle( handler(eventObject), handler(eventObject) [, handler(eventObject) ] ),在 1.8 被宣布过时，1.9 已删除),哪一个被调用取决于传递的参数的设置。</p><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>1 .animate()</p><p>.animate()方法允许我们在任意的数值的 CSS 属性上创建动画。唯一必要的属性就是一组 CSS 属性键值对。这组属性和用于设置.css()方法的属性键值对类似，除了属性范围做了更多限制。</p><p>所有用于动画的属性必须是数字的，除非另有说明；这些属性如果不是数字的将不能使用基本的 jQuery 功能。（例如，width, height 或者 left 可以执行动画，但是 background-color 不能，除非使用 jQuery.Color 插件。）属性值的单位像素（px）,除非另有说明。单位 em 和 %需要指定使用。</p><p>除了样式属性， 一些非样式的属性，如 scrollTop 和 scrollLeft，以及自定义属性，也可应用于动画。</p><p>CSS 简写属性（例如 font, background, border）没有得到充分的支持。例如， 如果你想边框宽度做动画呈现，至少边框样式和边框宽度必须预先设定不为”auto” 。或者，如果你想字体大小做动画， 你可以使用 fontSize 的或相当于 CSS 的 ‘font-size’ ，而不是简单的’font’。</p><p>除了定义数值，每个属性能使用’show’, ‘hide’, 和 ‘toggle’。这些快捷方式允许定制隐藏和显示动画用来控制元素的显示或隐藏。为了使用 jQuery 内置的切换状态跟踪，’toggle’关键字必须在动画开始前给定属性值。（愚人码头注：jquery 中有两个.toggle()方法，一个是显示或隐藏匹配元素。另一个是绑定两个或多个处理程序绑定到匹配的元素，用来执行在交替的点击。哪一个被调用取决于传递的参数的设置。所以这里’toggle’关键字必须在动画开始前给定属性值，以确认调用哪个’toggle’方法。）</p><p>动画属性也可以是一个相对值。如果提供一个以+= 或 -=开始的值，那么目标值就是以这个属性的当前值加上或者减去给定的数字来计算的。</p><p><em>注意: 不同于动画的简便方法，比如.slideDown() 和 .fadeIn(),.animate()方法不会影响隐藏元素的可见性部分的效果。例如，给定$(‘someElement’).hide().animate({height:’20px’}, 500)，动画将执行，但该元素将保持隐藏。</em><br>$(‘#clickme’).click(function() {<br>$(‘#book’).animate({<br>opacity: 0.25,<br>left: ‘+=50’,<br>height: ‘toggle’<br>}, 5000, function() {<br>// Animation complete.<br>});<br>});</p><p>Step Function</p><p>第二个版本的.animate()提供了一个 step 选项- 每步动画执行后调用的回调函数。启用自定义动画类型或改变正在执行的动画，此功能是非常有用。它接受两个参数（now 和 fx），this 是当前正在执行动画的 DOM 元素集合。</p><p>now: 每一步动画属性的数字值</p><p>fx: jQuery.fx 原型对象的一个引用，其中包含了多项属性，比如 elem 表示前正在执行动画的元素，start 和 end 分别为动画属性的第一个和最后一个的值，prop 为进行中的动画属性。</p><p>需要注意的是 step 函数被每个动画元素的每个动画属性调用。例如，给定两个列表项，step 函数会被激发四次：</p><pre><code>$(&#39;li&#39;).animate(&#123;  opacity: .5,  height: &#39;50%&#39;&#125;,&#123;  step: function(now, fx) &#123;    var data = fx.elem.id + &#39; &#39; + fx.prop + &#39;: &#39; + now;    $(&#39;body&#39;).append(&#39;&lt;div&gt;&#39; + data + &#39;&lt;/div&gt;&#39;);  &#125;&#125;);</code></pre><p>Per-property Easing</p><pre><code>$(&#39;#clickme&#39;).click(function() &#123;  $(&#39;#book&#39;).animate(&#123;    width: [&#39;toggle&#39;, &#39;swing&#39;],    height: [&#39;toggle&#39;, &#39;swing&#39;],    opacity: &#39;toggle&#39;  &#125;, 5000, &#39;linear&#39;, function() &#123;      $(this).after(&#39;&lt;div&gt;Animation complete.&lt;/div&gt;&#39;);  &#125;);&#125;);</code></pre><p>在.animate()的第二个版本中，选项对象能包含 specialEasing 属性，该属性本身是一组 CSS 属性与相应的缓冲函数。例如，我们可以同时的使用 linear 缓冲函数来做 width 动画，并且用 easeOutBounce 缓冲函数来做 height 动画：</p><pre><code>$(&#39;#clickme&#39;).click(function() &#123;  $(&#39;#book&#39;).animate(&#123;    width: &#39;toggle&#39;,    height: &#39;toggle&#39;  &#125;, &#123;    duration: 5000,    specialEasing: &#123;      width: &#39;linear&#39;,      height: &#39;easeOutBounce&#39;    &#125;,    complete: function() &#123;      $(this).after(&#39;&lt;div&gt;Animation complete.&lt;/div&gt;&#39;);    &#125;  &#125;);&#125;);</code></pre><p>2 .delay()</p><p>.delay( duration [, queueName ] )</p><p>设置一个延时来推迟执行队列中后续的项。</p><p>queueName<br>类型: String,<br>一个作为队列名的字符串。默认是动画队列 fx。标准的效果队列。</p><p><em>.delay()是用来在 jQuery 动画效果和类似队列中是最好的。但是，由于其本身的限制，比如无法取消延时,.delay()，它不是 JavaScript 的原生 setTimeout 函数的替代品，这可能是更适合某些使用情况。</em></p><p>3 .queue()</p><p>显示或操作匹配的元素上已经执行的函数列队。</p><p>3.1 .queue( [queueName ] )</p><p>3.2 .queue( [queueName ], newQueue )</p><p>3.3 .queue( [queueName ], callback( next ) )</p><p>显示列队的长度: $div.queue(“fx”).length</p><p>值得注意的是，当使用.queue()添加一个函数的时候，我们应该保证在函数最后调用了 jQuery.dequeue()，这样就能让队列中的其它函数按顺序执行。</p><p>从 jQuery 1.4 开始，向队列中追加函数时，可以向该函数中传入另一个函数，作为第一个参数。当调用函数时，会自动从函数队列中弹出下一个项目，保证队列中函数的继续进行。我们可以像下面这样使用：</p><pre><code>$(&quot;#test&quot;).queue(function(next) &#123;    // Do some stuff...    next();&#125;);</code></pre><p>4 .dequeue()</p><p>执行匹配元素队列的下一个函数。</p><p>.dequeue( [queueName ] )</p><p>当.dequeue()被调用的时候，列队中的下一个函数将从这个列队中被移除，然后再执行。这个执行的函数中也应当直接或间接的包含 .dequeue()语句，这样才能继续执行队列中的其它函数，所以,这个序列可以继续。</p><p>5 jQuery.queue()</p><p>6 jQuery.dequeue()</p><p>7 jQuery.fx.interval</p><p>此属性在 3.0 版本中已经标记为弃用， 并在支持 requestAnimationFrame 方法的浏览器中没有效果。</p><p>对于不支持 requestAnimationFrame 的浏览器，该属性可以被改变，以调整动画将运行的时间间隔。默认为 13 毫秒。</p><p>由于 jQuery 中，该属性是全局性的，因此在没有动画正在运行或停止所有动画时，此属性的变化才能生效。</p><p>8 jQuery.fx.off</p><p>当这个属性设置为 true 的时候，调用时所有动画方法将立即设置元素为他们的最终状态，而不是显示效果。有时候确实有必要这样做：</p><p>jQuery 是被用在低资源设备。</p><p>动画使用户遇到可访问性问题(查看这篇文章获得更多信息 Turn Off Animation)。</p><p>动画可以通过设置这个属性为 false 重新打开</p><p>9 .stop()</p><p>9.1 .stop( [clearQueue ] [, jumpToEnd ] )</p><p>clearQueue (默认: false)<br>类型: Boolean，<br>一个布尔值，指示是否取消列队动画。默认 false.</p><p>jumpToEnd (默认: false)<br>类型: Boolean，<br>一个布尔值指示是否当前动画立即完成。默认 false.</p><p>9.2 .stop( [queue ] [, clearQueue ] [, jumpToEnd ] )</p><p>当一个元素调用.stop()，当前正在运行的动画（如果有的话）立即停止。</p><p>如果同一元素调用多个动画方法，尚未被执行的动画被放置在元素的效果队列中。这些动画不会开始，直到第一个完成。当调用.stop()的时候，队列中的下一个动画立即开始。如果 clearQueue 参数提供 true 值,那么在队列中的动画其余被删除并永远不会运行。</p><p>如果提供 jumpToEnd 参数，并且值为 true 时，当前动画将停止，但该元素上的 CSS 属性会被立刻修改成动画的目标值。</p><p>当我们需要对元素做 mouseenter 和 mouseleave 动画时，.stop()方法明显是有效的：</p><p>10 .finish()</p><p>停止当前正在运行的动画，删除所有排队的动画，并完成匹配元素所有的动画</p><p>.finish( [queue ] )</p><p>当.finish()在一个元素上被调用，立即停止当前正在运行的动画和所有排队的动画（如果有的话），并且他们的 CSS 属性设置为它们的目标值（愚人码头注：就是所有动画的目标值）。所有排队的动画将被删除。</p><p>.finish()方法和.stop(true, true)很相似，.stop(true, true)将清除队列，并且目前的动画跳转到其最终值。但是，不同的是，.finish() 会导致所有排队的动画的 CSS 属性跳转到他们的最终值。</p><p>.stop(true, true)等于.clearQueue().finish();</p><h3 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h3><p>.fadeIn()</p><p>.fadeOut()</p><p>.fadeTo()</p><p>.fadeToggle()</p><h3 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h3><p>.slideDown()</p><p>.slideToggle()</p><p>.slideUp()</p><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="全局-Ajax-事件处理程序"><a href="#全局-Ajax-事件处理程序" class="headerlink" title="全局 Ajax 事件处理程序"></a>全局 Ajax 事件处理程序</h3><p>这些方法用于注册事件处理器，用来处理页面上的任何 Ajax 请求，当某些事件触发后，这些事件处理器被调用。如何 jQuery.ajaxSetup() 中的 global 属性被设置为 true （这也是默认设置），那么，每个 Ajax 请求都会触发全局事件。注意：全局事件绝对不会被跨域（cross-domain）脚本或 JSONP 请求触发，和 global 属性的设置毫无关系。</p><p>1 .ajaxStart()</p><p>在 AJAX 请求刚开始时执行一个处理函数</p><p><em>在 jQuery1.9 中，jQuery 全局 AJAX 事件的所有处理程序， 包括那些.ajaxStart()添加的方法，必须 附加到 document 上。</em></p><p><em>如果 $.ajax() 或 $.ajaxSetup()调用时， global 选项设置为 false， .ajaxStart()将不会触发。</em></p><p>2 .ajaxSend()</p><p>在 Ajax 请求发送之前绑定一个要执行的函数</p><p>无论哪一个 Ajax 请求被发送，所有 ajaxSend 处理器都将被执行。如果我们必须区分不同的请求,我们可以使参数传递给这个处理器。 每次 ajaxSend 处理器执行，它传递事件对象，jqXHR 对象（在 jQuery 1.4 中是 XMLHttpRequest 对象），和用来创建请求的设置（settings object）对象。如果请求失败，因为 JavaScript 抛出一个异常，并且作为第四个参数的异常对象被传递给处理程序。举个例子,我们能限制我们的回调到只处理事件处理某一特定的 URL:</p><pre><code>$(document).ajaxSend(function(event, jqxhr, settings) &#123;  if ( settings.url == &quot;ajax/test.html&quot; ) &#123;    $( &quot;.log&quot; ).text( &quot;Triggered ajaxSend handler.&quot; );  &#125;&#125;);</code></pre><p>3 .ajaxStop()</p><p>在 AJAX 请求完成时执行一个处理函数。</p><p>每当一个 Ajax 请求完成，jQuery 检查是否有任何其他响应过程中的 Ajax 请求（愚人码头注：未完成的请求）。如果都执行完成，jQuery 就会触发 ajaxStop 事件，在这个时间点所有处理函数都会使用.ajaxStop()方法注册并执行。如果一个未处理完成的 Ajax 请求用 beforeSend 回调函数返回 false 取消，ajaxStop 事件也被触发</p><p>4 .ajaxSuccess()</p><p>绑定一个函数当 Ajax 请求成功完成时执行</p><p>.ajaxSuccess( handler(event, XMLHttpRequest, ajaxOptions) )</p><p>5 .ajaxError()</p><p>Ajax 请求出错时注册一个回调处理函数</p><p>.ajaxError( handler(event, jqXHR, ajaxSettings, thrownError) )</p><p>6 .ajaxComplete()</p><p>当 Ajax 请求完成后注册一个回调函数</p><p>每当一个 Ajax 请求完成，jQuery 就会触发 ajaxComplete 事件，在这个时间点所有处理函数会使用.ajaxComplete()方法注册并执行。</p><h3 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h3><p>1 jQuery.param()</p><p>创建一个数组，一个普通的对象，或一个 jQuery 对象的序列化表示形式，用于 URL 查询字符串或 Ajax 请求。 如果传递一个 jQuery 对象传递，它应该包含输入元素（愚人码头注：input，textarea 等）的名称/值属性。</p><p>1.1 jQuery.param( obj )</p><p>obj<br>类型: Array 或 PlainObject 或 jQuery，<br>一个用来序列化的一个数组，一个普通的对象，或一个 jQuery 对象。</p><p>1.2 jQuery.param( obj, traditional )</p><p>traditional<br>类型: Boolean，<br>一个布尔值，指示是否执行了传统的“shallow”的序列化。</p><p>在 jQuery 1.4 中, $.param() 方法将会通过深度递归的方式序列化对象，以便符合现代化脚本语言和框架的需求，比如 PHP 和 Ruby on Rails。 你可以通过设置 jQuery.ajaxSettings.traditional = true;废除这个全局功能。</p><p>在 jQuery 3.0 中，$.param()方法，不再使用 jQuery.ajaxSettings.traditional 作为其默认设置，将默认为 false。对于最好的跨版本兼容性，调用 $.param()时传递明确的值给第二个参数，不使用默认值。</p><p>如果传递的对象是一个数组，它必须是一个对象数组，其格式要跟.serializeArray()返回的格式一样：</p><pre><code>[  &#123; name: &quot;first&quot;, value: &quot;Rick&quot; &#125;,  &#123; name: &quot;last&quot;, value: &quot;Astley&quot; &#125;,  &#123; name: &quot;job&quot;, value: &quot;Rock Star&quot; &#125;]</code></pre><p><em>因为一些框架解析序列化的数字的能力有限， 在传递 obj 参数时我们应该谨慎，尽量不要传递含有对象的数组，或者数组中嵌套其它数组。</em></p><p><em>由于目前对序列化字符串没有统一的规约，此方法无法对复杂数据结构进行编码，使之可以支持所有语言。在此之前，$.param 方法将继续保持其目前的形式。</em></p><p>2 .serialize()</p><p>将用作提交的表单元素的值编译成字符串。</p><p>注意: 只有 “successful controls”可以被序列化成字符串。其中，提交按钮的值不会被序列化。另外，如果想要一个表单元素的值被序列化成字符串，这个元素必须含有 name 属性。此外，复选框（checkbox）和单选按钮（radio）(input 类型为 “radio” 或 “checkbox”)的值只有在被选中时才会被序列化。另外，文件选择元素的数据也不会被序列化。</p><pre><code>$(&quot;form&quot;).serialize();</code></pre><p>3 .serializeArray()</p><p>将用作提交的表单元素的值编译成拥有 name 和 value 对象组成的数组。例如[ { name: a value: 1 }, { name: b value: 2 },…]</p><p>.serializeArray()方法使用标准的 W3C”successful controls”的标准来检测哪些元素应当包括在内。被禁用的元素不会被包括在内。并且,元素必须含有 name 属性。此外，提交按钮的值也不会被序列化。文件选择元素的数据也不会被序列化。</p><h3 id="底层接口"><a href="#底层接口" class="headerlink" title="底层接口"></a>底层接口</h3><p>1 jQuery.ajax()</p><p>jQuery 最复杂的一个 API，因为参数实在是太多了。</p><p>1.1 jQuery.ajax( url [, settings ] )</p><p>1.2 jQuery.ajax( [settings ] )</p><p>settings</p><p>类型: PlainObject</p><p>一个以”{键:值}”组成的 AJAX 请求设置。所有选项都是可选的。可以使用$.ajaxSetup()设置任何默认参数。</p><p>1）accepts (默认: 取决于数据类型)</p><p>类型: PlainObject</p><p>一个键/值对集合映射给定的 dataType 到其的 MIME 类型，它可以从发送 Accept 请求头信息中获得。</p><p>请求头信息通知服务器该请求需要接收何种类型的返回结果。 例如，下面定义一个自定义类型的 mycustomtype 与请求一起发送：</p><pre><code>$.ajax(&#123;  accepts: &#123;    mycustomtype: &#39;application/x-some-custom-type&#39;  &#125;,  // Instructions for how to deserialize a `mycustomtype`  converters: &#123;    &#39;text mycustomtype&#39;: function(result) &#123;      // Do Stuff      return newresult;    &#125;  &#125;,  // Expect a `mycustomtype` back from server  dataType: &#39;mycustomtype&#39;&#125;);</code></pre><p>注意: 对于这种类型，为了使其正常工作，您将需要在 converters 中指定补充项。</p><p>2）async (默认: true)</p><p>跨域请求和 dataType: “jsonp” 请求不支持同步操作。</p><p>3）beforeSend</p><p>类型: Function( jqXHR jqXHR, PlainObject settings )<br>请求发送前的回调函数，用来修改请求发送前 jqXHR（在 jQuery 1.4.x 的中，XMLHttpRequest）对象，此功能用来设置自定义 HTTP 头信息，等等。在 beforeSend 函数中返回 false 将取消这个请求</p><p>4）cache (默认: true, dataType 为”script”和”jsonp”时默认为 false)</p><p>如果设置为 false ，浏览器将不缓存此页面。注意: 设置 cache 为 false 将在 HEAD 和 GET 请求中正常工作。它的工作原理是在 GET 请求参数中附加”_={timestamp}”（译者注：时间戳）。该参数不是其他请求所必须的，除了在 IE8 中，当一个 POST 请求一个已经用 GET 请求过的 URL。</p><p>5）complete</p><p>6）contents</p><p>类型: PlainObject，<br>一个以”{字符串/正则表达式}”配对的对象，根据给定的内容类型，解析请求的返回结果。 (1.5 新增)</p><p>7）contentType (default: ‘application/x-www-form-urlencoded; charset=UTF-8’)</p><p>从 jQuery 1.6 开始，你可以传递 false 来告诉 jQuery，没有设置任何内容类型头信息。 注意：W3C 的 XMLHttpRequest 的规范规定，数据将总是使用 UTF-8 字符集传递给服务器；指定其他字符集无法强制浏览器更改编码。 注意:对于跨域请求，内容类型设置为 application/x-www-form-urlencoded, multipart/form-data, 或 text/plain 以外， 将触发浏览器发送一个预检 OPTIONS 请求到服务器。</p><p>8）context</p><p>类型: Object</p><p>这个对象用于设置 Ajax 相关回调函数的上下文。 默认情况下，这个上下文是一个 ajax 请求使用的参数设置对象。比如指定一个 DOM 元素作为 context 参数，这样就设置了 complete 回调函数的上下文为这个 DOM 元素。</p><pre><code>$.ajax(&#123;  url: &quot;test.html&quot;,  context: document.body&#125;).done(function() &#123;  $(this).addClass(&quot;done&quot;);&#125;);</code></pre><p>9)converters (默认: {“* text”: window.String, “text html”: true, “text json”: jQuery.parseJSON, “text xml”: jQuery.parseXML})</p><p>类型: PlainObject</p><p>一个数据类型到数据类型转换器的对象。每个转换器的值是一个函数，返回经转换后的请求结果</p><p>10)crossDomain (默认: 同域请求为 false， 跨域请求为 true</p><p>如果你想在同一域中强制跨域请求（如 JSONP 形式），例如，想服务器端重定向到另一个域，那么需要将 crossDomain 设置为 true 。</p><p>11)data</p><p>类型: PlainObject 或 String 或 Array</p><p>发送到服务器的数据。它被转换成一个查询字符串,如果已经是一个字符串的话就不会转换。查询字符串将被追加到 GET 请求的 URL 后面。参见 processData 选项说明，以防止这种自动转换。对象必须为”{键:值}”格式。如果这个参数是一个数组，jQuery 会按照 traditional 参数的值， 将自动转化为一个同名的多值查询字符串(查看下面的说明)。愚人码头注：如 {foo:[“bar1”, “bar2”]} 转换为 ‘&amp;foo=bar1&amp;foo=bar2’。</p><p>12)dataFilter</p><p>类型: Function( String data, String type ) =&gt; Anything</p><p>一个函数被用来处理 XMLHttpRequest 的原始响应数据。这是一个预过滤功能，净化响应。您应该返回安全数据。提供 data 和 type 两个参数：data 是 Ajax 返回的原始数据，type 是调用 jQuery.ajax 时提供的 dataType 参数。</p><p>13)dataType (default: Intelligent Guess (xml, json, script, or html))</p><p>从服务器返回你期望的数据类型。 如果没有指定，jQuery 将尝试通过 MIME 类型的响应信息来智能判断（一个 XML MIME 类型就被识别为 XML，在 1.4 中 JSON 将生成一个 JavaScript 对象，在 1.4 中 script 将执行该脚本，其他任何类型会返回一个字符串）。</p><p>可用的类型（以及结果作为第一个参数传递给成功回调函数）有：</p><ul><li><p>xml 返回 XML 文档</p></li><li><p>html 返回纯文本 HTML 文本；包含的 script 标签会在插入 DOM 时执行。</p></li><li><p>script 把响应的结果当作 JavaScript 执行，并将其当作纯文本返回。默认情况下会通过在 URL 中附加查询字符串变量 _=[TIMESTAMP]， 禁用缓存结果，除非设置了 cache 参数为 true。注意: 在远程请求时(不在同一个域下)，所有 POST 请求都将转为 GET 请求。(愚人码头注：因为将使用 DOM 的 script 标签来加载)</p></li><li><p>json 把响应的结果当作 JSON 执行，并返回一个 JavaScript 对象。跨域”json” 请求转换为”jsonp”，除非该请求在其请求选项中设置了 jsonp:false。JSON 数据以严格的方式解析; 任何畸形的 JSON 将被拒绝，并且抛出解析错误信息。在 jQuery1.9 中，一个空响应也将被拒绝;服务器应该返回 null 或 {}响应代替。（见<a href="http://json.org/">json.org</a>的更多信息，正确的 JSON 格式。）</p></li><li><p>jsonp 以 JSONP 的方式载入 JSON 数据块。会自动在所请求的 URL 最后添加”?callback=?”。默认情况下会通过在 URL 中附加查询字符串变量 _=[TIMESTAMP]， 禁用缓存结果，除非设置了 cache 参数为 true。</p></li><li><p>text 返回纯文本字符串</p></li></ul><p>多个用空格分割的值:从 jQuery 1.5 开始， jQuery 可以内容类型（Content-Type）头收到并转换一个您需要的数据类型。例如，如果你想要一个文本响应为 XML 处理，使用”text xml”数据类型。您也可以将一个 JSONP 的请求，以文本形式接受，并用 jQuery 以 XML 解析: “jsonp text xml”。同样地可以使用”jsonp xml”简写,首先会尝试从 jsonp 到 xml 的转换，如果转换失败，就先将 jsonp 转换成 text, 然后再由 text 转换成 xml。</p><p>14)error</p><p>类型: Function( jqXHR jqXHR, String textStatus, String errorThrown )</p><p>如果发生了错误，错误信息（第二个参数）除了得到 null 之外，还可能是”timeout”, “error”, “abort” ，和 “parsererror”。 当一个 HTTP 错误发生时，errorThrown 接收 HTTP 状态的文本部分，比如： “Not Found”（没有找到） 或者 “Internal Server Error.”（服务器内部错误）。 从 jQuery 1.5 开始, 在 error 设置可以接受函数组成的数组。每个函数将被依次调用。 注意：此处理程序在跨域脚本和 JSONP 形式的请求时不被调用。</p><p>15)global (默认: true)</p><p>16)headers (默认: {})</p><p>一个额外的”{键:值}”对映射到请求一起发送。此设置会在 beforeSend 函数调用之前被设置 ;因此，请求头中的设置值，会被 beforeSend 函数内的设置覆盖 。</p><p>17)ifModified (默认: false)</p><p>只有上次请求响应改变时，才允许请求成功。使用 HTTP 包 Last-Modified 头信息判断。默认值是 false，忽略 HTTP 头信息。</p><p>18)isLocal (默认: 取决于当前的位置协议)</p><p>允许当前环境被认定为“本地”，（如文件系统），即使 jQuery 默认情况下不会这么做。以下协议目前公认为本地：file, *-extension, and widget。如果 isLocal 设置需要修改，建议在$.ajaxSetup()方法中这样做一次。</p><p>19)jsonp</p><p>在一个 JSONP 请求中重写回调函数的名字。这个值用来替代在”callback=?”这种 GET 或 POST 请求中 URL 参数里的”callback”部分，比如{jsonp:’onJsonPLoad’}会导致将”onJsonPLoad=?”传给服务器。在 jQuery 1.5，，设置 jsonp 选项为 false，阻止了 jQuery 从加入”?callback”字符串的 URL 或试图使用”=?”转换。在这种情况下，你也应该明确设置 jsonpCallback 设置。例如, { jsonp: false, jsonpCallback: “callbackName” }。如果你不信任你的 Ajax 请求的目标，出于安全原因， 考虑 设置 jsonp 属性为 false。</p><p>20)jsonpCallback</p><p>类型: String, Function</p><p>为 jsonp 请求指定一个回调函数名。这个值将用来取代 jQuery 自动生成的随机函数名。这主要用来让 jQuery 生成一个独特的函数名，这样管理请求更容易，也能方便地提供回调函数和错误处理。你也可以在想让浏览器缓存 GET 请求的时候，指定这个回调函数名。从 jQuery 1.5 开始，你也可以使用一个函数作为该参数设置，在这种情况下，该函数的返回值就是 jsonpCallback 的结果。</p><p>21)method (default: ‘GET’)</p><p>HTTP 请求方法 (比如：”POST”, “GET “, “PUT”)。 (添加版本: 1.9.0)。（愚人码头注：如果你使用 jQuery 1.9.0 之前的版本，你需要使用 type 选项。）</p><p>22)mimeType</p><p>一个 mime 类型用来覆盖 XHR 的 MIME 类型。</p><p>23)password</p><p>用于响应 HTTP 访问认证请求的密码</p><p>24)processData (默认: true)</p><p>默认情况下，通过 data 选项传递进来的数据，如果是一个对象(技术上讲只要不是字符串)，都会处理转化成一个查询字符串，以配合默认内容类型 “application/x-www-form-urlencoded”。如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。</p><p>25)scriptCharset</p><p>仅适用于当”script”传输使用时（例如，跨域的”jsonp”或 dataType 选项为”script” 和 “GET”类型）。请求中使用在 script 标签上设置 charset 属性。通常只在本地和远程的内容编码不同时使用。</p><p>26)statusCode (默认: {})</p><p>一个 HTTP 响应状态码 和 当请求响应相应的状态码时执行的函数 组成的对象。例如： 下面的代码将在 http 响应状态码为 404 时弹出“page not found”。</p><pre><code>$.ajax(&#123;  statusCode: &#123;    404: function() &#123;      alert(&quot;page not found&quot;);    &#125;  &#125;&#125;);</code></pre><p>如果请求成功，响应状态代码对应的函数会带着 success 回调函数相同的参数；如果请求结果是错误的（包含 3xx 之类的重定向），他们会采用 error 回调函数相同的参数。</p><p>27)success</p><p>28)timeout</p><p>设置请求超时时间（毫秒）。此设置将覆盖$.ajaxSetup() 里的全局设置。</p><p>29)traditional</p><p>如果你想要用传统的方式来序列化数据，那么就设置为 true。请参考工具分类下面的 jQuery.param 方法.</p><p>30)type (默认: ‘GET’)</p><p>method 选项的别名。如果你使用 jQuery 1.9.0 之前的版本，你需要使用 type 选项</p><p>31)url (默认: 当前页面地址)</p><p>32)username</p><p>响应 HTTP 访问认证请求的用户名</p><p>33)xhr (默认: 当可用的 ActiveXObject（IE）中，否则为 XMLHttpRequest)</p><p>类型: Function()</p><p>回调创建 XMLHttpRequest 对象。当可用时默认为 ActiveXObject（IE）中，否则为 XMLHttpRequest。提供覆盖你自己的执行的 XMLHttpRequest 或增强工厂。</p><p>34)xhrFields</p><p>类型: PlainObject</p><p>一对“文件名-文件值”组成的映射，用于设定原生的 XHR 对象。例如，如果需要的话，在进行跨域请求时，你可以用它来设置 withCredentials 为 true。</p><pre><code>$.ajax(&#123;   url: a_cross_domain_url,   xhrFields: &#123;      withCredentials: true   &#125;&#125;);</code></pre><h4 id="ajax"><a href="#ajax" class="headerlink" title=".ajax()"></a>.ajax()</h4><p>jQuery 发送的所有 Ajax 请求，内部都会通过调用 $.ajax() 函数来实现。通常没有必要直接调用这个函数，可以使用几个已经封装的简便方法，如$.get()和.load()。如果你需要用到那些不常见的选项，那么， $.ajax()使用起来更灵活。</p><p>注意: 所有的选项都可以通过$.ajaxSetup() 函数来全局设置</p><h4 id="jqXHR-对象"><a href="#jqXHR-对象" class="headerlink" title="jqXHR 对象"></a>jqXHR 对象</h4><p>从 jQuery 1.5 开始，$.ajax() 返回 XMLHttpRequest（jqXHR）对象，该对象是浏览器的原生的 XMLHttpRequest 对象的一个超集。例如，它包含 responseText 和 responseXML 属性，以及一个 getResponseHeader()方法。当传输机制不是是 XMLHttpRequest 时（例如，一个 JSONP 请求脚本，返回一个脚本 tag 时），jqXHR 对象尽可能的模拟原生的 XHR 功能。</p><p>从 jQuery 1.5.1 开始， jqXHR 对象还包含了 overrideMimeType 方法 (它在 jQuery 1.4.x 中是有效的，但是在 jQuery 1.5 中暂时的被移除)。.overrideMimeType() 方法可能用在 beforeSend()的回调函数中，例如，修改响应的 Content-Type 信息头：</p><p>从 jQuery 1.5 开始，$.ajax()返回的 jqXHR 对象 实现了 Promise 接口, 使它拥有了 Promise 的所有属性，方法和行为</p><p>jqXHR.done(function(data, textStatus, jqXHR) {});</p><p>jqXHR.fail(function(jqXHR, textStatus, errorThrown) {});</p><p>jqXHR.always(function(data|jqXHR, textStatus, jqXHR|errorThrown) { });</p><p>jqXHR.then(function(data, textStatus, jqXHR) {}, function(jqXHR, textStatus, errorThrown) {});</p><p>推荐使用的注意事项: jqXHR.success(), jqXHR.error(), 和 jqXHR.complete()回调从 jQuery 1.8 开始 被弃用过时。他们将最终被取消，您的代码应做好准备， 从 jQuery 3.0 开始被删除，你可以使用 jqXHR.done(), jqXHR.fail(), 和 jqXHR.always() 代替。</p><p>this 在所有的回调中的引用，是这个对象在传递给$.ajax 的设置中上下文；如果没有指定 context（上下文），this 引用的是 Ajax 设置的本身。</p><p>为了向后兼容 XMLHttpRequest ，jqXHR 对象将公开下列属性和方法：</p><p>readyState</p><p>status</p><p>statusText</p><p>responseXML and/or responseText 当底层的请求分别作出 XML 和/或文本响应</p><p>setRequestHeader(name, value) 从标准出发，通过替换旧的值为新的值，而不是替换的新值到旧值</p><p>getAllResponseHeaders()</p><p>getResponseHeader()</p><p>abort()</p><p>这里有$.ajax()提供的回调钩子 （hooks），如下：</p><ul><li><p>beforeSend 在发送请求之前调用，它接收 jqXHR 对象和 settings 作为参数对象。</p></li><li><p>error 在请求出错时调用。如果请求失败，在它们的顺序依次登记。他们接受 jqXHR ，字符串表示的错误类型，以及异常对象（如果有的话）。一些内置的错误会将 “abort”, “timeout”, “No Transport” 等字符串作为异常对象。</p></li><li><p>dataFilter 在请求成功之后调用。传入返回的数据以及 dataType 参数的值。并且必须返回新的数据（可能是处理过的）传递给 success 回调函数。</p></li><li><p>success 当请求成功并接收到返回数据之后调用。传入返回后的数据，以及包含成功代码的字符串和 jqXHR 对象。</p></li><li><p>Promise callbacks — .done(), .fail(), .always(), and .then() — 根据他们注册的顺序被调用。</p></li><li><p>complete 请求完成时，无论是在失败或成功，它们按顺序依次执行回调。他们收到 jqXHR 对象，以及一个包含成功或错误代码。</p></li></ul><h4 id="Data-Types（数据类型）"><a href="#Data-Types（数据类型）" class="headerlink" title="Data Types（数据类型）"></a>Data Types（数据类型）</h4><p>$.ajax()调用不同类型的响应，被传递到成功处理函数之前，会经过不同种类的预处理。 预处理的类型取决于由更加接近默认的 Content-Type 响应，但可以明确使用 dataType 选项进行设置。如果提供了 dataType 选项， 响应的 Content-Type 头信息将被忽略。</p><p>有效的数据类型是 text， html， xml， json，jsonp，和 script.</p><p>如果指定的是 text 或 html， 则不会预处理。 这些数据被简单地传递给成功处理函数， 并通过该 jqXHR 对象的 responseText 属性获得的。</p><p>如果指定的是 xml， 响应结果作为 XMLDocument，在传递给成功处理函数之前使用 jQuery.parseXML 进行解析。 XML 文档是可以通过该 jqXHR 对象的 responseXML 属性获得的。</p><p>如果指定的是 json，响应结果作为一个对象，在传递给成功处理函数之前使用 jQuery.parseJSON 进行解析。 解析后的 JSON 对象可以通过该 jqXHR 对象的 responseJSON 属性获得的。</p><p>如果指定的是 script ，$.ajax() 执行这段 JavaScript，这段 JavaScript 从服务器接收到，在传递给成功处理函数之前是一个字符串。</p><p>如果指定的是 jsonp ，$.ajax()会自动在请求的URL后面增加一个查询字符串参数 callback=?（默认） 。传递给$.ajax() 设置中的 jsonp 和 jsonpCallback 属性可以被用来指定， 分别为 查询字符串参数的名称和 JSONP 回调函数的名称。服务器应返回有效的 JavaScript，传递 JSON 响应到回调函数（愚人码头注：例如，flightHandler({“code”: “CA1998”,”price”: 1780,”tickets”: 5});等）。 在包含 JSON 对象的相应结果传递给成功处理函数之前，$.ajax() 将执行返回的 JavaScript， 调用 JSONP 回调函数。</p><h4 id="Sending-Data-to-the-Server（发送数据到服务器）"><a href="#Sending-Data-to-the-Server（发送数据到服务器）" class="headerlink" title="Sending Data to the Server（发送数据到服务器）"></a>Sending Data to the Server（发送数据到服务器）</h4><p>data 选项既可以包含一个查询字符串，比如 key1=value1&amp;key2=value2，也可以是一个映射，比如 {key1: ‘value1’, key2: ‘value2’} 。如果使用了后者的形式，则数据再发送前会用 jQuery.param() 将其转换成查询字符串。这个处理过程也可以通过设置 processData 选项为 false 来回避。如果我们希望发送一个 XML 对象给服务器时，这种处理可能并不合适。并且在这种情况下，我们也应当改变 contentType 选项的值，用其他合适的 MIME 类型来取代默认的 application/x-www-form-urlencoded 。</p><h4 id="Advanced-Options（高级选项）"><a href="#Advanced-Options（高级选项）" class="headerlink" title="Advanced Options（高级选项）"></a>Advanced Options（高级选项）</h4><p>global 选项用于阻止响应注册的回调函数，比如.ajaxSend(), .ajaxError()，以及类似的方法。这在有些时候很有用，比如发送的请求非常频繁且简短的时候，就可以在.ajaxSend()里禁用这个。跨域脚本和 JSONP 请求，全局选项自动设置为 false。更多关于这些方法的详细信息，请参阅下面的内容。</p><p>如果服务器需要 HTTP 认证，可以使用用户名和密码可以通过 username 和 password 选项来设置。</p><p>默认情况下，请求总会被发出去，但浏览器有可能从他的缓存中调取数据。要禁止使用缓存的结果，可以设置 cache 参数为 false。如果希望判断数据自从上次请求后没有更改过就报告出错的话，可以设置 ifModified 为 true。</p><p>$.ajax()函数返回他创建的 XMLHttpRequest 对象。通常 jQuery 只在内部处理并创建这个对象，但用户也可以通过 xhr 选项来传递一个自己创建的 xhr 对象。返回的对象通常已经被丢弃了，但依然提供一个底层接口来观察和操控请求。比如说，调用对象上的.abort() 可以在请求完成前挂起请求。</p><p>目前, 在 Firefox 中有一个 bug，虽然.getResponseHeader(‘Content-Type’)返回一个非空的字符串，但是 .getAllResponseHeaders()还是返回空字符串， 在 Firefox 中使用 jQuery 不支持自动解码 JSON CORS 响应。</p><h4 id="Using-Converters（使用转换器）"><a href="#Using-Converters（使用转换器）" class="headerlink" title="Using Converters（使用转换器）"></a>Using Converters（使用转换器）</h4><p>$.ajax()的转换器支持的数据类型映射到其它数据类型。但是，如果你想把自定义数据类型映射到一个已知的类型（json 等）,您必须 contents 选项在响应的 Content-Type 和实际的数据类型之间的添加一个相关的转换函数：<br>$.ajaxSetup({<br>contents: {<br>mycustomtype: /mycustomtype/<br>},<br>converters: {<br>“mycustomtype json”: function ( result ) {<br>// do stuff<br>return newresult;<br>}<br>}<br>});</p><p>这额外的对象是必要的，因为响应内容类型(Content-Types)和数据类型从来没有一个严格的一对一对应关系（正则表达式表示结果）。</p><p>转换一个支持的类型（例如 text, json）成自定义数据类型，然后再返回，使用另一个直通转换器：</p><pre><code>$.ajaxSetup(&#123;  contents: &#123;    mycustomtype: /mycustomtype/  &#125;,  converters: &#123;    &quot;text mycustomtype&quot;: true,    &quot;mycustomtype json&quot;: function ( result ) &#123;      // do stuff      return newresult;    &#125;  &#125;&#125;);</code></pre><p>现在上面的代码允许通过从 text 为 mycustomtype ，进而，mycustomtype 转换为 json。</p><p><em>由于浏览器的安全限制，大多数“Ajax”的要求，均采用同一起源的政策 ;该请求不能成功地检索来自不同的域，子域或协议的数据。<br>Script 和 JSONP 形式请求不受同源策略的限制</em></p><p>2 jQuery.ajaxSetup()</p><p>为以后要用到的 Ajax 请求设置默认的值</p><p>用于设置$.ajaxSetup()的详细参数, 参见 $.ajax().</p><p>所有后面的 Ajax 调用任何函数都将使用新的设置参数,除非它们调用时设置了各自的参数重载了这个默认值。 直到下一次调用$.ajaxSetup().</p><p>注意： 此处指定的设置会影响所有 $.ajax或基于AJAX的衍生方法，如$.get()的调用。这可能会导致不良的行为因为其他调用（例如，插件）可能希望正常的默认设置。出于这个原因，我们强烈建议您不要使用此 API。相反我们建议，在调用时明确设置选项或定义一个简单的插件。</p><p>注意: 全局回调函数应使用他们各自的全局 Ajax 事件处理方法-.ajaxStart(), .ajaxStop(), .ajaxComplete(), .ajaxError(), .ajaxSuccess(), .ajaxSend()-设置，而不是为 $.ajaxSetup() 设置 options 对象。</p><h3 id="快捷方法"><a href="#快捷方法" class="headerlink" title="快捷方法"></a>快捷方法</h3><p>1 jQuery.get()</p><p>jQuery.get( url [, data ] [, success ] [, dataType ] )</p><p>2 jQuery.getJSON()</p><p>jQuery.getJSON( url [, data ] [, success(data, textStatus, jqXHR) ] )</p><pre><code>$.getJSON(&#39;ajax/test.json&#39;, function(data) &#123;  var items = [];  $.each(data, function(key, val) &#123;    items.push(&#39;&lt;li id=&quot;&#39; + key + &#39;&quot;&gt;&#39; + val + &#39;&lt;/li&gt;&#39;);  &#125;);  $(&#39;&lt;ul/&gt;&#39;, &#123;    &#39;class&#39;: &#39;my-new-list&#39;,    html: items.join(&#39;&#39;)  &#125;).appendTo(&#39;body&#39;);&#125;);</code></pre><p>3 jQuery.getScript()</p><p>使用一个 HTTP GET 请求从服务器加载并执行一个 JavaScript 文件</p><p>定义了一个$.cachedScript（）方法可以获取缓存的脚本：</p><pre><code>jQuery.cachedScript = function(url, options) &#123;  // allow user to set any option except for dataType, cache, and url  options = $.extend(options || &#123;&#125;, &#123;    dataType: &quot;script&quot;,    cache: true,    url: url  &#125;);  // Use $.ajax() since it is more flexible than $.getScript  // Return the jqXHR object so we can chain callbacks  return jQuery.ajax(options);&#125;;// Usage$.cachedScript(&quot;ajax/test.js&quot;).done(function(script, textStatus) &#123;  console.log( textStatus );&#125;);</code></pre><p>4 .load()</p><p>.load( url [, data ] [, complete(responseText, textStatus, XMLHttpRequest) ] )</p><p>默认使用 GET 方式 ， 如果 data 参数提供一个对象，那么使用 POST 方式。</p><h4 id="Loading-Page-Fragments（加载页面片段）"><a href="#Loading-Page-Fragments（加载页面片段）" class="headerlink" title="Loading Page Fragments（加载页面片段）"></a>Loading Page Fragments（加载页面片段）</h4><p>如果 url 参数的字符串中包含一个或多个空格，那么第一个空格后面的内容，会被当成是 jQuery 的选择器，从而决定应该加载返回结果中的哪部分内容。</p><pre><code>$(&#39;#result&#39;).load(&#39;ajax/test.html #container&#39;);</code></pre><p>5 jQuery.post()</p><p>用 POST 获取的页面是从来不会被缓存, 所以这些请求中的 cache 和 ifModified 选项在 jQuery.ajaxSetup() 是无效的。</p><h2 id="jQuery-核心"><a href="#jQuery-核心" class="headerlink" title="jQuery 核心"></a>jQuery 核心</h2><p>1 jQuery()</p><p>1.1 jQuery( selector [, context ] )</p><p>jQuery( selector [, context ] )</p><p>jQuery( element )</p><p>jQuery( elementArray )</p><p>jQuery( object )</p><p>jQuery( jQuery object )</p><p>jQuery()</p><p>1）Cloning jQuery Objects(克隆 jQuery 对象)</p><p>当一个 jQuery 对象作为一个参数传递给$()方法时，这个对象的一个克隆对象将被创建。这个新的 jQuery 对象引用同一 DOM 元素。</p><p>2）Returning an Empty Set(返回一个空集合)</p><p>在 jQuery 1.4 中，如果你传递给 jQuery()方法一个空参数，一个空的 jQuery 设置将被返回（.length 属性为 0）。 在以前的 jQuery 版本中，一个包含整个文档节点的集合将被返回。</p><p>3）Working With Plain Objects（使用普通的对象）</p><p>目前，只支持包裹在 jQuery 中的普通的 JavaScript 对象是：.data(),.prop(),.bind(), .unbind(), .trigger() 和 .triggerHandler()。使用.data()（或者任何返回.data()的方法），在一个普通的对象会产生一个新的属性的名为 jQuery{randomNumber}（如 jQuery123456789）。</p><pre><code>// define a plain objectvar foo = &#123;foo: &quot;bar&quot;, hello: &quot;world&quot;&#125;;// Pass it to the jQuery functionvar $foo = $( foo );// test accessing property valuesvar test1 = $foo.prop( &quot;foo&quot; ); // bar// test setting property values$foo.prop( &quot;foo&quot;, &quot;foobar&quot; );var test2 = $foo.prop( &quot;foo&quot; ); // foobar// test using .data() as summarized above$foo.data( &quot;keyName&quot;, &quot;someValue&quot;);console.log( $foo ); // will now contain a jQuery&#123;randomNumber&#125; property// test binding an event name and triggering$foo.bind( &quot;eventName&quot;, function () &#123;  console.log(&quot;eventName was called&quot;);&#125;);$foo.trigger( &quot;eventName&quot; ); // logs &quot;eventName was called&quot;</code></pre><p>1.2 jQuery( html [, ownerDocument ] )</p><p>jQuery( html [, ownerDocument ] )</p><p>jQuery( html, attributes )</p><p>从 jQuery 1.4 开始，给 jQuery() 的第二个参数可以接受一个简单的对象组成的一个属性集合，可以传递.attr()方法。</p><p>重要提示： 如果第二个参数被传递，第一个参数中的 HTML 字符串 必须代表一个没有任何属性简单的元素。 从 jQuery 1.4 开始，一些 event type（事件类型）可以传递进来， 而且能够调用以下 jQuery 方法： val, css, html, text, data, width, height, or offset。</p><p>从 jQuery 1.8 开始, 任何 jQuery 实例方法（一个 jQuery.fn 的方法），可以被用来作为一个该对象的属性传递给第二个参数：</p><pre><code>$( &quot;&lt;div&gt;&lt;/div&gt;&quot;, &#123;  &quot;class&quot;: &quot;my-div&quot;,  on: &#123;    touchstart: function( event ) &#123;      // do something    &#125;  &#125;&#125;).appendTo( &quot;body&quot; );</code></pre><p>在这个对象中，”class”（类）的名称必须使用引号括起来，因为它是一个 JavaScript 保留字，还有不能使用”className”，因为它是指的 DOM 属性（property），不是属性（attribute）。</p><p>虽然第二个参数是方便，它的灵活性可能会导致意想不到的后果（例如$(“<input>“, {size: “4”})调用.size()方法，代替设置 size 属性）。上面的代码块可以被写入，代替为：</p><pre><code>$( &quot;&lt;div&gt;&lt;/div&gt;&quot; ).addClass( &quot;my-div&quot; ).on(&#123;  touchstart: function( event ) &#123;    // do something  &#125;&#125;).appendTo( &quot;body&quot; );</code></pre><p>1.3 jQuery( callback )</p><p>2 jQuery.noConflict()</p><p>jQuery.noConflict( [removeAll ] )</p><p>removeAll<br>类型: Boolean，<br>一个布尔值，判断是否从全局作用域中内去除所有 jQuery 变量(包括 jQuery 本身)。</p><h2 id="jQuery-杂项"><a href="#jQuery-杂项" class="headerlink" title="jQuery 杂项"></a>jQuery 杂项</h2><h3 id="DOM-元素方法"><a href="#DOM-元素方法" class="headerlink" title="DOM 元素方法"></a>DOM 元素方法</h3><p>1 .get()</p><p>1.1 .get( index )</p><p>1.2 .get()</p><p>调用这个方法将会返回所有匹配的 DOM 节点，这些节点包含在一个标准的数组中</p><p>选择文档中的所有 div，并且作为一个数组返回。然后使用浏览器原生的 reverse 方法将数组翻转。</p><pre><code>function disp(divs) &#123;    var a = [];    for ( var i = 0; i &lt; divs.length; i++) &#123;      a.push( divs[i].innerHTML );    &#125;    $( &quot;span&quot; ).text( a.join(&quot; &quot;) );&#125;disp( $( &quot;div&quot; ).get().reverse() );</code></pre><p>2 .toArray()</p><p>和.get()方法效果相同</p><p>3 .index()</p><p>3.1 .index()</p><p>3.2 .index( selector )</p><p>3.3 .index( element )</p><p>如果不传递任何参数给 .index() 方法，则返回值就是 jQuery 对象中第一个元素相对于它同辈元素的位置。</p><p>如果在一组元素上调用 .index() ，并且参数是一个 DOM 元素或 jQuery 对象， .index() 返回值就是传入的元素相对于原先集合的位置。</p><p>如果参数是一个选择器， .index() 返回值就是原先元素相对于选择器匹配元素的位置。如果找不到匹配的元素，则 .index() 返回 -1.</p><h3 id="内部构件"><a href="#内部构件" class="headerlink" title="内部构件"></a>内部构件</h3><p>1 .jquery</p><p>.jquery 原型指向 jQuery 的原型， 通常被称为它的别名$.fn。它是一个字符串，其中包含的 jQuery 的版本号，如“1.5.0”或“1.4.4”。</p><p>2 jQuery.error()</p><p>jQuery.error( message )</p><p>接受一个字符串，并抛出包含这个字符串的异常。</p><p>这个方法主要是为了让插件开发人员可以重载此方法，并以更好的方式显示错误消息，或者提供更多相关信息。</p><p>3 .length</p><p>4 .pushStack()</p><p>将一个 DOM 元素集合加入到 jQuery 栈。</p><p><a href="http://www.cnblogs.com/AndyWithPassion/archive/2012/02/06/jquery_pushStack_javascript.html">更多参考</a></p><h2 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h2><p>1 jQuery.contains()</p><p>jQuery.contains( container, contained )</p><p>检查一个 DOM 元素是另一个 DOM 元素的后代。</p><p>如果第二个参数所提供的 DOM 元素是第一个参数 DOM 元素的后裔，那么$.contains() 方法返回true，无论是直接的子元素或者是后代元素。否则，返回false。只支持 element 节点;如果第二个参数是一个文本或注释节点，$.contains()将返回 false。</p><p><em>注意: 第一个参数必须是一个 DOM 元素，不是一个 jQuery 对象或普通的 JavaScript 对象。</em></p><p>2 jQuery.each()</p><p>注意: $.each()函数会在内部检索并且使用传递集合的 length 属性。 所以，如果集合有一个名为 length 的属性 - 比如 {bar: ‘foo’, length: 10} - 这个函数可能无法正常工作。</p><p>我们可以在$.each()返回 false 来终止迭代。返回非 false 相当于一个循环中的 continue 语句，这意味着，它会立即跳出当前的迭代，转到下一个迭代。</p><p><em>jQuery 中的 each 方法和 ES5、underscore、Angular 都不同，它的回调函数第一个参数为 index/key，第二个为 value，其他刚好相反</em></p><p>3 jQuery.extend()</p><p>jQuery.extend( [deep ], target, object1 [, objectN ] )</p><p>如果只有一个参数提供给$.extend()，这意味着目标参数被省略。在这种情况下，jQuery 对象本身被默认为目标对象。这样，我们可以在 jQuery 的命名空间下添加新的功能。这对于插件开发者希望向 jQuery 中添加新函数时是很有用的。</p><p>请记住，目标对象（第一个参数）将被修改，并且将通过$.extend()返回。然而，如果我们想保留原对象，我们可以通过传递一个空对象作为目标对象：</p><pre><code>var object = $.extend(&#123;&#125;, object1, object2);</code></pre><p>在默认情况下，通过$.extend()合并操作不是递归的;如果第一个对象的属性本身是一个对象或数组，那么它将完全用第二个对象相同的 key 重写一个属性。这些值不会被合并。可以通过检查下面例子中 banana 的值，就可以了解这一点。然而，如果将 true 作为该函数的第一个参数，那么会在对象上进行递归的合并。</p><p>警告:不支持第一个参数传递 false 。</p><p>未定义的属性不会被复制。然而，从对象原型的继承属性将被复制。如果属性（Properties）是一个通过构造函数 new MyCustomObject(args)定义的，或 JavaScript 中内置类型，如 Date 或 RegExp，是不会重新创建的，并且将被当作普通的对象出在返回的对象或数组中。</p><p>若设置了 deep 参数，对象和数组也会被合并进来，但是对象包裹的原始类型，比如 String, Boolean, 和 Number 是不会被合并进来的。</p><p>4 jQuery.fn.extend()</p><p>一个对象的内容合并到 jQuery 的原型，以提供新的 jQuery 实例方法。</p><p>jQuery.fn.extend()方法继承了 jQuery 原型($.fn)对象，以提供 jQuery 原型新的方法，可以链式调用 jQuery()函数。</p><pre><code>jQuery.fn.extend(&#123;  check: function() &#123;    return this.each(function() &#123; this.checked = true; &#125;);  &#125;,  uncheck: function() &#123;    return this.each(function() &#123; this.checked = false; &#125;);  &#125;&#125;);// Use the newly created .check() method$( &quot;input[type=&#39;checkbox&#39;]&quot; ).check();</code></pre><p>5 jQuery.globalEval()</p><p>在全局上下文下执行一些 JavaScript 代码</p><p>此方法的表现不同于正常使用的 JavaScript eval()，因为它是在全局上下文下执行（这对加载外部动态脚本很重要）。</p><pre><code>function test()&#123;    jQuery.globalEval(&quot;var newVar = true;&quot;)&#125;test();// newVar === true</code></pre><p>6 jQuery.grep()</p><p>jQuery.grep( array, function(elementOfArray, indexInArray) [, invert ] )</p><p>查找满足过滤函数的数组元素。原始数组不受影响。类似 underscore 的 filter</p><p>7 jQuery.inArray()</p><p>jQuery.inArray( value, array [, fromIndex ] )</p><p>8 jQuery.isArray()</p><p>9 jQuery.isEmptyObject()</p><p>从 jQuery 1.4 开始，这个方法既检测对象本身的属性，也检测从原型继承的属性（因此没有使用 hasOwnProperty）。参数应当是一个普通的 JavaScript 对象， 对于其他类型的对象（DOM 元素，原始 strings/numbers，host 对象）在跨浏览器中可能无法提供一致的结果。 要确定一个对象是否是一个普通的 JavaScript 对象，使用$.isPlainObject()</p><p>10 jQuery.isFunction()</p><p>11 jQuery.isNumeric()</p><p>$.isNumeric()方法检查它的参数是否能代表一个数值。如果是这样，则返回 true。否则返回 false。该参数可以是任何类型。（愚人码头注：jQuery 3.0 之前，这个方法会强制转换参数为 Number，转换后的值类型如果是如果是 Number，也会返回 true）</p><p>在 jQuery 3.0 中，$.isNumeric()方法只有接收 number 类型的参数时候，或者是可以被强制为有限数值的 string 类型的参数，才会返回 true，在其他情况下，返回 false。</p><p>12 jQuery.isPlainObject()</p><p>注意: Host 对象（或浏览器宿主环境中所使用的对象，用来完成的 ECMAScript 执行环境）在检测跨平台时存在很多的不一致，难以提供跨平台的强劲的检测函数。在某些情况下，$.isPlainObject()的结果可能在不同的浏览器评估不一致</p><p>13 jQuery.isWindow()</p><p>这个方法在 jQuery 很多地方用到，用来确定我们的操作是否为一个浏览器窗口操作。（如当前窗口或一个 iframe）。</p><p>14 jQuery.isXMLDoc()</p><p>检查一个 DOM 节点是否在 XML 文档中（或者是一个 XML 文档）。</p><p>15 jQuery.makeArray()</p><p>转换一个类似数组的对象成为真正的 JavaScript 数组。</p><p>16 jQuery.map()</p><p>17 jQuery.merge()</p><p>合并两个数组内容到第一个数组。</p><p>18 jQuery.noop()</p><p>当你仅仅想要传递一个空函数的时候，就用他吧。</p><p>这对一些插件作者很有用，当插件提供了一个可选的回调函数接口，那么如果调用的时候没有传递这个回调函数，就用 jQuery.noop 来代替执行。</p><p>19 jQuery.now()</p><p>20 jQuery.parseHTML()</p><p>jQuery.parseHTML( data [, context ] [, keepScripts ] )</p><p>大多数的 jQuery 的 API 接受的 HTML 字符串将运行所包含在 HTML 中的脚本。jQuery.parseHTML 不运行 HTML 中解析出来的脚本，除非 keepScripts 参数为 true。然而，它仍然是可能在大多数环境中间接地执行脚本，例如通过<img onerror>属性。调用者应该意识到这一点，并通过清理或避免任何不可信来源的输入，如 URL 或 cookies，来防止它。为了未来的兼容性，当 keepScripts 为不确定的或 false 时，调用者不应该依赖于这个能力来运行任何脚本内容。</p><p>21 jQuery.parseJSON()</p><p>在 jQuery 1.9 之前,如果传递给$.parseJSON 一个空字符串，null, 或者 undefined,，将返回 null，而不是抛出一个错误，即使这些都不是有效的 JSON。</p><p>jQuery 3.0 开始，$.parseJSON 已经过时（愚人码头注：不建议使用）。要将字符串解析成 JSON 对象，请使用原生的 JSON.parse 方法来代替</p><p>22 jQuery.parseXML()</p><p>23 jQuery.proxy()</p><p>24 jQuery.readyException()</p><p>jQuery.readyException( error )</p><p>处理包裹在 jQuery()中函数同步抛出的错误。</p><p>25 jQuery.trim()</p><p>26 jQuery.type()</p><p>确定 JavaScript 对象的类型[[Class]] 。</p><p>27 jQuery.unique()</p><p>在 jQuery 3.0 中，这种方法已被弃用，只是 jQuery.uniqueSort()的别名。请使用该方法代替。</p><p>$.unique()函数通过搜索的数组对象，排序数组，并移除任何重复的节点。 如果一个节点和已经在数组中的节点完全相同，那么它被认为是重复的; 两个不同的节点具有相同的属性是被认为不重复的。 此功能只适用于普通的 JavaScript DOM 元素的数组，主要是 jQuery 内部使用。你可能永远都不需要使用它。</p><h2 id="延迟对象（deferred-对象）"><a href="#延迟对象（deferred-对象）" class="headerlink" title="延迟对象（deferred 对象）"></a>延迟对象（deferred 对象）</h2><p>deferred 对象就是 jQuery 的回调函数解决方案。</p><p>1 $.deferred()方法</p><p>作用是生成一个 deferred 对象。</p><p>2 deferred.done()</p><p>当 Deferred（延迟）对象解决时，调用添加处理程序。</p><p>deferred.done( doneCallbacks [, doneCallbacks ] )</p><p>当 Deferred（延迟）解决时，doneCallbacks 被调用。回调是依照他们添加的顺序执行。</p><p>3 deferred.fail()</p><p>当 Deferred（延迟）对象拒绝时，调用添加的处理程序。</p><p>4 deferred.progress()</p><p>当 Deferred（延迟）对象生成正在执行中的进度通知时，调用添加处理程序。</p><p>5 deferred.always()</p><p>当 Deferred（延迟）对象解决或拒绝时，调用添加处理程序。</p><p>6 deferred.then()</p><p>deferred.then( doneFilter [, failFilter ] [, progressFilter ] )</p><p>有时为了省事，可以把 done()和 fail()合在一起写，这就是 then()方法。</p><p>7 deferred.promise()</p><p>返回 Deferred(延迟)的 Promise（承诺）对象。</p><p>deferred.promise( [target ] )</p><p>大多数情况下，我们不想让用户从外部更改 deferred 对象的状态。这时，你可以在 deferred 对象的基础上，返回一个针对它的 promise 对象。我们可以把后者理解成，promise 是 deferred 的只读版，或者更通俗地理解成 promise 是一个对将要完成的任务的承诺。promise 对象只开放与改变执行状态无关的方法（比如 done()方法和 fail()方法），屏蔽与改变执行状态有关的方法（比如 resolve()方法和 reject()方法），从而使得执行状态不能被改变</p><p>你可以通过 promise 对象，为原始的 deferred 对象添加回调函数，查询它的状态，但是无法改变它的状态，也就是说 promise 对象不允许你调用 resolve 和 reject 方法。</p><p>jQuery 的 ajax() 方法返回的就是一个 promise 对象。此外，Animation 类操作也可以使用 promise 对象。</p><p>8 deferred.state()</p><p>deferred.state() 方法返回一个字符串，代表 Deferred（延迟）对象的当前状态。Deferred 对象可以在三种状态之一：</p><ul><li><p>“pending”: Deferred 对象是尚未完成状态 (不是 “rejected” 或 “resolved”).</p></li><li><p>“resolved”: Deferred 对象是在解决状态，这意味着，deferred.resolve() 或者 deferred.resolveWith()被对象访问和 doneCallbacks 被访问（或在被调用的过程中） 。</p></li><li><p>“rejected”: Deferred 对象是在被拒绝的状态，这意味着，deferred.reject() 或者 deferred.rejectWith() 被对象访问和 failCallbacks 被访问（或在被调用的过程中） 。</p></li></ul><p>这种方法主要是有用的调试，例如，在准备拒绝（reject）一个延迟对象前，判断它是否已经处于 resolved 状态。</p><p>9 deferred.notify()</p><p>deferred.notify( args )</p><p>根据给定的 args 参数 调用 Deferred（延迟）对象上进行中的回调 （progressCallbacks）。</p><p>通常情况下，只有递延对象（Deferred）的创建者才能调用此方法; 您可以通过 deferred.promise()返回的受限制的 Promise 对象，来防止其他代码改变递延的状态 。</p><p>当 deferred.notify 被访问时， 任何 progressCallbacks 可以通过访问 deferred.then 好或者 deferred.progress 来添加。回调是依照他们添加的顺序执行的。</p><p>10 deferred.notifyWith( context [, args ] )</p><p>Context（上下文） 作为 this 对象传递给进行中的回调（progressCallbacks ）</p><p>11 deferred.reject()</p><p>拒绝 Deferred（延迟）对象，并根据给定的 args 参数调用任何失败回调函数（failCallbacks）。</p><p>12 deferred.rejectWith()</p><p>13 deferred.resolve()</p><p>解决 Deferred（延迟）对象，并根据给定的 args 参数调用任何完成回调函数（doneCallbacks）。</p><p>14 deferred.resolveWith()</p><p>15 .promise()</p><p>.promise( [type ] [, target ] )</p><p>type (默认: fx),<br>类型: String,<br>需要待观察队列类型。</p><p>target<br>类型: PlainObject,<br>将要绑定 promise 方法的对象。</p><p>注意: 返回的 Promise 被链接到延迟对象上，保存在元素的 .data() 中。由于 .remove() 方法会移除元素上的 data，同时也会移除元素本身。所以，使用它会防止任何元素上未被受理的（unresolved） Promise 被受理（resolving）。如果有必要在元素的 Promise 被受理（resolved）之前，从 DOM 中移除该元素的话，请使用 .detach() 来代替。之后再调用 .removeData()</p><p>当所有的动画结果时(包括那些在动画回调函数和之后添加的回调函数中初始化的动画），受理（Resolve）返回的 Promise：</p><pre><code>&lt;script&gt;$(&quot;button&quot;).bind( &quot;click&quot;, function() &#123;  $(&quot;p&quot;).append( &quot;Started...&quot;);  $(&quot;div&quot;).each(function( i ) &#123;    $( this ).fadeIn().fadeOut( 1000 * (i+1) );  &#125;);  $( &quot;div&quot; ).promise().done(function() &#123;    $( &quot;p&quot; ).append( &quot; Finished! &quot; );  &#125;);&#125;);&lt;/script&gt;</code></pre><p>16 deferred.catch()</p><p>当 Deferred 对象被拒绝(reject)时，调用添加的处理程序。</p><p>deferred.catch( failFilter )</p><p>failFilter<br>Type: Function(),<br>一个函数，当 Deferred 对象被拒绝(reject)时被调用</p><p>jQuery3.0 添加</p><p>deferred.catch( fn ) 是 deferred.then( null, fn )的一个别名</p><h2 id="回调对象"><a href="#回调对象" class="headerlink" title="回调对象"></a>回调对象</h2><p>jQuery.Callbacks()</p><p>jQuery.Callbacks( flags )</p><p>flags<br>类型: String，<br>一个用空格标记分隔的标志可选列表,用来改变回调列表中的行为。</p><p>$.Callbacks用来管理函数队列。采用了观察者模式，通过add添加操作到队列当中，通过fire去执行这些操作。实际上$.Callbacks 是 1.7 版本从$.Deferred对象当中分离出来的，主要是实现$.Deferred 功能。</p><p>$.Callbacks()的内部提供了jQuery的$.ajax() 和 $.Deferred() 基本功能组件。它可以用来作为类似基础定义的新组件的功能。</p><p>$.Callbacks() 支持的方法，包括 callbacks.add(),callbacks.remove(), callbacks.fire() 和 callbacks.disable().</p><h3 id="支持的-Flags"><a href="#支持的-Flags" class="headerlink" title="支持的 Flags"></a>支持的 Flags</h3><p>这个 flags 参数是$.Callbacks()的一个可选参数, 结构为一个用空格标记分隔的标志可选列表,用来改变回调列表中的行为 (比如. $.Callbacks( ‘unique stopOnFalse’ )).</p><p>可用的 flags:</p><ul><li><p>once: 函数队列只执行一次</p></li><li><p>memory: 当函数队列 fire 或 fireWith 一次过后，内部会记录当前 fire 或 fireWith 的参数。当下次调用 add 的时候，会把记录的参数传递给新添加的函数并立即执行这个新添加的函数</p></li><li><p>unique: 往内部队列添加的函数保持唯一，不能重复添加。</p></li><li><p>stopOnFalse: 内部队列里的函数是依次执行的，当某个函数的返回值是 false 时，停止继续执行剩下的函数。</p></li></ul><p>默认情况下，回调列表将像事件的回调列表中可以多次触发。</p><p>这四种基本类型可以相互组合起来使用，例如$.Deferred 就使用了 once 和 memory 的组合。</p><h3 id="Callbacks-支持的方法"><a href="#Callbacks-支持的方法" class="headerlink" title="$.Callbacks() 支持的方法"></a>$.Callbacks() 支持的方法</h3><p>1 add()</p><p>向内部队列添加函数，总有三种参数形式:</p><ul><li><p>单个函数参数</p></li><li><p>多个函数参数</p></li><li><p>数组参数</p></li></ul><p>2 fire()</p><p>依次执行队列里的函数</p><p>3 fire 的参数会传递给我们添加的函数</p><p>4 fireWith</p><p>fire 调用的时候，我们添加函数当中的 this 指向我们的 Callbacks 实例</p><p>fireWith 就是改变我们添加函数的 context，即 this 指向</p><p>fireWith 第一个参数是我们的 context，第二个参数是我们需要传递的内容数组，注意了是数组！</p><p>5 empty</p><p>清空函数队列</p><p>6 has</p><p>判断函数队列中是否存在某个函数</p><p>7 remove</p><p>从内部队列中移除某些函数</p><p>8 disable</p><p>禁用回调列表中的回调</p><p>9 disabled</p><p>回调管理是否被禁用</p><p>10 lock</p><p>锁定回调列表的当前状态。</p><p>disable 和 lock 的区别</p><p>两者唯一的区别就是添加了 memory 参数，看一下对比</p><pre><code>var cb = $.Callbacks(&#39;memory&#39;);cb.add(function () &#123;    console.log(&#39;one&#39;);&#125;);cb.fire();cb.disable();//cb.lock();cb.add(function () &#123;    console.log(&#39;two&#39;);&#125;);</code></pre><p>毫无疑问，disable 就是禁用所有功能，无论添加什么参数。而在 memory 的情况下，fire 过后再 lock，继续 add 新的函数依旧会立即执行。</p><p>11 locked</p><p>回调管理是否被锁</p><p>12 fired</p><p>回调队列是否执行过</p><h3 id="Callbacks-Deferred-and-Pub-Sub"><a href="#Callbacks-Deferred-and-Pub-Sub" class="headerlink" title="$.Callbacks, $.Deferred and Pub/Sub"></a>$.Callbacks, $.Deferred and Pub/Sub</h3><p>pub / sub（观察者模式）背后的一般思路 是促进应用程序的松散耦合。而比对其他对象的方法调用的单个对象，一个对象，而不是另一个对象的一个特定的任务或活动，并通知当它发生。观察家也被称为订阅者，它指向观察对象。观察者（Publisher）事件发生时通知用户</p><p>作为 $.Callbacks() 的创建组件的一个演示，只使用回调函数列表，就可以实现 Pub/Sub 系统。</p><pre><code>var topics = &#123;&#125;;jQuery.Topic = function( id ) &#123;    var callbacks,        method,        topic = id &amp;&amp; topics[ id ];    if ( !topic ) &#123;        callbacks = jQuery.Callbacks();        topic = &#123;            publish: callbacks.fire,            subscribe: callbacks.add,            unsubscribe: callbacks.remove        &#125;;        if ( id ) &#123;            topics[ id ] = topic;        &#125;    &#125;    return topic;&#125;;</code></pre><p>然后，可以很容易的使用这部分应用程序的发布和订阅感兴趣的事件：</p><pre><code>// Subscribers$.Topic( &quot;mailArrived&quot; ).subscribe( fn1 );$.Topic( &quot;mailArrived&quot; ).subscribe( fn2 );$.Topic( &quot;mailSent&quot; ).subscribe( fn1 );// Publisher$.Topic( &quot;mailArrived&quot; ).publish( &quot;hello world!&quot; );$.Topic( &quot;mailSent&quot; ).publish( &quot;woo! mail!&quot; );// Here, &quot;hello world!&quot; gets pushed to fn1 and fn2// when the &quot;mailArrived&quot; notification is published// with &quot;woo! mail!&quot; also being pushed to fn1 when// the &quot;mailSent&quot; notification is published./*output:hello world!fn2 says: hello world!woo! mail!*/</code></pre><p>尽管上面的代码很有用，但是可以进一步改进其实现。使用 $.Deferreds，可以保证当特定的任务被完成（或被解决）时，发布者只能向订阅者发布通知。参见下面的示例代码，进一步讨论如何在实践中使用这种情况：</p><pre><code>// subscribe to the mailArrived notification$.Topic( &quot;mailArrived&quot; ).subscribe( fn1 );// create a new instance of Deferredsvar dfd = $.Deferred();// define a new topic (without directly publishing)var topic = $.Topic( &quot;mailArrived&quot; );// when the deferred has been resolved, publish a// notification to subscribersdfd.done( topic.publish );// Here the Deferred is being resolved with a message// that will be passed back to subscribers. It&#39;s possible to// easily integrate this into a more complex routine// (eg. waiting on an ajax call to complete) so that// messages are only published once the task has actually// finished.dfd.resolve( &quot;it&#39;s been published!&quot; );</code></pre><h3 id="use-JQuery-Callbacks"><a href="#use-JQuery-Callbacks" class="headerlink" title="use JQuery.Callbacks"></a>use JQuery.Callbacks</h3><p><a href="http://stackoverflow.com/questions/8070894/when-would-i-use-jquery-callbacks">When would I use JQuery.Callbacks?</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 积累 </tag>
            
            <tag> javascript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fiddler学习总结</title>
      <link href="/posts/18778.html"/>
      <url>/posts/18778.html</url>
      
        <content type="html"><![CDATA[<h3 id="fiddler"><a href="#fiddler" class="headerlink" title="fiddler"></a>fiddler</h3><p>1.基本功能<br>监控 HTTP/HTTPs 流量<br>查看截获的内容<br>伪造请求（伪造服务器返回来的请求，还可以发送给服务器）<br>测试网站性能<br>解密 HTTPs 的 web 会话 2.原理：Fiddler 的工作原理类似于一个代理。因此，在使用中可能会出现网络问题，可以直接关闭或者点击关掉左下角的 capture，也要关闭翻墙软件。fiddler 的代理模式有两种：<br>流模式：（streaming）实时传送给客户端（更接近于浏览器本身真实的行为）<br>缓冲模式：（buffering）等 http 请求所有东西都准备好后才返回给应用程序（可控制最后的服务器响应）<br>在 Fiddler 的工具栏的 Stream 可以进行两种模式的切换，默认是缓冲模式<br>3.fiddler 使用场景：<br>（1）开发环境 host 配置：<br>通常情况下，配置 host 需要改变系统文件很不方便，在多个开发环境下切换很低效。fiddler 提供了相对高效的 host 配置方法<br>（2）前后端接口调试：<br>通常情况下，调试前后端的接口需要真是的环境，一大推假数据，写 javascript 代码。fiddler 只需要一个 ui 界面进行配置即可<br>（3）线上 bugfix<br>fiddler 可以将发布文件代理到本地，快速定位线上 bug<br>（4）性能分析和优化<br>fiddler 会提供请求的实际图，清晰明了，网站需要优化的部分 4.工具栏常用功能介绍<br>Replay：回放会话，选中会话并按 R 键即可回放会话（可多条），清空监控面板，快捷键 ctrl+x<br>go：断点调试<br>stream：切换代理模式<br>Decode：解压请求<br>keep all session 选项可选保存会话的数量，默认的保存所有，保存的会话越多，fiddler 占用的内存越大，可以设置下，而且调试也不希望看到太多会话，可以根据需要清空监控面板或过滤请求<br>All Process：可以用来控制如只捕获 chrome 浏览器的请求<br>Find：可以查找会话并选择颜色高亮标明<br>TextWizard：解码/编码功能，可选选项很多，避免去网上找解码工具 5.状态栏<br>Capture 用来控制 Fiddler 是否工作，点击即可切换状态<br>All Process 控制请求来源<br>旁边的数字代表当前会话数量 6.命令行<br>help<br>cls 清屏 (Ctrl+x 也可以清屏)<br>select 选择会话的命令<br>?.png 用来选择 png 后缀的图片<br>bpu 截获 request 7.右侧窗口功能<br>（1）Statistics： 一个会话的统计信息，可以为优化提供依据，rtt 表示一次往返时间<br>（2）Inspectors： 对请求进行解包，可以查看相应的请求，响应信息<br>（3）AutoResponder： 文件代理，可以把请求的资源用本地文件代理掉，方便调试线上 bug 文件<br>Fiddler 的 AutoResponder tab 允许你从本地返回文件，而不用将 http request 发送到服务器上。<br>打开 Fiddler 把这个文件所在的会话拖到 AutoResponer Tab 下<br>选择 Enable automatic reaponses 和 Unmatched requests passthrough<br>在下面的 Rule Editor 下面选择 Find a file… 选择本地保存的图片，最后点击 Save 保存下。<br>刷新页面，你可以看到请求的文件是本地的。<br>（4）Composer： 前后端端口连调，可以用来伪造请求<br>（5）Log： 记录日志<br>（6）Timeline：网站性能分析<br>8.fiddler 插件<br>Fiddler Add-ons 插件：javaScript formatter -&gt; 对关于 js 文件右击 -&gt; 选择 -&gt; make javascript pretty -&gt; textview / syntaxview 代码全部高亮<br>traffic differ（对比两个不同的会话）： 直接拖进两个不同的请求，会显示完整的对比数据 -&gt; 可以用来对比优化前后的不同<br>willow -&gt; 快速管理 host 列表 完全可视化 http 代理插件 可视化限速 9.高级应用<br>网速限速<br>10.tips<br>（1）chrome 和 firefox 浏览器无法被监听<br>fiddler 安装之后，默认会在 IE 浏览器中安装一个 fiddler 的插件，所以它对 IE 及国内基于 IE 内核的各类浏览器都能实现监听，但其他内核的浏览器无法被监听。<br>解决办法：禁用 chrome 和 firefox 中具有代理功能的插件，比如 chrome 如果安装了 switchSharp，禁用它或选择“使用系统代理设置”，或在 switchSharp 中新配置一个代理项（比如名为 fiddler，用于指向代理 127.0.0.1，端口 8888），即可实现监听。<br>（2）抓取 HTTPS 包<br>这里默认的只会抓取 HTTP 请求包，如果也要抓取 HTTPS 包，则在 HTTPS 标签栏里设置，把 Capture HTTPS CONNECTs 选项勾上。<br>（3）真机调试<br>首先我们打开 Fiddler -&gt; Tools-&gt;Fiddler Options 在 Connection 面板里将 Allow remote computers to connect 勾选起来，确定后，关闭 Fiddler 并重新打开 Fiddler。<br>然后把手机端的代理设置为 Fiddler 的代理，代理设置需要一个 ip 和一个端口，ip 就是 Fiddler 所运行的电脑的局域网 ip 地址，端口默认是 Fiddler 代理的端口，请确保手机所在的网段可以访问到电脑所在的网段，同一个局域网里一般没什么问题。<br>（4）设置断点了<br>设置好断点后，你可以修改 httpRequest 的任何信息包括 host, cookie 或者表单中的数据。设置断点有两种方法<br>第一种：打开 Fiddler 点击 Rules -&gt; Automatic Breakpoint -&gt; Before Requests(这种方法会中断所有的会话)<br>如何消除命令呢？点击 Rules -&gt; Automatic Breakpoint -&gt;Disabled<br>第二种: 在命令行中输入命令: bpu <a href="http://www.baidu.com/">www.baidu.com</a> (这种方法只会中断<a href="http://www.baidu.com/">www.baidu.com</a>)<br>如何消除命令呢？在命令行中输入命令 bpu</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fiddler </tag>
            
            <tag> 调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>张鑫旭CSS深入系列学习总结</title>
      <link href="/posts/37668.html"/>
      <url>/posts/37668.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://www.zhangxinxu.com/wordpress/">大神博客地址</a></p><h2 id="float-浮动"><a href="#float-浮动" class="headerlink" title="float 浮动"></a>float 浮动</h2><h3 id="浮动的设计初衷仅仅是为了文字环绕效果"><a href="#浮动的设计初衷仅仅是为了文字环绕效果" class="headerlink" title="浮动的设计初衷仅仅是为了文字环绕效果"></a>浮动的设计初衷仅仅是为了文字环绕效果</h3><h3 id="浮动的特性：包裹和破坏"><a href="#浮动的特性：包裹和破坏" class="headerlink" title="浮动的特性：包裹和破坏"></a>浮动的特性：包裹和破坏</h3><p>包裹：</p><ol><li>收缩 水平方向</li><li>坚挺 垂直方向</li><li>隔绝 BFC</li></ol><p>具有包裹性的其他小伙伴：<br>display: inline-block,table-cell,…<br>position: absolute(近亲),fixed,sticky,…<br>overflow: hidden/scroll</p><p>破坏：父元素高度塌陷<br>display: none<br>position: absolute,fixed,sticky</p><h3 id="浮动是魔鬼，更是情非得已"><a href="#浮动是魔鬼，更是情非得已" class="headerlink" title="浮动是魔鬼，更是情非得已"></a>浮动是魔鬼，更是情非得已</h3><p>浮动使高度塌陷不是 bug，而是标准（是为了实现文字环绕效果）</p><h3 id="清除浮动：清除浮动带来的效果"><a href="#清除浮动：清除浮动带来的效果" class="headerlink" title="清除浮动：清除浮动带来的效果"></a>清除浮动：清除浮动带来的效果</h3><p>两种方法：</p><ol><li>脚底插入 clear:both（只是搭桥，可以与外部发生外边距重叠）</li><li>父元素 BFC（IE8+）或 haslayout（IE6/IE7），封闭，不与外界联系</li></ol><p>clear:both</p><ol><li>html block 水平元素底部走起，如<div></div></li><li>css after 伪元素底部生成</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix:after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.clearfix</span> <span class="token punctuation">&#123;</span>  \*<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浮动的滥用"><a href="#浮动的滥用" class="headerlink" title="浮动的滥用"></a>浮动的滥用</h3><ol><li>元素的 block 块状化</li><li>破坏性造成的紧密排列特性（去空格化，空格也是字符，浮动使字符移动到一边），因此常被用来砌砖头</li></ol><p>砌砖布局的问题</p><ol><li>妙脆角——嘎吱脆——容错性比较糟糕，容易出问题</li><li>吝啬鬼——重用废——需要固定尺寸</li><li>洋葱头——IE7 飙泪——低版本问题多</li></ol><p>ele.style[“cssFloat” in trigger.style?”cssFloat”:”styleFloat”] = ‘left’;</p><p>获取最终样式：display = this.currentStyle?this.currentStyle.display:window.getComputedStyle(this,null).display;</p><h3 id="浮动与流体布局"><a href="#浮动与流体布局" class="headerlink" title="浮动与流体布局"></a>浮动与流体布局</h3><ol><li>文字环绕衍生——单侧固定</li></ol><p>width+float 和 padding-left/margin-left</p><ol><li>不改变 BOM 位置的单侧固定流体布局</li></ol><p>要在外面加一层：width:100%+float<br>内部：padding-right/margin-right 和 width+float+margin 负值(将自己移上来) 3.高级进化-智能自适应尺寸（一侧改变宽度另一侧自动适应）<br>float 和 display:table-cell(IE8+)/display:inline-block(IE7)</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.left</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.right</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>  *<span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span>  *<span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>流体布局常采用宽度分离原则：易维护<br>margin-left: -100%的原理：浮动元素，只有在位置不够的时候才会被挤到第二行，而这能给元素一个位置，恰能到达窗口最左侧</p><h1 id="float-兼容性"><a href="#float-兼容性" class="headerlink" title="float 兼容性"></a>float 兼容性</h1><p>让 IE7 飙泪的问题<br>含 clear 的浮动元素包裹不正确的问题；<br>浮动元素倒数</p><p>2 个莫名垂直间距问题；<br>浮动元素最后一个字符重复问题；<br>浮动元素楼梯排列问题；<br>浮动元素和文本不在同一行的问题；</p><h2 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h2><h3 id="absolute-与-float"><a href="#absolute-与-float" class="headerlink" title="absolute 与 float"></a>absolute 与 float</h3><p>相同的特性表现：包裹和破坏<br>兄弟关系：页面可相互转化</p><h3 id="absolute-与-relative"><a href="#absolute-与-relative" class="headerlink" title="absolute 与 relative"></a>absolute 与 relative</h3><p>是分离的、对立的，不是兄弟关系！<br>absolute 越独立越强大<br>超越 overflow：独立的 absolute 可以摆脱 overflow 的限制，无论是滚动还是隐藏</p><h3 id="无依赖的-absolute-定位"><a href="#无依赖的-absolute-定位" class="headerlink" title="无依赖的 absolute 定位"></a>无依赖的 absolute 定位</h3><p>不受 relative 限制的 absolute 定位，行为表现上是不使用 top/left/bottom/right/任何属性或使用 auto 作为值<br>定位的行为表现 1.脱离文档流 2.折翼的天使：去浮动、位置跟随<br>IE7 永远的 inline-block 水平<br>配合 margin 的精确定位，这是不影响其他布局的绝对定位下的相对定位之王</p><h3 id="强大的折翼天使"><a href="#强大的折翼天使" class="headerlink" title="强大的折翼天使"></a>强大的折翼天使</h3><ol><li>图片、图标绝对定位覆盖（利用跟随性，更易维护），用<!-- -->去掉换行之间的空格</li><li>下拉框定位最佳实践</li><li>居中以及边缘对齐定位</li></ol><p>text-align:center + &nbsp;和自身 absolute 及 margin-left: 负的自身宽度的一半<br>边缘对齐：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CSS</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.center</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.child</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://jsbin.com/zidomo/1/edit?html,css,output">demo</a> 4.各种对齐 *号对齐<br>图文混排<br>溢出</p><h3 id="absolute-和层级"><a href="#absolute-和层级" class="headerlink" title="absolute 和层级"></a>absolute 和层级</h3><p>动画尽量作用在绝对定位元素上<br>如果非弹窗类的元素 z-index&gt;2，必定有冗余，请优化</p><h3 id="absolute-和天使的翅膀"><a href="#absolute-和天使的翅膀" class="headerlink" title="absolute 和天使的翅膀"></a>absolute 和天使的翅膀</h3><h3 id="absolute-与-width-和-height"><a href="#absolute-与-width-和-height" class="headerlink" title="absolute 与 width 和 height"></a>absolute 与 width 和 height</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.overlay</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>left、right 与 width，top、bottom 与 height 相互替代性</p><p>绝对定位方向是对立的，left:0;right:0;会进行暴力拉伸<br>absolute 的翅膀拉伸和 width/height 是可以相互替代的</p><p>position:absolute;left:0;top:0;width:50%; = position:absolute;left:0;top:0;right:50%;</p><p>暴力拉伸支持 IE7+<br>差异所在：拉伸更强大，width 只能使用 CSS3 calc 计算</p><p>相互支持性</p><ol><li>容器无需固定 width/height 值，内部元素亦可拉伸</li><li>容器拉伸，内部元素支持百分比 width/height 值</li></ol><p>元素百分比 height 要想其作用，通常需要父级容器的 height 值不是 auto<br>相互合作性：当尺寸限制、拉伸以及 margin:auto 同时出现时，会有绝对定位元素的绝对居中效果（IE8+）</p><h3 id="absolute-与整体页面布局"><a href="#absolute-与整体页面布局" class="headerlink" title="absolute 与整体页面布局"></a>absolute 与整体页面布局</h3><ol><li>body 降级、子元素升级<br>升级的子 div 满屏走起<br>.page{position: absolute;left:0;right:0;top:0;bottom:0;}<br>绝对定位受限于父级，因此需要 html,body{height:100%;}</li><li>各模块——各居其位</li><li>内容区域想象成 body，避免了移动端 position：fixed 问题</li><li>全屏覆盖与 page 平级，可以用来移动端上、下固定的整体布局</li></ol><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h2><h3 id="overflow-基本属性"><a href="#overflow-基本属性" class="headerlink" title="overflow 基本属性"></a>overflow 基本属性</h3><p>visible,hidden,scroll,auto,inherit<br>overflow-x 和 overflow-y(IE8+)，值相同时，为值属性，当一个为 visible，一个为 hidden 或 scroll 或 auto 时，会重置为 auto</p><p>兼容性</p><ol><li>燕肥环瘦，各有千秋</li><li>宽度设定机制（IE7 width:100%出现水平滚动条）</li></ol><p>作用的前提</p><ol><li>非 display:inline 水平</li><li>对应方位的尺寸限制：width/height/max-width/max-height/absolute 拉伸</li><li>对应 td 等，还需要设置 table 为 table-layout:fixed</li></ol><h3 id="overflow-与滚动条"><a href="#overflow-与滚动条" class="headerlink" title="overflow 与滚动条"></a>overflow 与滚动条</h3><p>无论什么浏览器，默认滚动条均来自 html 标签,而不是 body 标签</p><p>body 默认 0.5em margin 值<br>IE7 默认：html{overflow-y:scroll;}<br>IE8+等浏览器默认：html{overflow:auto;}</p><p>去除页面默认滚动条，只需要 html{overflow:hidden;}<br>滚动高度：<br>chrome：document.body.scrollTop;<br>其他：document.documentElement.scrollTop;</p><p>overflow 的 padding-bottom 缺失现象：chrome 不缺失，其他缺失，导致 scrollHeight 不一样</p><p>滚动条水平宽度：<br>overfl:auto 的潜在布局隐患：因为滚动条会占用容器尺寸</p><p>水平居中的跳动问题</p><p>1.html{overflow-y:scroll;}<br>2..container{padding-left:calc(100vm - 100%);}(IE9+)</p><p>自定义滚动条-webkit</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">::-webkit-scrollbar</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* _血槽宽度_ */</span>  <span class="token property">width</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">::-webkit-scrollbar-thumb</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* _拖动条_ */</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">raba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">::-webkit-scrollbar-track</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* _背景槽_ */</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义滚动条——IE（丑到爆，用<a href="https://github.com/malihu/malihu-custom-scrollbar-plugin">插件</a>）<br>IOS 原生滚动回弹效果-webkit-overflow-scrolling:touch;</p><h3 id="overflow-与-BFC"><a href="#overflow-与-BFC" class="headerlink" title="overflow 与 BFC"></a>overflow 与 BFC</h3><p>visible 不触发，其他 3 个触发</p><ol><li>清除浮动影响</li><li>避免 margin 穿透问题（指子元素 margin 穿透父级元素</li><li>两栏自适应：左浮动，右 overflow</li></ol><p>使用 padding 做流体自适应布局时，万万不可让自适应层 BFC 化<br>.cell{overflow:hidden;_display:inline-block;}副作用明显，无法广泛应用，因此最常用：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.cell</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span>  *<span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  *<span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="overflow-与绝对定位"><a href="#overflow-与绝对定位" class="headerlink" title="overflow 与绝对定位"></a>overflow 与绝对定位</h3><p>overflow:hiddenshi 失效、overflow 滚动失效<br>w3c 官方文档是这样解释的：绝对定位元素不总是被父级 overflow 属性裁剪，尤其是当 overflow 在绝对定位元素及其包含块之间的时候</p><p>如何避免失效：</p><ol><li>overflow 元素自身为包含块</li><li>overflow 元素的子元素为包含块 3.任意合法 transform 声明当做包含块（仅做了解）<br>overflow 失效的利用</li></ol><h3 id="依赖-overflow-的样式表现"><a href="#依赖-overflow-的样式表现" class="headerlink" title="依赖 overflow 的样式表现"></a>依赖 overflow 的样式表现</h3><ol><li>css resize:both/horizontal/vertical</li></ol><p>textarea 自带 resize 特性，因为自带 overflow:auto，默认 17px*17px 2. text-overflow:ellipsis;</p><h3 id="overflow-与锚点技术"><a href="#overflow-与锚点技术" class="headerlink" title="overflow 与锚点技术"></a>overflow 与锚点技术</h3><p>锚链：hash（url 中#）<br>锚点<br>锚点定位的本质就是：“滚床单”——改变容器的滚动高度 1.容器可滚动 2.锚点元素在容器内<br>锚点定位的触发：<br>1.url 地址中的锚链与锚点元素 2.可 focus 的锚点处于 focus 状态<br>锚点定位的作用: 1.快速定位 2.锚点定位与 overflow 选项卡技术（适应单页，无滚动）</p><h2 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h2><h3 id="line-height-的定义"><a href="#line-height-的定义" class="headerlink" title="line-height 的定义"></a>line-height 的定义</h3><p>行高：两行文字基线（baseline）之间的距离</p><ol><li>什么是基线：baseling，英文字母 x 下边沿位置</li><li>为什么是基线：可以是基线，但基线乃任意线之根本</li><li>有字母基线、悬挂基线、表意基线（中文）等</li></ol><p>基线与字体有关，微软雅黑偏下<br>单行文本用 line-height 看似居中，实际未居中，字体越大差异越明显</p><h3 id="line-height-与行内框盒子模型"><a href="#line-height-与行内框盒子模型" class="headerlink" title="line-height 与行内框盒子模型"></a>line-height 与行内框盒子模型</h3><ol><li>内容区域（context area）是一种围绕文字看不见的盒子，与 font-size 大小相关</li><li>内联盒子（inline boxes），如果外部含 inline 水平的标签，则属于内联盒子，如果是一个光秃秃的文字，则属于匿名内联盒子</li><li>行框盒子（line boxes），每一行就是一个行框盒子，由内联盒子组成</li><li>包含盒子（containing box），由行框盒子组成</li></ol><h3 id="line-height-的高度机理"><a href="#line-height-的高度机理" class="headerlink" title="line-height 的高度机理"></a>line-height 的高度机理</h3><p>内联元素的高度由行高决定，不是文字撑起的</p><ol><li>行高由于其继承性，影响无处不在，即使单行文本也不例外</li><li>行高只是幕后黑手，高度的表现不是行高，而是内容区域和行间距<br>行高 = 内容区域 + 行间距<br>内容区域高度只与字体和字号有关，与 line-height 无关<br>在 simsun（宋体）字体下，内容区域高度等于文字大小值<br>simsun 字体下，font-size + 行间距 = line-height<br>行间距 = line-height - context area<br>行高决定内联盒子高度，行间距墙头草，可大可小（甚至负值），保证高度正好等于行高</li></ol><h3 id="line-height-各类属性值"><a href="#line-height-各类属性值" class="headerlink" title="line-height 各类属性值"></a>line-height 各类属性值</h3><ol><li>normal：默认属性值，跟着用户的浏览器走，且与元素字体关联</li></ol><p>微软雅黑 normal chrome 1.32 左右<br>宋体 normal chrome 1.14 左右<br>在各浏览器中不一致，因此要在 body 中重置</p><ol start="2"><li>number，length，percent，inherit（IE8+)</li></ol><p>line-height:1.5 所有可继承元素根据 font-size 重新计算行高<br>line-height:150%/1.5em 当前元素根据 font-size 计算行高，继承给下面的元素</p><p>推荐 number：<br>body{font-size:14px;line-height:4.1286;}——匹配 20px，重阅读可以 1.5，1.6</p><h3 id="line-height-与图片的表现"><a href="#line-height-与图片的表现" class="headerlink" title="line-height 与图片的表现"></a>line-height 与图片的表现</h3><p>行高不会影响图片实际占据的高度<br>图片混排，可以感性认为与隐匿文本节点基线对齐</p><p>如何消除图片底部间隙？</p><ol><li>图片块状化——无基线对齐 img{display:block;}</li><li>图片底线对齐——img{vertical-align:middle;}</li><li>行高足够小——.box{line-height:0;}</li></ol><p>小图片和大文字，基本上高度受行高控制</p><h3 id="line-height-的实际应用"><a href="#line-height-的实际应用" class="headerlink" title="line-height 的实际应用"></a>line-height 的实际应用</h3><p>1.图片水平居中(近似)：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* IE8+  */</span><span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.多行文本垂直居中</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box</span> <span class="token punctuation">&#123;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.text</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">text-aling</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://jsbin.com/jewuris/1/edit?html,css,output">查看 demo</a><br>{height: 36px; line-height: 36px;}前一个多余（其实应该是不一定，至少 overflow:hidden 时可能 line-height 多余，可能都要）</p><h2 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h2><h3 id="基本认识"><a href="#基本认识" class="headerlink" title="基本认识"></a>基本认识</h3><p>inherit<br>线类：baseline（默认）、top、middle、bottom<br>文本类：text-top、text-bottom<br>上标、下标类：sub、super<br>数值百分比类：20px、2em、20%（在 basseling 对齐的基础上再移动相应距离，支持负值）<br>vertical-align 的百分比值是相对于 line-height 计算的</p><h3 id="vertical-align-起作用的前提"><a href="#vertical-align-起作用的前提" class="headerlink" title="vertical-align 起作用的前提"></a>vertical-align 起作用的前提</h3><p>应用于 inline 水平元素以及 table-cell 元素<br>默认 inline 水平元素：img，span,strong,em,未知元素<br>默认 inline-block 元素：input(IE8+),button(IE8+)<br>默认 table-cell 元素：td<br>所以默认状态下，可以应用 vertical-align 的有：图片、按钮、文字、单元格</p><p>改变元素状态：</p><ol><li>直接 display 设置</li><li>css 声明间接设置（浮动、绝对地位）</li></ol><p>注意能应用 vertical-align 时也不一定能居中，如<br>.wrap{height: 300px;border: 1px solid;}<br>.wrap img{vertical-align: middle;}<br>还是需要给 wrap 设置 line-height<br>还需注意 display:table-cell 元素，需要 vertical-align:middle 作用于自身，如下设置在 img 上无效</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.wrap img</span> <span class="token punctuation">&#123;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实例：个数不定文字内容和图片垂直居中</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.wrap</span> <span class="token punctuation">&#123;</span>  <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 20px 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.wrap span</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.wrap img</span> <span class="token punctuation">&#123;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://jsbin.com/buyago/1/edit?html,css,output">查看 demo</a></p><h3 id="vertical-align-与-line-height"><a href="#vertical-align-与-line-height" class="headerlink" title="vertical-align 与 line-height"></a>vertical-align 与 line-height</h3><p>vertical-align 的百分比是相对于 line-height 计算的<br>对于内联元素，vertical-align 与 line-height 虽然看不见，但实际上处处都是<br>近似垂直居中：vertical-align:middle;</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baseline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baseline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>x-baseline<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>.baseline&#123; height: 150px; width: 150px; display: inline-block; background: #ccc;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://jsbin.com/julobem/1/edit?html,css,output">查看对齐情况</a><br>根据 css2 的可视化格式模型文档：inline-block 的基线是正常流最后一个 line box 的基线，除非这个 line box 里面既没有 line boxes（line box 是空的）或者本身 overflow 属性的计算值不是 visible，这种情况下基线是 margin 底边缘<br>设置 line-height:0，会再下沉，因为字符高度为 0，实际占据的高度为 0，高度区域为字符串垂直中心线，盒子上边缘为 1/2x 高度处<br>text-align:justify 任意数目列表两端对齐<br>下方空白一般可以通过 line-height:0;vertical-align:top;一起解决</p><h3 id="vertical-align-线性类属性值"><a href="#vertical-align-线性类属性值" class="headerlink" title="vertical-align 线性类属性值"></a>vertical-align 线性类属性值</h3><ol><li>vertical-align:bottom 的定义<br>inline/inline=block 元素：元素底部和整行的底部对齐<br>table-cell 元素：单元格底 padding 边缘和表格行的底部对齐</li><li>vertical-align:top 的定义<br>inline/inline=block 元素：元素顶部和整行的顶部对齐<br>table-cell 元素：单元格上 padding 边缘和表格行的顶部对齐</li><li>vertical-align:middle 的定义<br>inline/inline=block 元素：元素的垂直中心点和父元素基线上 1/2x height 对齐<br>table-cell 元素：单元格填充盒子相对于外面的表格行居中对齐<br>字符的中心不是 x 文字的中心（因为字符有下沉效应，不同字体下沉程度不一致），即 context area 高度的中心线和基线上 1/2x height 线不对齐，所以 img 要完全居中，还需要设置 font-size:0;</li></ol><h3 id="vertical-align-文本类"><a href="#vertical-align-文本类" class="headerlink" title="vertical-align 文本类"></a>vertical-align 文本类</h3><p>与前后元素无关，与 line-height 无关，只与 font-size 有关</p><p>text-top:盒子的顶部和父级 content area 的顶部对齐<br>text-bottom:盒子的底部和父级 content area 的底部对齐</p><p>实际作用：表情图片（或原始尺寸背景图标）与文字的对齐效果</p><ol><li>使用顶部/底线的问题在于受其他内联元素的影响</li><li>使用中线也不错，但需要恰好的字体大小</li><li>使用文本底部较合适，不受行高及其他内联元素影响</li></ol><h3 id="vertical-align-上标、下标类"><a href="#vertical-align-上标、下标类" class="headerlink" title="vertical-align 上标、下标类"></a>vertical-align 上标、下标类</h3><p>sup 标签 vertical-align: super;<br>sub 标签 vertical-align: sub;</p><h3 id="vertical-align-前后不一的作用机制"><a href="#vertical-align-前后不一的作用机制" class="headerlink" title="vertical-align 前后不一的作用机制"></a>vertical-align 前后不一的作用机制</h3><p>关注当前元素和父级，前后并没有直接影响<br><a href="https://jsbin.com/suwebu/2/edit?html,css,output">查看 demo</a><br>近似垂直居中：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">p</span> <span class="token punctuation">&#123;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p img</span> <span class="token punctuation">&#123;</span>  <span class="token property">vertical</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">p img::after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>IE7 有很多兼容性问题，可以认为 IE7 下图文一体（后面文字套层 span 标签，并 display:inline-block 可解决），middle 解释有问题</p><h3 id="vertical-align-的实际应用"><a href="#vertical-align-的实际应用" class="headerlink" title="vertical-align 的实际应用"></a>vertical-align 的实际应用</h3><p>1.小图标和文字的对齐</p><p>vertical-align 负值，无兼容性问题</p><p>2.不定尺寸图片或多行文本的垂直居中</p><p>主体元素 inline-block<br>0 宽度 100%高度辅助元素<br>vertical-align:middle;</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertical-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.parent</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.parent .vertical-center</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.parent i</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://jsbin.com/geyiri/1/edit?html,css,output">查看 demo</a></p><h2 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h2><h3 id="relative-与-absolute"><a href="#relative-与-absolute" class="headerlink" title="relative 与 absolute"></a>relative 与 absolute</h3><p>限制作用</p><ol><li>限制 left/top/right/bottom 定位</li><li>限制 z-index 层级，当 relative 层级不是 auto 时，里面的 absolute 层级不起作用</li><li>限制在 overflow 下的嚣张气焰，防止 absolute 超出</li></ol><p>对于 fixed 元素只能限制 z-index 层级</p><h3 id="relative-与定位"><a href="#relative-与定位" class="headerlink" title="relative 与定位"></a>relative 与定位</h3><ol><li>相对自身</li><li>无侵入：不影响其他元素，可以用于自定义拖动</li></ol><p>top 和 bottom 同时存在，top 优先级高<br>left 和 right 同时存在，left 优先级高</p><h3 id="relative-与-z-index-层级"><a href="#relative-与-z-index-层级" class="headerlink" title="relative 与 z-index 层级"></a>relative 与 z-index 层级</h3><ol><li>提高层叠上下文：如果有两张图片层叠在一起，像让下面的图片放到上面来，就可以设置下面的图片的 position 为 relative</li><li>新建层叠上下文与层级控制：如果子元素设置了 absolute，z-index：4；父元素设置了 relative，z-index：1；另外一个子元素设置了 absolute，z-index：2；父元素设置了 relative，z-index3；则结果会使后者显示在上面<br>将父元素的 z-index：auto 是不会限制内部 absolute 元素层叠问题，不包括 IE6/IE7</li></ol><h3 id="relative-的最小化影响原则"><a href="#relative-的最小化影响原则" class="headerlink" title="relative 的最小化影响原则"></a>relative 的最小化影响原则</h3><p>指的是尽量降低 relative 对其他元素的影响</p><ol><li>尽量避免使用 relative：absolute 定位不依赖 relative</li><li>relative 最小化原则：放在空 div 里</li></ol><h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h2><h3 id="z-index-基础"><a href="#z-index-基础" class="headerlink" title="z-index 基础"></a>z-index 基础</h3><p>z-index:auto 或者 整数值 inherit 1.支持负值 2.支持 css3 animation 动画 3.在 css2.1 时代，需要和定位元素配合使用</p><h3 id="z-index-与定位元素"><a href="#z-index-与定位元素" class="headerlink" title="z-index 与定位元素"></a>z-index 与定位元素</h3><p>z-index 在定位元素中起作用</p><p>z-index:auto 近似 z-index:0<br>原则:谁大谁上，祖先优先</p><p>如果定位元素 z-index 没有发生嵌套：<br>a.后来者居上<br>b.谁大谁上</p><p>如果定位 z-index 发生嵌套：祖先优先（前提是 z-index 是数值，不是 auto），按照祖先的层级再遵循 a，b 规则</p><p>z-index:auto 当前层叠上下文的生成盒子层叠水平是 0，盒子（除非是根元素）不会创建一个新的层叠上下文 3.层叠上下文和层叠水平</p><p>stacking context（层叠上下文）：是 html 中的一个三维概念，意味着元素在 z 轴（人的视线穿过显示器的直线轴）上可以“高人一等”</p><ol><li>页面根元素具有层叠上下文</li><li>z-index 值为数值时也具有层叠</li><li>其他属性</li></ol><p>层叠水平：stacking leavel 层叠上下文中的每个元素都有一个层叠水平，决定了同一个层叠上下文中元素在 z 轴上的显示顺序。遵循谁大谁上，后来居上的层叠原则</p><p>层叠水平与 z-index 区别：<br>普通元素也有层叠水平<br>z-index 只在定位元素起作用<br>层叠上下文特性： 1.层叠上下文可嵌套成一个分层次的层叠上下文 2.层叠上下文与兄弟元素独立。层叠上下文变化渲染，只考虑后代元素 3.每个层叠上下文自成体系：被层叠后，元素被认为在父层层叠顺序中</p><h3 id="层叠顺序"><a href="#层叠顺序" class="headerlink" title="层叠顺序"></a>层叠顺序</h3><p>层叠顺序（stacking order）表示元素发生层叠时候有着特定的垂直显示顺序<br>著名的七阶层叠水平(stacking level)</p><p>从低到高：<br>层叠上下文 background/border,负 z-index,block 块状水平盒子,float 浮动盒子,inline/inline-block 水平盒子,z-index:auto 或看成 z-index:0,正 z-index</p><ol><li>意义：规范元素重叠时的呈现规则</li><li>为什么？</li></ol><p>更符合页面加载的功能和视觉呈现，装饰——布局——内容<br>内容是页面最重要的实体，因此层叠水平要高</p><p><a href="https://jsbin.com/qehatom/1/edit?html,css,output">查看 demo</a></p><p>demo 解释：背景色覆盖是层叠顺序，文字覆盖是后来居上（因为文字是 inline 水平的，和 inline-block 平级）</p><h3 id="z-index-与层叠上下文"><a href="#z-index-与层叠上下文" class="headerlink" title="z-index 与层叠上下文"></a>z-index 与层叠上下文</h3><ol><li>定位元素默认 z-index:auto，可以看成是 z-index:0;</li><li>z-index 不为 auto 的定位元素会创建层叠上下文；</li><li>z-index 层叠顺序的比较止步于父级层叠上下文</li></ol><p>从层叠顺序上讲，z-index 可以看成 z-index，但是从层叠上下文来讲，两者有着本质区别（但不包括 IE7）<br>z-index:auto 不会创建层叠山下文<br>z-index:0 会创建<br>如果不创建层叠上下文，默认为根元素</p><p><a href="https://jsbin.com/xipiye/1/edit?html,css,output">查看 demo</a></p><h3 id="其他属性和层叠上下文"><a href="#其他属性和层叠上下文" class="headerlink" title="其他属性和层叠上下文"></a>其他属性和层叠上下文</h3><ol><li>z-index 值不为 auto 的 flex 项（父元素 display：flexinline-flex）。</li><li>元素的 opacity 值不是 1.</li><li>元素的 transform 值不是 none。</li><li>元素 mix-blend-mode 值不是 normal，</li><li>元素的 filter 值不是 none。</li><li>元素的 isolation 值不是 isolate。</li><li>position：fixed 声明（chrome 等 blink/webkit 内核）</li><li>will-change 指定的属性值为上面任意一个</li><li>元素的-webkit-overflow-scrolling 设为 touch</li></ol><h3 id="z-index-与其他-css-属性层叠上下文"><a href="#z-index-与其他-css-属性层叠上下文" class="headerlink" title="z-index 与其他 css 属性层叠上下文"></a>z-index 与其他 css 属性层叠上下文</h3><ol><li>不支持 z-index 的层叠上下文元素层叠顺序均是 z-index:auto 级别</li><li>依赖 z-index 的层叠上下文元素的层叠顺序取决于 z-index 值</li></ol><p>（1）position:relative/absolute/fixed（部分浏览器）<br>（2）display:flex/inline-flex 值的子元素 flex 项</p><p>常见淡入动画文字变化</p><h3 id="相关实践分享"><a href="#相关实践分享" class="headerlink" title="相关实践分享"></a>相关实践分享</h3><p>1.最小化影响原则 2.不犯二准则 3.组件层级计算器 4.可访问性隐藏</p><p>（1）最小化影响原则</p><p>目的：避免 z-index 嵌套混乱<br>原因：元素的层叠水平主要是由所在的层叠上下文决定的，IE7 z-index:auto 也会创建层叠上下文<br>做法：避免使用定位属性，定位属性从大容器平级分离为私有小容器</p><p>（2）不犯二准则</p><p>避免 z-index 混乱，一山比一山高的样式问题<br>原因：多人协作以及后期维护<br>做法：对非浮层元素，避免设置 z-index 值，z-index 值没有任何道理需要超过 2</p><p>（3）组件层级计数器</p><p>目的：避免浮层组件因 z-index 被覆盖的问题<br>原因：总会遇到意想不到的高层级元素，组件的覆盖规则具有动态性<br>做法：组件层级计数器<br>通过 js 获取 body 下子元素的最大 z-index 值</p><p>（4）负值 z-index 与可访问性隐藏</p><p>text-indent: -9999px;clip 剪裁等可以进行可访问性隐藏<br>人肉眼不可见，但是辅助设备可识别</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>[type=submit]&#123; position: absolute; z-index: -1; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以避免 submit 的复杂样式兼容问题，高级浏览器可直接 display:none</p><h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><h3 id="margin-与容器的尺寸"><a href="#margin-与容器的尺寸" class="headerlink" title="margin 与容器的尺寸"></a>margin 与容器的尺寸</h3><p>可视尺寸-clientWidth(标准)；<br>占据尺寸，可以理解为 outerWidth（yy，非标准，jquery 有）<br>margin 与可视尺寸：</p><ol><li>适用于没有设定 width/height 的普通 block 水平元素，float 元素、absolute/fixed 元素等不可以</li><li>只适用于水平方向</li></ol><p>应用：单侧顶宽的自适应布局</p><p>margin 与占据尺寸</p><ol><li>block、inline-block 水平元素均适用</li><li>与有没有设定 width/height 无关</li><li>适用于水平方向和垂直方向</li></ol><p>应用：滚动容器内上下留白，非 chrome 浏览器容器加 padding 底部无留白，overflow 那节有讲</p><h3 id="css-margin-与百分比单位"><a href="#css-margin-与百分比单位" class="headerlink" title="css margin 与百分比单位"></a>css margin 与百分比单位</h3><p>普通元素的百分比 margin 的计算规则：都是相对于容器的宽度计算的<br>绝对定位元素的百分比 margin：是相对于第一个定位祖先元素（relative/absolute/fixed）的宽度计算的<br>应用：如宽高 2:1 的自适应矩形<br><a href="https://jsbin.com/denuvov/1/edit?html,css,output">查看 demo</a></p><h3 id="margin-重叠"><a href="#margin-重叠" class="headerlink" title="margin 重叠"></a>margin 重叠</h3><p>margin 重叠通常特性<br>1.block 水平元素（不包括 float 和 absolute 元素） 2.不考虑 writing-mode，只发生在垂直方向上<br>margin 重叠 3 种情境 1.相邻的兄弟元素 2.父级和第一个/最后一个子元素 3.空的 block 元素</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin</span><span class="token punctuation">:</span> 1em 0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--高度只有1em，而非2em--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>父子之间 margin-top 合并：</p><ol><li>父元素非块级格式化上下文元素</li><li>父元素没有 border-top 设置</li><li>父元素没有 padding-top 值</li><li>父元素和第一个子元素没有 inline 元素分隔</li></ol><p>父子之间 margin-bottom 合并：</p><ol><li>父元素非块级格式化上下文元素</li><li>父元素没有 border-top 设置</li><li>父元素没有 padding-top 值</li><li>父元素和第一个子元素没有 inline 元素分隔</li><li>父元素没有 height，min-height，max-height 等限制</li></ol><p>margin 计算<br>1、正正取大值；<br>2、正负值相加；<br>3、负负最负值；</p><p>实践：善用 margin 层叠</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.list</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更具有健壮性，最后一个元素移除或者位置调换，均不会影响原来的布局</p><h3 id="margin-auto"><a href="#margin-auto" class="headerlink" title="margin:auto"></a>margin:auto</h3><p>自动计算填充剩余空间<br>垂直居中：</p><ol><li>可以 writing-model:vertical-lr，更改流为垂直方向，可以垂直居中</li><li>absolue 与 margin:auto</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.father</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.son</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="css-margin-负值定位"><a href="#css-margin-负值定位" class="headerlink" title="css margin 负值定位"></a>css margin 负值定位</h3><ol><li>margin 负值下的两端对齐：margin 改变元素尺寸</li><li>margin 负值下的等高布局：改变元素占据空间<br>注：其实就是所谓的 padding 补偿法，很大的 margin-bottom 负值加很大的 padding-bottom 填充缺失的空间，容器必须设置 overflow:hidden,focus 时可能有副作用</li><li>margin 负值下的两栏自适应布局：元素占据空间随 margin 移动</li></ol><h3 id="css-margin-无效"><a href="#css-margin-无效" class="headerlink" title="css margin 无效"></a>css margin 无效</h3><ol><li>inline 水平元素垂直方向 margin 无效<br>两个前提：非替换元素，如不是 img 元素，正常书写模式（没有设置 writing-mode 等）</li><li>margin 重叠</li><li>display:table-cell 与 margin，替换元素 display:table-cell 时 margin 有效，各浏览器有差异<br>display 为 table 相关类型 margin 无效</li><li>绝对定位元素的非定位方向 margin“无效”，看似无效，实则微妙，其实绝对定位的 margin 值一直有效，只是不像普通元素那样可以和兄弟元素插科打诨</li><li>鞭长莫及导致的 margin 无效 6.内联特性导致的 margin 无效</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test.jpg<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin-top</span><span class="token punctuation">:</span> -248px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>内联默认 x 不能超出容器</p><h3 id="margin-start-和-margin-end"><a href="#margin-start-和-margin-end" class="headerlink" title="margin-start 和 margin-end"></a>margin-start 和 margin-end</h3><p>正常的流向，margin-start 等同于 margin-left，两者重叠不累加<br>如果水平流是从右到左的，margin-start 等同于 margin-right<br>在垂直流下，margin-start 等同于 margin-top<br>webkit：margin-before，margin-after，margin-collapse</p><h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><h3 id="padding-与尺寸"><a href="#padding-与尺寸" class="headerlink" title="padding 与尺寸"></a>padding 与尺寸</h3><p>对于 block 水平元素</p><ol><li>padding 值暴走，一定会影响尺寸；</li><li>width 非 auto，padding 影响尺寸；</li><li>width 为 auto 或 box-sizing 为 border-box，同时 padding 值没有暴走，不影响尺寸；<br>对于 inline 水平元素<br>水平 padding 影响尺寸，垂直 padding 不影响尺寸，但是会影响背景色（占据空间）<br>利用：高度可控的分隔线</li></ol><h3 id="padding-负值和百分比值"><a href="#padding-负值和百分比值" class="headerlink" title="padding 负值和百分比值"></a>padding 负值和百分比值</h3><p>不支持任何形式的负值<br>padding 百分比均是相对于屏幕宽度计算的<br>利用 padding 轻松实现一个正方形<br>inline 水平元素的 padding 百分比值：</p><ol><li>同样相对于宽度计算</li><li>默认的高度和宽度有差异</li><li>padding 会换行</li></ol><p>空的 inline 水平元素加 padding 高度和宽度默认也不相等，inline 元素的垂直 padding 高度会让幽灵空白节点显现，也就是规范中的 strut，要把字体的大小设置为 0</p><h3 id="标签元素的默认-padding"><a href="#标签元素的默认-padding" class="headerlink" title="标签元素的默认 padding"></a>标签元素的默认 padding</h3><ol><li>ol/ul：内置 padding-left，但单位不是 em，是固定的 px<br>比较好的实践：padding-left:22px-25px 对齐</li><li>表单内置 padding</li></ol><p>所有浏览器 input、textarea 输入框内置 padding<br>所有浏览器 button 按钮内置 padding<br>部分浏览器 select 下拉内置 padding，如 Firefox、IE8+可以设置 padding<br>所有浏览器 radio/checkbox 单复选框无内置 padding，设置无效<br>button 按钮的 padding 最难控制，可以用 label 模拟</p><h3 id="padding-与布局"><a href="#padding-与布局" class="headerlink" title="padding 与布局"></a>padding 与布局</h3><ol><li>使用百分比单位构建固定比例的布局结构</li><li>配合 margin 等高布局</li><li>两栏自适应布局，padding 可以在父元素也可以在子元素</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 积累 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5学习总结</title>
      <link href="/posts/57973.html"/>
      <url>/posts/57973.html</url>
      
        <content type="html"><![CDATA[<h2 id="html5-与-html4-区别"><a href="#html5-与-html4-区别" class="headerlink" title="html5 与 html4 区别"></a>html5 与 html4 区别</h2><h3 id="语法的改变"><a href="#语法的改变" class="headerlink" title="语法的改变"></a>语法的改变</h3><p>DOCTYPE 声明：&amp;lt!DOCTYPE html&amp;gt</p><p>指定字符编码：&amp;ltmeta charset=”UTF-8”&amp;gt,HTML5 开始推荐 UTF-8</p><p>所谓的字符是对各种文字和符号的总称，涵盖了各国文字、标点符号、图形符号和数字等。字符集是对多个字符的集合，常用的字符集有 ASCII、GB2312、Unicode、ISO 等。科学家为了让计算机准确处理各种字符集，需要对字符进行编码，以便计算机能够识别和存储各种文字。</p><p>在 HTML5 出现之前，浏览器会根据三种方式确认页面的编码方式，按优先级排列如下： 1)获取 HTTP 请求头中的 Content-Type 字符对于的值。 2)使用 meta 标签声明，语法格式如下：</p><meta http-equiv="Content-Type" content="text/html;charset=utf-8"> 3)外链资源使用 charset 属性声明编码格式，如在 script 标签中使用语法格式如下：<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;myscript.js&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;</code></pre><p>HTML5 出现后，对字符集的使用做了大量的简化，可以使用以下语法进行字符声明：</p><pre><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></pre><p>对于日常网站开发，结合 HTML5 的字符集使用，建议： 1)最优先使用 HTTP 请求头指定编码。 2)统一全站字符集编码，HTML5 推荐使用 UTF-8 字符集。 3)使用 meta 标签确认字符集编码，尽可能放在 html 标签的第一个子元素位置 4)第三方引用的脚本，在不确认字符编码时，加上 charset 属性设置编码格式</p><p>为什么会产生乱码？<br>乱码产生的根本原因是你保存的编码格式和浏览器解析时的解码格式不匹配导致的。<br>乱码一般是英文以外的字符才会出现。</p><p>可以省略标记的元素： 1)不允许写结束标记的元素有：area、base、br、col、command、embed、hr、img、input、keygen、link、meta、param、source、track、wbr 2)可以省略结束标记的元素有：li、dt、dd、p、rt、rp、optgroup、option、colgroup、thead、tbody、bfoot、tr、td、th 3)可以省略全部标记的元素有：html、head、body、colgroup、tbody。</p><p>具有 boolean 值的属性：对于具有 boolean 之的属性，例如 disabled 与 readonly 等，当只写属性而不指定属性值时，表示属性值为 true，如果想要将属性值设为 false，可以不使用该属性值。</p><p>属性值可以省略引号</p><h3 id="新增的元素和废除的元素"><a href="#新增的元素和废除的元素" class="headerlink" title="新增的元素和废除的元素"></a>新增的元素和废除的元素</h3><p>新增的元素：section、article、aside、header、hgroup、footer、nav、figure、vedio、audio、embed、mark、progress、time、ruby、rt、rp、wbr、canvas、command、details、datalist、datagrid、keygen、output、source、menu</p><p>新增的 input 类型：email、url、number、range、Date Pickers</p><p>废除的元素： 1)能用 css 替代的元素：basefont、big、center、font、s、strike、tt、u 2)不再使用 frame 框架，只支持 iframe 框架 3)只有部分浏览器支持的元素：applet、bgsound、blink、marquee 4)其他废除的元素：rb、acronym、dir、isindex、listing、xmp、nextid、plaintext</p><h3 id="新增的属性和废除的属性"><a href="#新增的属性和废除的属性" class="headerlink" title="新增的属性和废除的属性"></a>新增的属性和废除的属性</h3><p>新增的属性： 1)表单相关的属性：autofocus、placeholder、form、required、autocomplete、min、max、multiple、pattern、step、formaction、formenctype、formmethod、formnovalidate、formtarget、novalidate 2)链接相关的属性：<br>为 a 与 area 元素增加了 media 属性<br>为 area 元素增加了 hreflang 和 rel 属性，主要目的是保持与 a 元素、link 元素的一致性<br>为 link 元素增加了新属性 sizes。该属性可以与 icon 元素结合使用（通过 rel 属性），该属性指定关联图标（icon 元素）的大小<br>为 base 元素增加了 target 属性，主要目的是保持与 a 元素的一致性<br>a 元素还有 download 属性 3)其他属性<br>为 ol 元素增加了 reversed 属性<br>为 meta 元素增加了 charset 属性<br>为 munu 元素增加了 type 与 label<br>为 style 元素增加了 scoped 属性<br>为 script 元素增加了 async 属性<br>为 html 元素增加了 manifest 属性<br>为 iframe 增加了 sandbox、seamless、srcdoc 属性</p><p>废除的属性：很多，略</p><h3 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h3><p>1)contentEditable<br>2)designMode: on 或 off<br>3)hidden 属性<br>4)spellcheck: 必须声明属性值为 true 或 false<br>5)tabindex</p><h2 id="html5-结构"><a href="#html5-结构" class="headerlink" title="html5 结构"></a>html5 结构</h2><h3 id="新增的主体结构元素"><a href="#新增的主体结构元素" class="headerlink" title="新增的主体结构元素"></a>新增的主体结构元素</h3><p>article 元素<br>article 元素代表文档、页面或应用程序中独立的、完整的可以被外部引用的内容。article 元素也可以用来表示插件，它的作用是使插件看起来好像内嵌在页面中一样。<br>section 元素<br>section 元素用于对网站或应用程序中页面上的内容进行分块。在 HTML5 中，article 元素可以看成是一种特殊种类的 section 元素，它比 section 元素更强调独立性。即 section 元素强调分段或分块，而 article 元素强调独立性。<br>section 元素使用禁忌：<br>1）不要将 section 元素用作设置样式的页面容器，那是 div 的工作；<br>2）如果 article 元素、aside 元素或 nav 元素更符合使用条件，不要使用 section 元素；<br>3）不要为没有标题的内容区块使用 section 元素。<br>nav 元素<br>nav 元素是一个可以用作页面导航的链接组<br>aside 元素<br>aside 元素用来表示当前页面或文章的附属信息部分。典型应用是侧边栏<br>time 元素和微格式<br>pubdate 属性</p><h3 id="新增的非主体结构元素"><a href="#新增的非主体结构元素" class="headerlink" title="新增的非主体结构元素"></a>新增的非主体结构元素</h3><p>header 元素<br>hgroup 元素<br>footer 元素<br>address 元素</p><h2 id="表单与文件"><a href="#表单与文件" class="headerlink" title="表单与文件"></a>表单与文件</h2><h3 id="新增元素和属性"><a href="#新增元素和属性" class="headerlink" title="新增元素和属性"></a>新增元素和属性</h3><p>新增属性<br>1)form 属性<br>当一个 input 元素被用于多个元素时，可以在 form 属性上将各表单 id 值以空格符分隔开来<br>2)formaction 属性<br>3)formmethod 属性<br>4)placeholder 属性<br>5)autofocus 属性<br>6)autocomplete 属性<br>autocomplete 属性规定输入字段是否应该启用自动完成功能。<br>自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。<br>注释：autocomplete 属性适用于 form，以及下面的 input 类型：text,search,url,telephone,email,password,datepickers,range 以及 color。</p><p>大幅度增加和改良的 input 种类<br>1)url 类型<br>2)email 类型<br>3)date 类型<br>4)time 类型<br>5)datetime 类型<br>6)datetime-local 类型<br>7)month 类型<br>8)week 类型<br>9)number 类型<br>10)range 类型<br>11)search 类型<br>12)tel 类型<br>13)color 类型</p><p>output 元素的追加</p><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><p>自动验证: required pattern min 和 max step<br>显示验证：checkValidity()方法<br>取消验证：<br>1)form 的 novalidate 属性<br>2)input 元素或 submit 元素的 formnovalidate 属性</p><h3 id="HTML5-表单验证插件"><a href="#HTML5-表单验证插件" class="headerlink" title="HTML5 表单验证插件"></a>HTML5 表单验证插件</h3><p><a href="http://www.zhangxinxu.com/wordpress/2012/12/jquery-html5validate-html5-form-validate-plugin/">html5Validate</a><br>自定义错误信息：setCustomValidity()方法</p><h3 id="增强的页面元素"><a href="#增强的页面元素" class="headerlink" title="增强的页面元素"></a>增强的页面元素</h3><p>新增的 figure 元素和 figcaption 元素<br>新增的 details 元素和 summary 元素<br>input 和 datalist</p><pre><code>&lt;input type=&quot;text&quot; list=&quot;province&quot;&gt;    &lt;datalist id=&quot;province&quot;&gt;        &lt;option value=&quot;北京&quot;&gt;&lt;/option&gt;        &lt;option value=&quot;上海&quot;&gt;&lt;/option&gt;        &lt;option value=&quot;浙江&quot;&gt;&lt;/option&gt;    &lt;/datalist&gt;</code></pre><p>新增的 mark 元素：用来在搜索结果中高亮关键词，也常用来文章引用后加的标示，与 em（）、strong 不同<br>新增的 progess 元素：表示任务的进度，如 Windows 系统中软件的安装、文件的复制等场景的进度。<br>新增的 meter 元素：表示某种计量，适用于温度、重量、金额等量化的表现。<br>新增的 menu 和 command 元素: menu 在 html4 被弃用，在 html5 中重定义，command 为 html5 新增，这两个标签目前基本没有浏览器支持<br>改良的 ol 列表：新增了 start 属性和 reversed 属性<br>改良的 dl 列表：html4 为定义列表(definition lists)，html5 为描述列表(description list)<br>加以严格限制的 cite 元素：定义引用。可使用该标签对参考文献的引用进行定义，比如书籍或杂志的标题。不用来表示作者，除非标题是作者<br>重新定义的 small 元素：The small element represents side comments such as small print.而非通用展示性元素，通常用在诸如免责声明、注意事项、法律法规、版权声明等声明文字中，不应该应用在页面主体内容中</p><h3 id="文件-API"><a href="#文件-API" class="headerlink" title="文件 API"></a>文件 API</h3><p>FileList 对象和 file 对象：files 返回一个 FileList 对象<br>Blob 对象：Blob 对象有两个属性，size 属性表示一个 Blob 对象的字节长度，type 属性表示 MIME 类型，file 对象也继承了这个对象<br>FilReader 接口：FileReader 接口有 4 个方法，其中 3 个用来读取文件，一个用来中断读取。无论读取成功还是失败，方法不返回读取结果，结果保存在 result 属性中。<br>4 个接口方法：readAsDataURL、readAsBinaryString、readAsText、abort<br>FileReader 接口事件：onabort、onerror、onloadstart、onprogress、onload、onloadend<br>FileSystem<br>在使用 FileSystem 对象的相关应用接口时，首先要获得对沙箱文件系统的访问权限。<br>通过这个接口，可以进行文件的新建、修改、删除。<br>//获取兼容文件请求对象<br>window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;<br>//请求获取浏览器沙箱文件系统<br>//window.webkitStorageInfo.requestQuota is deprecated<br>navigator.webkitPersistentStorage.requestQuota(5<em>1024</em>1024,function(bytes){<br>window.requestFileSystem(window.PERSISTENT,bytes,function(file_system){<br>console.log(file_system);<br>},function(){});<br>},function(e){<br>console.log(‘Error’,e);<br>});<br>目前只有 chrome 支持，需启动本地服务。安装 chrome 扩展程序 HTML5 FileSystem Explorer 进行查看验证。</p><h3 id="拖放-API"><a href="#拖放-API" class="headerlink" title="拖放 API"></a>拖放 API</h3><p>实现拖放的步骤<br>在 HTML5 中要实现拖放操作，至少要经过以下两个步骤： 1)将想要拖放的对象元素的 draggable 属性设为 true(draggable=”true”)。这样才能将元素进行拖放。另外 img 元素与 a 元素（必须指定 href）默认拖放。 2)编写与拖放有关的事件处理代码。拖放的几个事件：<br>dragstart：被拖放的元素<br>drag：被拖放的元素<br>dragenter：拖放过程中鼠标经过的元素<br>dragover：拖放过程中鼠标经过的元素<br>dragleave：拖放过程中鼠标经过的元素<br>drop：拖放的目标元素<br>dragend：拖放的目标元素</p><pre><code>&lt;h2&gt;drag示例&lt;/h2&gt;&lt;div id=&quot;dragme&quot; draggable=&quot;true&quot; style=&quot;width:200px;height:200px;border: 1px solid;&quot;&gt;请拖放&lt;/div&gt;&lt;div id=&quot;text&quot; style=&quot;width:200px;height:200px;border: 1px solid;&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt;    function init()&#123;        //自定义图标        var dragIcon = document.createElement(&#39;img&#39;);        dragIcon.src = &#39;http://www.iconpng.com/png/miui-fruitsugar/twelvekeydialer.png&#39;;        var source = document.getElementById(&#39;dragme&#39;);        var dest = document.getElementById(&#39;text&#39;);        //(1)拖放开始        source.addEventListener(&#39;dragstart&#39;,function(e)&#123;            //向dataTransfer对象追加数据            var dt = e.dataTransfer;            dt.effectAllowed = &#39;all&#39;;            dt.setDragImage(dragIcon,-10,-10);            dt.setData(&#39;text/plain&#39;,&#39;你好&#39;); //setData一般采用两种两种数据格式，用于文本数据存储的&quot;text/plain&quot;和用于URL信息存储的&quot;text/uri-list&quot;        &#125;,false);        //(2)拖放事件        dest.addEventListener(&#39;drop&#39;,function(e)&#123;            var dt = e.dataTransfer;            var text = dt.getData(&#39;text/plain&#39;);            dest.textContent += text;        &#125;,false);        //(3)不执行默认处理（拒绝被拖放）        dest.addEventListener(&#39;dragover&#39;,function(e)&#123;            e.preventDefault(); //必须，阻止默认行为        &#125;,false);    &#125;    init();&lt;/script&gt;</code></pre><h2 id="处理浏览器兼容性与-Modernizr-库"><a href="#处理浏览器兼容性与-Modernizr-库" class="headerlink" title="处理浏览器兼容性与 Modernizr 库"></a>处理浏览器兼容性与 Modernizr 库</h2><h3 id="处理浏览器兼容性"><a href="#处理浏览器兼容性" class="headerlink" title="处理浏览器兼容性"></a>处理浏览器兼容性</h3><p>一般较为常见的安全检测手段有 4 种： 1)检测全局对象，如 window、navigator 是否拥有指定的属性，如离线存储、地址位置信息等 2)通过创建新元素，检查元素对象上是否拥有指定的属性，如 Canvas 等。 3)通过创建新元素，检查元素对象上是否拥有指定的方法，同时调用该方法，并判断返回值，如检查 video 元素支持的视频格式 4)通过创建新元素，设置元素对象上的指定属性值，并判断设定后的值是否被保留。</p><h3 id="Modernizr-库概述"><a href="#Modernizr-库概述" class="headerlink" title="Modernizr 库概述"></a>Modernizr 库概述</h3><p>随着 HTML5 和 CSS3 加入越来越多的模块，检查各种浏览器是否支持这些模块，成了一大难题。Modernizr 就是用来解决这个问题的一个 JavaScript 库。<br>首先，从 modernizr.com 下载这个库。下载的时候，可以选择所需要的模块。然后，将它插入 HTML 页面的头部，放在 head 标签之中。</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html class=&quot;no-js&quot; lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;utf-8&quot;&gt;  &lt;script src=&quot;js/modernizr.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;/html&gt;</code></pre><h3 id="Modernizr-库-CSS-的新增-class"><a href="#Modernizr-库-CSS-的新增-class" class="headerlink" title="Modernizr 库 CSS 的新增 class"></a>Modernizr 库 CSS 的新增 class</h3><p>使用 Modernizr 以后，首先会把 html 元素的 class 替换掉。以 chrome 浏览器为例，新增的 class 大概是下面的样子。</p><pre><code>&lt;html class=&quot;js no-touch postmessage history multiplebgs boxshadow opacity cssanimations csscolumns cssgradients csstransforms csstransitions fontface localstorage sessionstorage svg inlinesvg blobbuilder blob bloburls download formdata&quot;&gt;</code></pre><p>IE 7 则是这样：</p><pre><code>&lt;html class=&quot;js no-touch postmessage no-history no-multiplebgs no-boxshadow no-opacity no-cssanimations no-csscolumns no-cssgradients no-csstransforms no-csstransitions fontface localstorage sessionstorage no-svg no-inlinesvg wf-loading no-blobbuilder no-blob no-bloburls no-download no-formdata&quot;&gt;</code></pre><p>然后，就可以针对不同的 CSS class，指定不同的样式。</p><pre><code>.button &#123;   background: #000;   opacity: 0.75;&#125;.no-opacity .button &#123;   background: #444;&#125;</code></pre><h3 id="Modernizr-库-JavaScript-侦测"><a href="#Modernizr-库-JavaScript-侦测" class="headerlink" title="Modernizr 库 JavaScript 侦测"></a>Modernizr 库 JavaScript 侦测</h3><p>除了提供新增的 CSS class，Modernizr 还提供 JavaScript 方法，用来侦测浏览器是否支持某个功能。</p><pre><code>Modernizr.cssgradients; //True in Chrome, False in IE7Modernizr.fontface; //True in Chrome, True in IE7Modernizr.geolocation; //True in Chrome, False in IE7if (Modernizr.canvas)&#123;    // 支持canvas&#125; else &#123;   // 不支持canvas&#125;if (Modernizr.touch)&#123;    // 支持触摸屏&#125; else &#123;   // 不支持触摸屏&#125;</code></pre><h3 id="Modernizr-库加载器"><a href="#Modernizr-库加载器" class="headerlink" title="Modernizr 库加载器"></a>Modernizr 库加载器</h3><p>Modernizr 允许根据 Javascript 侦测的不同结果，加载不同的脚本文件。</p><pre><code>Modernizr.load(&#123;  test :        Modernizr.localstorage,  yep  :        &#39;localStorage.js&#39;,  nope :        &#39;alt-storageSystem.js&#39;,  complete :    function () &#123; enableStorgeSaveUI();&#125;&#125;);</code></pre><p>Modernizr.load 方法用来加载脚本。它的属性如下：<br>test：用来测试浏览器是否支持某个属性。<br>yep：如果浏览器支持该属性，加载的脚本。<br>nope：如果浏览器不支持该属性，加载的脚本。<br>complete：加载完成后，运行的 JavaScript 代码。<br>可以指定在支持某个功能的情况，所要加载的 JavaScript 脚本和 CSS 样式。</p><pre><code>Modernizr.load(&#123;  test : Modernizr.touch,  yep :  [&#39;js/touch.js&#39;, &#39;css/touchStyles.css&#39;]&#125;);</code></pre><p>本章 Modernizr 部分来自阮一峰的 JavaScript 标准参考教程的<a href="http://javascript.ruanyifeng.com/library/modernizr.html">Modernizr</a></p><h2 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h2><h3 id="canvas-元素的基础知识"><a href="#canvas-元素的基础知识" class="headerlink" title="canvas 元素的基础知识"></a>canvas 元素的基础知识</h3><p>canvas：画布<br>检测 Canvas 强化版：</p><pre><code>function isSupportCanvas()&#123;    var cvs = document.createElement(&#39;canvas&#39;);    // 首先判断getContext方法是否存在    if(!cvs.getContext)&#123;        return false;    &#125;    // 判断是否含有fillText方法    return typeof cvs.getContext(&#39;2d&#39;).fillText == &#39;function&#39;;&#125;</code></pre><p>绘制矩形<br>用 canvas 绘制图形时，需要经过几道步骤： 1)取得 canvas 元素 2)取得上下文(context)：getContent 方法 3)设定绘图样式(style)：fillStyle、strokeStyle 4)指定线宽：lineWidth<br>5)context.fillRect(x,y,width,height)<br>context.strokeRect(x,y,width,height)<br>context.clearRect(x,y,width,height)<br>填充(fill)和绘制边框(stroke)</p><h3 id="使用路径"><a href="#使用路径" class="headerlink" title="使用路径"></a>使用路径</h3><p>绘制圆形<br>开始创建路径：beginPath 方法<br>创建图形的路径：context.arc(x,y,radius,startAngle,endAngle,anticlockwise)<br>路径创建完成后关闭路径: closePath 方法<br>设定绘制样式，调用绘制方法，绘制路径。</p><p>如果路径没有关闭：已经创建的路径会永远保留着，即使绘制完毕后，因此会进行重叠绘制，因此要对路径进行管理</p><p>moveTo(x,y)和 lineTo(x,y)</p><p>使用 bezierCurveTo 绘制曲线：context.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y);<br>二次样条曲线：context.quadraticCurveTo(in float cpx,in float cpy,in float x,in float y);</p><h3 id="绘制渐变图形"><a href="#绘制渐变图形" class="headerlink" title="绘制渐变图形"></a>绘制渐变图形</h3><p>绘制线性渐变：context.createLinearGradient(xStart,ySTart,xEnd,yEnd)<br>设定渐变颜色：context.addColorStop(offset,color)，渐变起点 offset 为 0,渐变结束点为 1。然后将 style 设定为 LinearGradient 对象。<br>绘制径向渐变：context.createRadialGradient(xStart,yStart,radiusStart,xEnd,yEnd,radiusEnd);</p><h3 id="绘制变形图形"><a href="#绘制变形图形" class="headerlink" title="绘制变形图形"></a>绘制变形图形</h3><p>坐标变换</p><ol><li>平移：context.translate(x,y);</li><li>缩放：context.scale(x,y);</li><li>旋转：context.rotate(angle);<br>坐标变换与路径的结合使用：另外写一个创建路径的函数，然后在坐标变换的同时调用该函数</li></ol><p>矩阵变换<br>context.transform(a,b,c,d,e,f);<br>这个方法与 css3 matrix 方法差不多 1)矩阵与 translate(x,y)：(1,0,0,1,x,y) 2)矩阵与 scale(x,y)：(x,0,0,y,0,0) 3)矩阵与 rotate(angle)：(Math.cos(angle _ Math.PI / 180),Math.sin(angle _ Math.PI / 180),-Math.cos(angle _ Math.PI / 180),Math.sin(angle _ Math.PI / 180),0,0) 4)矩阵与 skew(anglex,angley)：(1,Math.tan(angley _ Math.PI / 180),Math.tan(anglex _ Math.PI / 180),1,0,0)（css3 非 context 方法）</p><p>矩阵是一种高级应用，可以做一些没有提供的效果，比如镜像对称效果：((1-k<em>k) / (1+k</em>k), 2k / (1 + k<em>k), 2k / (1 + k</em>k), (k<em>k - 1) / (1+k</em>k), 0, 0)</p><p>可以用 setTransform(a,b,c,d,e,f)方法来重置变换矩阵</p><h3 id="图形组合"><a href="#图形组合" class="headerlink" title="图形组合"></a>图形组合</h3><p>context.globalCompositeOperation = type;<br>type 值：”source-over”,”destination-over”,”source-in”,”destination-in”,”souce-out”,”destination-out”,”source-atop”,”destination-atop”,”lighter”,”copy”,”xor”</p><h3 id="给图形绘制阴影"><a href="#给图形绘制阴影" class="headerlink" title="给图形绘制阴影"></a>给图形绘制阴影</h3><p>shadowOffsetX(),shadowOffsetY(),shadowColor(),shadowBlur()。如果想要后面的图形不再有阴影，只要把 shadowColor 设定为 rgba(0,0,0,0)就可以了。</p><h3 id="使用图像"><a href="#使用图像" class="headerlink" title="使用图像"></a>使用图像</h3><p>绘制图像</p><pre><code>context.drawImage(image,x,y)context.drawImage(image,x,y,w,h)context.drawImage(image,sx,sy,sw,sh,dx,dy,dw,dh)var image = new Image();image.src = &quot;img/17.jpg&quot;;image.onload = function()&#123;&#125;;</code></pre><p>图像平铺<br>一是使用 drawImage 方法循环处理，二是使用 context.createPattern(image,type);<br>type: no-repeat,repeat-x,repeat-y,repeat<br>使用 createPattern 方法创建填充样式，然后将该样式指定给图形上下文对象的 fillStyle 属性，最后再填充画布。</p><p>图像裁剪<br>使用图形上下文不带参数的 clip 方法来实现 canvas 元素的图像裁剪功能。该方法使用路径来对 canvas 画布设置一个裁剪区域。因此先创建路径，设置裁剪区域，再绘制图像。<br>如何取消裁剪区域：使用绘制状态的保存和恢复功能。save 方法和 restore 方法。</p><p>像素处理<br>反显：</p><pre><code>var imagedata;var i;var n = imagedata.data.length;context.drawImage(image,0,0);imagedata = context.getImageData(0,0,image.width,image.height);for( i = 0; i &lt; n; i += 4)&#123;    imagedata.data[i] = 255 - imagedata.data[i];    imagedata.data[i+1] = 255 - imagedata.data[i+1];    imagedata.data[i+2] = 255 - imagedata.data[i+2];&#125;context.putImageData(imagedata,0,0);</code></pre><h3 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h3><p>fillText(text,x,y,[maxWidth]);<br>strokeText(text,x,y,[maxWidth]);<br>font 属性、fontAlign 属性、fontBaseline 属性<br>context.measureText(text);</p><h3 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h3><p>保存与恢复状态<br>图形上下文对象的当前状态的保存与恢复可以应用在以下场合： 1)图像或图形变形 2)图像裁剪 3)改变图形上下文以下属性时：<br>fillStyle<br>font<br>globalAlpha<br>globalCompositionOperation<br>lineCap<br>lineJoin<br>lineWidth<br>miterLimit<br>shadowBlur<br>shadowColor<br>shadowOffsetX<br>shadowOffsetY<br>strokeStyle<br>textAlign<br>textBaseline<br>clipping 区域<br>转换矩阵等<br>最后保存的最先还原</p><p>保存文件<br>canvas API 保存文件的原理实际上是把当前的绘画状态输出到一个 data URL 地址所指向的数据中的过程。<br>canvas.toDataURL(type);<br>type 表示输出数据的 MIME 类型</p><p>简单动画的制作 1)预先编写好用来绘图的函数，在改函数中先用 clearRect 方法将画布整体或局部擦除 2)使用 setInterval 方法设置动画的间隔时间</p><p>canvas 动画学习参考： 1.<a href="https://www.pureweber.com/article/html5-cavas-animation/">HTML5-Canvas 动画原理</a> 2.<a href="http://taobaofed.org/blog/2016/02/22/canvas-performance/">Canvas 最佳实践（性能篇）</a></p><h3 id="其他相关"><a href="#其他相关" class="headerlink" title="其他相关"></a>其他相关</h3><p>SVG<br>SVG 是 Scalable Vecotor Graphics 的缩写，即可缩放矢量图形，是基于 XML(可扩展标记语言)用来描述二维矢量图形的一种图形格式。<br>SVG 有如下优点： 1.基于 XML，继承了 XML 的扩平台和可扩展的特性 2.采用文本描述图形对象，利用搜索引擎通过文本内容搜索图片信息 3.良好的交互和动态特性，可以在其中嵌入动画，通过脚本收缩、旋转调整图形 4.对 DOM 支持完整，可以通过脚本获取元素，监听元素事件 5.体积小下载快，在互联网上传输有明显优势<br>WebGL</p><h2 id="媒体播放"><a href="#媒体播放" class="headerlink" title="媒体播放"></a>媒体播放</h2><pre><code>&lt;video id=&quot;player&quot; width=&quot;600&quot; height=&quot;450&quot; controls preload&gt;您的浏览器不支持HTML5    &lt;source src=&quot;./videos/echo-hereweare.mp4&quot;&gt;&lt;/source&gt;  &lt;!-- 提供默认的播放视频  --&gt;&lt;/video&gt;</code></pre><p>1)video 播放相关 API</p><p>只读属性：<br>video.duration：整个媒体文件的播放时长，单位 s<br>video.paused ：如果媒体文件被暂停，则返回 true；如果还没开始播放，默认返回 true<br>video.ended ：如果媒体文件播放完毕，则返回 true</p><p>可写属性：<br>video.currentTime：以 s 为单位返回从开始播放到现在所用的时间。在播放过程中，设置 currentTime 来进行搜索，并定位到媒体文件的特定位置<br>video.volume ：在 0.0 到 1.0 之间设置音频音量的相对值，或者查询当前音量相对值<br>video.muted ：检测当前是否为静音，是则为 true；为文件设置静音或消除静音</p><p>控制函数：<br>video.play() ：播放视频文件<br>video.pause() ：暂停处于播放状态的视频文件<br>video.canPlayType() ：测试 video 元素是否支持给定 MIME 类型的文件</p><p>监听事件：<br>ontimeupdate ：当 video.currentTime 发生改变时触发该事件</p><p>2)全屏控制 API<br>说明：这里只给出 webkit 的全屏 API，本代码没有做兼容性处理，主要应用了 webkit 的一些高级 API 和 chrome 的伪元素，所以前面请大家用 chrome 打开演示地址。</p><p>video.webkitRequestFullScreen()：全屏显示<br>document.webkitCancelFullScreen()：退出全屏<br>document.webkitIsFullScreen：如果当前处于全屏状态，则返回 true,否则返回 false<br>document.addEventListener(‘webkitfullscreenchange’, handler)：当在全屏和非全屏状态切换时，触发该事件</p><p>3)本地文件读取 API<br>说明：我的这个视频播放器支持从本地添加视频文件播放，支持的格式在 webkit 浏览器支持的 html5 视频播放标准范围内。本地文件读取 API 是 html5 的新标准。</p><p>window.URL.createObjectURL(file)：file 为文件对象，该函数返回指向文件的对象 URL，通过该 URL 可以访问文件。</p><p>video.src = window.URL.createObjectURL(file);</p><p>音视频的实时通信：WebRTC 技术，该技术主要用于支持浏览器进行实时的语音对话和视频通信。</p><p>视频播放学习参考： 1.<a href="https://segmentfault.com/a/1190000000380064">打造自己的 html5 视频播放器</a> 2.<a href="http://taobaofed.org/blog/2016/05/23/video-player/">视频播放的那些事</a></p><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><h3 id="Web-Storage"><a href="#Web-Storage" class="headerlink" title="Web Storage"></a>Web Storage</h3><p>cookie 会带来什么问题：<br>1)cookie 大小限制在 4k 左右，不适合存业务数据<br>2)cookie 每次随 HTTP 事务一起发送，浪费带宽<br>localstorage 可以说是对 cookie 的优化，使用它可以方便在客户端存储数据，并且不会随着 HTTP 传输，但也不是没有问题：</p><p>1)localstorage 大小限制在 5m 左右，各个浏览器不一致<br>2)localstorage 在隐私模式下不可读取<br>3)localstorage 本质是在读写文件，数据多的话会比较卡（firefox 会一次性将数据导入内存，想想就觉得吓人啊）<br>4)localstorage 不能被爬虫爬取，不要用它完全取代 URL 传参</p><p>sessionStorage：<br>保存数据：sessionStorage.setItem(key,value);<br>读取数据：sessionStorege.getItem(key);<br>localStorage:<br>保存数据：localStorage.setItem(key,value);<br>读取数据：localStorege.getItem(key);<br>localStorage.length<br>localStorage.key(index)<br>localStorage.clear()</p><h3 id="本地数据库"><a href="#本地数据库" class="headerlink" title="本地数据库"></a>本地数据库</h3><h3 id="SQLLite"><a href="#SQLLite" class="headerlink" title="SQLLite"></a>SQLLite</h3><p>要使用 SQLLite 数据库，有两个必要的步骤： 1)创建访问数据库的对象 2)使用事务处理<br>var db = openDatabase(‘mydb’,’1.0’,’Test DB’,2 * 1024 *1024);<br>db.transaction(function(tx){<br>tx.executeSql(‘CREATE TABLE IF EXISTS LOGS (id unique Log)’);<br>});<br>transaction 方法中的处理 1)追加数据<br>tx.executeSql(‘INSERT INFO MsgData VALUES(?,?,?)’,[name,message,time],function(tx,rs){},function(tx,error)); 2)创建数据表<br>tx.executeSql(‘CREATE TABLE IF NOT EXISTS MsgData(name TEXT,message TEXT,tiem INTEGER)’,[]); 3)获取全部数据<br>tx.ececuteSql(‘SELECT * FROM MsgData’,[],…);</p><h3 id="indexedDB"><a href="#indexedDB" class="headerlink" title="indexedDB"></a>indexedDB</h3><p>indexedDb 是 HTML5 推出的一种轻量级的 NoSQL 数据库，即常说的非关系型数据库。比起传统的关系型数据库，NoSQL 数据库具有易扩展、读写快速、成本低廉等特点。HTML5 的 IndexedDB 还包含了常见的数据库构造，如事务、索引、游标等，在 API 的使用上分为同步和异步两种形态。<br>// 创建一个数据库<br>var request = indexedDB.open(‘Html5IndexedDB’,2);<br>request.onerror = function(e){<br>console.log(e);<br>};<br>//监听事务事件<br>request.onupgradeneeded = function(e){<br>// 获取数据库对象<br>var db = e.target.result;<br>// 创建对象存储空间存放用户信息<br>objectStore = db.createObjectStore(‘users’,{keyPath:”html5”});<br>// 创建索引来通过 name 搜索客户<br>objectStore.createIndex(‘name’,’name’,{unique:false});<br>objectStore.createIndex(‘id’,’id’,{unique:true});<br>objectStore.add({html5:’1’,name:’小王’,sex:’女’,id:’3323’,age:23});<br>}</p><h2 id="离线应用程序"><a href="#离线应用程序" class="headerlink" title="离线应用程序"></a>离线应用程序</h2><p>离线 Web 应用程序是指：当客户端本地与 Web 应用程序的服务器没有建立连接时，也能正常在客户端使用该 Web 应用程序进行有关操作。</p><h3 id="本地缓存和浏览器缓存的区别："><a href="#本地缓存和浏览器缓存的区别：" class="headerlink" title="本地缓存和浏览器缓存的区别："></a>本地缓存和浏览器缓存的区别：</h3><p>1)本地缓存为整个 web 应用程序服务的，而浏览器的网页缓存只服务于单个网页。任何网页都具有网页缓存。而本地缓存至缓存那些指定的缓存的页面。</p><p>2)网页缓存不安全不可靠，因为我们不知道在网站中到底缓存了哪些网页，以及缓存了网页上的哪些资源。而本地缓存可靠，我们可以控制对哪些内容进行缓存，不对哪些内容进行缓存，开发人员还可以利用编程的手段来控制缓存的更新，利用缓存对象的各种属性、状态和事件来开发出更加强大的离线应用程序。</p><p>3)（有些）浏览器会主动保存自己的缓存文件以加快网站加载速度。但是要实现浏览器缓存必须要满足一个前提，那就是网络必须要保持连接。如果网络没有连接，即使浏览器启用了对一个站点的缓存，依然无法打开这个站点。只会收到一条错误信息。而使用离线 web 应用，我们可以主动告诉浏览器应该从网站服务器中获取或缓存哪些文件，并且在网络离线状态下依然能够访问这个网站。</p><h3 id="实现-HTML5-应用程序缓存"><a href="#实现-HTML5-应用程序缓存" class="headerlink" title="实现 HTML5 应用程序缓存"></a>实现 HTML5 应用程序缓存</h3><p>实现 HTML5 应用程序缓存非常简单，只需三步，并且不需要任何 API。只需要告诉浏览器需要离线缓存的文件，并对服务器和网页做一些简单的设置即可实现。 1)创建一个 cache.manifest 文件，并确保文件具有正确的内容。 2)在服务器上设置内容类型。 3)所有的 HTML 文件都指向 cache.manifest。</p><p>具体实现：<br>首先我们建立一个名为 cache.manifest 的文件，Windows 平台下用记事本即可（也可用其他的 IDE）。文件内容如下：</p><pre><code>CACHE MANIFEST#version1CACHE:index.html404.htmlfavicon.icorobots.txthumans.txtapple-touch-icon.pngcss/normalize.min.csscss/main.csscss/bootmetro-icons.min.cssimg/pho-cat.jpgimg/pho-huangshan.jpgFALLBACK:online.js local.jsNETWORK:*</code></pre><p>注意事项： 1)第一行必须是”CACHE DMANIFEST”文字，以把本文件的作用告知浏览器，即对本地缓存中的资源文件进行具体设置。 2)在 manifest 文件中，可以加上注释来进行一些必要说明或解释。注释行以”#”文字开头。 3)在 CACHE 之后的部分为列出我们需要缓存的文件。 4)在 FALLBACK 之后的部分每一行中指定两个资源文件，第一个资源文件为能够在线访问时使用的资源文件，第二个资源文件为不能在线访问时使用的备用资源文件。 5)在 NETWORK 之后可以指定在线白名单，即列出我们不希望离线存储的文件，因为通常它们的内容需要互联网访问才有意义。另外，在此部分我们可以使用快捷方式：通配符*。这将告诉浏览器，应用服务器中获取没有在显示部分中提到的任何文件或 URL。</p><p>服务器上设置内容类型。<br>真正运行或测试离线 web 应用程序的时候，需要对服务器进行配置，让服务器支持 text/cache-manifest 这个 MIME 类型（在 h5 中规定 manifest 文件的 MIME 类型是 text/cache-manifest）。例如对 Apache 服务器进行配置的时候，需要找到｛apache_home｝/conf/mime.type 这个文件(.htaccess)，并在文件最后添加如下所示代码：</p><pre><code>text/cache-manifest .manifest</code></pre><p>在微软的 IIS 服务器中的步骤如下所示：<br>(1).右键选择默认网站或需要添加类型的网站，弹出属性对话框<br>(2).选择”http 头”标签<br>(3).在 MIME 映射下，单击文件类型按钮<br>(4).在打开的 MIME 类型对话框中单击新建按钮<br>(5).在关联扩展名文本中输入”manifest”，在内容类型文本框中输入”text/cache-manifest”,然后点击确定按钮。</p><p>设置 HTML 文件的指向。<br>完成这一步后，就完成了 web 离线缓存的所有步骤。由于浏览的文件内容都没有更改且存储在本地，因此现在网页的打开速度会更快（即使是在线状态也如此）。</p><p>注意事项： 1)网站的每一个 html 页面都必须设置 html 元素的 manifest 属性。 2)在你的整个网站应用中，只能有一个 cache.manifest 文件（建议放在网站根目录下）； 3)部分浏览器（如 IE8-）不支持 HTML5 离线缓存；<br>4)“#” 开头的注释行可满足其他用途。应用的缓存会在其 manifest 文件更改时被更新。如果您编辑了一幅图片，或者修改了一个 JavaScript 函数，这些改变都不会被重新缓存。更新注释行中的日期和版本号是一种使浏览器重新缓存文件的办法。</p><h3 id="applicationCache-的两个方法"><a href="#applicationCache-的两个方法" class="headerlink" title="applicationCache 的两个方法"></a>applicationCache 的两个方法</h3><p>applicationCache 的 update 方法<br>显式调用了更新缓存算法以检测是否有最新版本的的应用程序。这导致浏览器检测同一个清单文件（并触发相同的事件），这和第一次载入应用程序时的效果是一样的。<br>applicationCache 的 swapCache 方法：<br>它告诉浏览器可以弃用老缓存，所有的请求都从新缓存中获取。注意，这并不会重新载入应用程序：所有已经载入的 html 文件、图片、脚本等资源都不会改变。但是，之后的请求将从最新的缓存中获取。这会导致“版本错乱”的问题，因此一般不推荐使用，除非应用程序设计得很好，确保这样的方式没有问题。只有 ApplicationCache.UPDATEREADY 和 ApplicationCache.ABSOLETE 时调用 swapCache()才有意义（当状态 OBSOLETE 时，调用它可以立即弃用废弃的缓存，让之后所有的请求都通过网络获取）。如果状态属性是其他数值的时候调用 swapCache()方法，它就会抛出异常。</p><pre><code>function init()&#123;    setInterval(function()&#123;        //手工检查是否更新        applicationCache.update();    &#125;,5000);    applicationCache.addEventListener(&#39;updateready&#39;,function()&#123;        if( confirm(&quot;本地缓存已被更新，需要刷新页面来获取应用程序最新版本，是否刷新？&quot;) )&#123;            // 手工更新本地缓存            applicationCache.swapCache();            // 重置画面            location.reload();        &#125;    &#125;,true);&#125;init();</code></pre><h3 id="applicationCache-对象的事件"><a href="#applicationCache-对象的事件" class="headerlink" title="applicationCache 对象的事件"></a>applicationCache 对象的事件</h3><p>1.checking 事件<br>2.downloading 事件<br>3.progress 事件<br>4.cached 事件<br>5.noupdate 事件<br>6.updateready 事件<br>7.obsolete 事件<br>8.error 事件</p><p>(1).没有可用更新<br>如果应用程序已经缓存并且清单文件没有动，则浏览器会触发 noupdate 事件<br>(2).有可用更新<br>如果应用程序已经缓存并且清单元件有改动，则浏览器会触发 downloading 事件并开始下载和缓存清单文件中列举的所有资源。随着下载过程的进行浏览器还会触发”progress”事件，在下载完成后，会触发”updateready”事件。<br>(3).首次载入新的应用程序<br>如果还未缓存应用程序，如上所述 downloading，progress 事件都会触发。但是，当下载完成后，浏览器会触发”cached”事件而不是 updateready 事件<br>(4).浏览器处于离线状态<br>如果浏览器处于离线状态，它无法检查清单文件，同时它会触发“error”事件。如果一个未缓存的应用程序引用了不存的清单文件，浏览器也会触发该事件<br>(5).清单文件不存在<br>如果浏览器处理在线状态，应用程序也已经缓存起来，但是清单文件不存在，浏览器会触发 obsolete 事件，并将该应用程序从缓存中移除。</p><h3 id="如何判断在线还是离线状态？"><a href="#如何判断在线还是离线状态？" class="headerlink" title="如何判断在线还是离线状态？"></a>如何判断在线还是离线状态？</h3><p>navigator.onLine 是 HTML5 定义用来检测设备是在线还是离线。对应的值为 false 或 true。<br>HTML5 定义了 online 和 offline 事件用于监听网络状态变化。</p><pre><code>window.addEventListener(&#39;online&#39;, callback); // 离线到上线window.addEventListener(&#39;offline&#39;, callback); // 上线到离线</code></pre><h2 id="通信-API"><a href="#通信-API" class="headerlink" title="通信 API"></a>通信 API</h2><h3 id="跨文档消息传输"><a href="#跨文档消息传输" class="headerlink" title="跨文档消息传输"></a>跨文档消息传输</h3><p>跨文档消息传递（Cross Document Messaging），有时候简称 XDM。指的是来自不同域的页面间传递消息。比如：abc.com 与内联框架中的 efg.com 进行通信。</p><p>XDM 的核心是 postMessage()方法，这是 HTML5 规范的 api，意思就是向另一个地方发送消息，除了 XDM 中有 postMessage()方法，在 HTML5 规范中，其他地方也有相同的方法名，比如 web worker 中、WebSockets 以及 Server-SentEvents 中。但目的都是向另一个地方发送数据，只不过在 XDM 中，另一个地方指的是页面中的 iframe 框架，或者由当前页面弹出的窗口。</p><p>postMessage()方法</p><p>postMessage()方法接收两个参数：postMessage(message, targetOrigin):</p><p>message：传递的消息，可以是任意的数据类型，不过为了保证兼容性，最好只传递字符串（部分浏览器智能处理字符串），对于对象的数据，可以先用 JSON.stingify()方法转成字符串，然后再通过 JSON.parse()方法转成对象。在低版本的浏览器中，可以使用 json2.js 实现相同的效果。<br>targetOrigin：消息接收方的域（URL 地址）。postMessage 会将 message 发送到该窗口，如果不指定目标源，可以设置成*，表示消息发送到任意窗口。第二个参数对保障安全通信非常重要，可以防止浏览器把消息传递到不安全的地方。</p><p>postMessage()方法实践</p><p>本地建立一个 html 文件：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;postMessage&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;text&quot; id=&quot;message&quot;&gt;&lt;button&gt;发送消息&lt;/button&gt;&lt;iframe src=&quot;http://localhost:63342/post%20text/iframe.html&quot; id=&quot;iframe1&quot;&gt;&lt;/iframe&gt;&lt;script&gt;    window.onload = function()&#123;        var message = document.getElementById(&quot;message&quot;),                btn = document.getElementsByTagName(&quot;button&quot;)[0],                iframe = document.getElementById(&quot;iframe1&quot;);        var iWin = iframe.contentWindow;        btn.onclick = function()&#123;            iWin.postMessage(message.value,&quot;http://localhost:63342/post%20text/test.html&quot;);        &#125;    &#125;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>iframe 页面</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head lang=&quot;en&quot;&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script&gt;        window.onmessage = function(e)&#123;            console.log(e);            document.body.innerHTML = &quot;&quot;;            document.body.innerHTML = e.data;        &#125;    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>这样，当我在文本框中输入内容并且点击发送的时候，框架就可以获取到我发送的信息，从而可以进行相应的操作。</p><p>onmessage 事件<br>当接收到 XDM 消息时，触发 window 对象的 onmessage 事件，这个事件是以异步形式触发的。onmessage 事件有三个重要的参数：data，origin，source。</p><p>data：postMessage 传递进来的值<br>origin：发送消息的文档所在的域<br>source：发送消息文档的 window 对象的代理，如果是来自同一个域，则该对象就是 window，可以使用其所有方法，如果是不同的域，则该 window 是不能使用的，除了调用 postMessage()方法之外。<br>接收到消息后，验证消息的来源是很重要的，就像给 postMessage()方法指定第二个参数，以确保浏览器不会把消息发送给其他框架一样。判断其 origin 即可判断来源：</p><pre><code>//iframe页面window.onmessage = function(e)&#123;    if(e.origin === &#39;http://sandbox.runjs.cn&#39;)&#123;        //处理数据        //接收相应        e.source.postMessage(&quot;已经收到信息！&quot;, &quot;http://localhost:63342/post%20text/test.html&quot;&quot;);    &#125;&#125;</code></pre><p>浏览器兼容性<br>就像 localStorage 一样，IE8 也支持。</p><p>总结</p><p>postMessage 方法进行跨文档信息传递简单方便<br>在不同域时，event.source 中的 window 对象为代理 window 对象，只能调用 postMessage()方法<br>onmessage 事件是 window 对象上得事件，在使用时注意 IE 的事件处理程序，attachEvent</p><p>原文：<a href="http://youthol.top/2016/01/19/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%93%8D%E4%BD%9Ciframe-postmessage%E8%B7%A8%E6%96%87%E6%A1%A3%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92/">操作 iframe–postMessage 跨文档消息传递</a></p><h3 id="XMLHttpRequest-Level-2"><a href="#XMLHttpRequest-Level-2" class="headerlink" title="XMLHttpRequest Level 2"></a>XMLHttpRequest Level 2</h3><p>XMLHttpRequest Level 2 是早期 XMLHttpRquest 的升级版，最初的 XMLHttpRquest 被设计为仅限于同源通信，不能跨域进行数据传输，导致后续演变出 JSONP 方法。XMLHttpRquest Level 2 对同源策略进行了修改，允许跨域的数据请求，同时还添加了 progress 事件用于监听请求进度，返回进度信息。XMLHttpRquest Level 2 要求所有跨域的请求都要使用 HTTP 协议中的 origin 信息头，同时数据接收服务器需要具备 CORS 策略，各种服务器的 CORS 策略设置可以参考网站<a href="http://enable-cors.org/">http://enable-cors.org/</a><br>兼容性：IE10+<br>客户端：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>获取<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>    <span class="token string">'click'</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'浏览器不支持 html5 XMLHttpRequst Level 2 的跨域请求支持'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        xhr<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>          document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:8080'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token boolean">false</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端(nodejs)：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>http  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:63342'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    req<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> data<span class="token operator">:</span> <span class="token string">'Hello World!'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'listing on http://localhost:8080'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>XMLHttpRequest Level 2 对远端请求的服务器有一定的要求，需要在服务器端返回的 HTTP 信息头中指明支持的域名。如果想对所有请求都通过处理，可以设置为”*“号。如果要指定多个，一般会认为使用以下写法：</p><pre><code>res.setHeader(&#39;Access-Control-Allow-Origin&#39;,&#39;http://localhost,http://test.com&#39;); //域名之间使用逗号res.setHeader(&#39;Access-Control-Allow-Origin&#39;,&#39;http://localhost http://test.com&#39;); //域名之间使用空格</code></pre><p>非常不幸的是，浏览器无法识别这两种返回头，推荐先对请求域名做判断，如果符合业务要求，再设置对于域名的 Access-Control-Allow-Origin 头信息。</p><h3 id="Web-Socket-通信"><a href="#Web-Socket-通信" class="headerlink" title="Web Socket 通信"></a>Web Socket 通信</h3><p>在讲 Websocket 之前，先讲讲 long poll 和 ajax 轮询的原理。<br>首先是 ajax 轮询，ajax 轮询的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息。<br>long poll 其实原理跟 ajax 轮询差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回 Response 给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。<br>从上面可以看出其实这两种方式，都是在不断地建立 HTTP 连接，然后等待服务端处理，可以体现 HTTP 协议的另外一个特点，被动性。<br>何为被动性呢，其实就是，服务端不能主动联系客户端，只能有客户端发起。<br>通过上面这个例子，我们可以看出，这两种方式都不是最好的方式，需要很多资源。<br>一种需要更快的速度，一种需要更多的’电话’。这两种都会导致’电话’的需求越来越高。<br>哦对了，忘记说了 HTTP 还是一个无状态协议。</p><p>所以在这种情况下出现了，Websocket 出现了。<br>他解决了 HTTP 的这几个难题。<br>首先，被动性，当服务器完成协议升级后（HTTP-&gt;Websocket），服务端就可以主动推送信息给客户端啦。<br>就变成了这样，只需要经过一次 HTTP 请求，就可以做到源源不断的信息传送了。（在程序设计中，这种设计叫做回调，即：你有信息了再来通知我，而不是我傻乎乎的每次跑来问你）<br>这样的协议解决了上面同步有延迟，而且还非常消耗资源的这种情况。<br>同时，在传统的方式上，要不断的建立，关闭 HTTP 协议，由于 HTTP 是非状态性的，每次都要重新传输 identity info（鉴别信息），来告诉服务端你是谁。<br>同时由客户主动询问，转换为服务器（推送）有信息的时候就发送（当然客户端还是等主动发送信息过来的。。），没有信息的时候就交给接线员（Nginx），不需要占用本身速度就慢的客服（Handler）了<br><a href="https://www.zhihu.com/question/20215561">知乎参考</a><br><a href="http://javascript.ruanyifeng.com/htmlapi/websocket.html">进一步学习</a></p><h3 id="Socket-IO-通信框架"><a href="#Socket-IO-通信框架" class="headerlink" title="Socket.IO 通信框架"></a>Socket.IO 通信框架</h3><p>Socket.IO 是 Guillermo Rauch 开发的基于 Node.js 的应用项目，以实现跨浏览器和跨平台应用为目标。Socket.IO 针对不同的浏览器会做自动优雅降级，选择当前浏览器最合适的实现方式，如在一些不支持 HTML5 WebSocket 的浏览器上，会使用长连接的 Ajax 技术。同时 Socket.IO 提供了一套平台统一的应用程序接口，开发者在使用时完全不用考虑浏览器的兼容问题。</p><h2 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h2><p>JavaScript 语言采用的是单线程模型，也就是说，所有任务排成一个队列，一次只能做一件事。随着电脑计算能力的增强，尤其是多核 CPU 的出现，这一点带来很大的不便，无法充分发挥 JavaScript 的潜力。</p><p>Web Worker 的目的，就是为 JavaScript 创造多线程环境，允许主线程将一些任务分配给子线程。在主线程运行的同时，子线程在后台运行，两者互不干扰。等到子线程完成计算任务，再把结果返回给主线程。因此，每一个子线程就好像一个“工人”（worker），默默地完成自己的工作。这样做的好处是，一些高计算量或高延迟的工作，被 worker 线程负担了，所以主进程（通常是 UI 进程）就会很流畅，不会被阻塞或拖慢。<br>在现实开发中 Web Worker 常常被用于处理大型密集型数据任务，可以有效的避免阻塞主 UI 线程渲染交互。</p><p>Worker 线程分成好几种。 1)普通的 Worker：只能与创造它们的主进程通信。<br>2)Shared Worker：能被所有同源的进程获取（比如来自不同的浏览器窗口、iframe 窗口和其他 Shared worker），它们必须通过一个端口通信。<br>3)ServiceWorker：实际上是一个在网络应用与浏览器或网络层之间的代理层。它可以拦截网络请求，使得离线访问成为可能。</p><p>Web Worker 有以下几个特点： 1)同域限制。子线程加载的脚本文件，必须与主线程的脚本文件在同一个域。<br>2)DOM 限制。子线程所在的全局对象，与主进程不一样，它无法读取网页的 DOM 对象，即 document、window、parent 这些对象，子线程都无法得到。（但是，navigator 对象和 location 对象可以获得。） 3)脚本限制。子线程无法读取网页的全局变量和函数，也不能执行 alert 和 confirm 方法，不过可以执行 setInterval 和 setTimeout，以及使用 XMLHttpRequest 对象发出 AJAX 请求。 4)文件限制。子线程无法读取本地文件，即子线程无法打开本机的文件系统（file://），它所加载的脚本，必须来自网络。</p><p>注意线程嵌套在 chrome 中有 bug</p><p>线程中可用的变量、函数与类：<br>self：self 关键词用来表示本线程范围内的作用域<br>postMessage(message)：向创建线程的源窗口发送信息<br>worker.postMessage()：向子线程中提交信息<br>onmessage：获取接收信息的事件句柄<br>importScripts(urls)：导入其他 JavaScript 脚本文件 importScript(‘script1.js’,’scripts\script2.js’,’scripts\script3.js’);<br>navigator 对象<br>sessionStorage、localStorage<br>XMLHttpRequest<br>Web Workers<br>setTimeout()/setInterval()<br>close：可用结束本线程<br>eval()、isNaN()、escape()等，可以使用所有 JavaScript 核心函数<br>object：可以创建和使用本地对象<br>WebSockets：可以使用 WebSockets API 来向服务器发送和接收信息</p><h2 id="获取地理位置"><a href="#获取地理位置" class="headerlink" title="获取地理位置"></a>获取地理位置</h2><h3 id="有哪些定位数据"><a href="#有哪些定位数据" class="headerlink" title="有哪些定位数据"></a>有哪些定位数据</h3><p>1.IP 地址<br>2.GPS(Global Positioning System)<br>3.RFID(Radio Frequency IDentification，即射频识别)<br>4.Wi-Fi 地址<br>5.GSM 或 CDMA 手机的 ID 6.用户自定义的地理位置数据</p><h3 id="Geolocation-API-的基本知识"><a href="#Geolocation-API-的基本知识" class="headerlink" title="Geolocation API 的基本知识"></a>Geolocation API 的基本知识</h3><p>获取当前的地理位置</p><pre><code>navigator.geolocation.getCurrentPosition(success,error,options);</code></pre><p>第一个参数为获取当前地理位置成功时所执行的回调函数，第二个参数为获取失败时所执行的回调函数，第三个参数为一些可选属性的列表。<br>若成功，则 getCurrentPosition()方法返回对象。始终会返回 latitude、longitude 以及 accuracy 属性。如果可用，则会返回其他下面的属性。<br>coords.latitude 十进制数的纬度<br>coords.longitude 十进制数的经度<br>coords.accuracy 位置精度<br>coords.altitude 海拔，海平面以上以米计<br>coords.altitudeAccuracy 位置的海拔精度<br>coords.heading 方向，从正北开始以度计<br>coords.speed 速度，以米/每秒计<br>timestamp 响应的日期/时间<br>获取当前地理位置失败<br>该回调函数使用一个 error 对象作为参数，这个参数具有以下两个属性：<br>code 属性：<br>用户拒绝了位置服务（属性值为 1）<br>获取不到位置信息（属性值为 2）<br>获取信息超时错误（属性值为 3）<br>message 属性<br>message 属性为一个字符串，在该字符串中包含了错误信息</p><p>getCurrentPosition 方法中的第三个参数可以省略，它是一些可先属性的列表：<br>enableHighAccuracy：是否要求高精度的地理位置信息。在很多设备上设置了都没用，多数情况下把该属性设为默认。<br>timeout：超时设置<br>maximumAge：对地理位置信息进行缓存的有效时间。</p><p>持续监视当前地理位置信息</p><pre><code>watchCurrentPosition(onSuccess,onError,options);</code></pre><p>停止获取用户的当前地理位置信息<br>clearWatch(watchId)<br>使用方法和 clearTimeout 差不多</p><h2 id="微数据"><a href="#微数据" class="headerlink" title="微数据"></a>微数据</h2><p>HTML5 微数据规范是一种标记内容以描述特定类型的信息，例如评论、人物信息或事件。每种信息都描述特定类型的项，例如人物、事件或评论。例如，事件可以包含 venue、starting time、name 和 category 属性。<br>微数据使用 HTML 标记（常为 span 或 div）中的简单属性为项和属性指定简要的描述性名称。<br><a href="http://www.zhangxinxu.com/wordpress/2011/12/html5%E6%89%A9%E5%B1%95-%E5%BE%AE%E6%95%B0%E6%8D%AE-%E4%B8%B0%E5%AF%8C%E7%BD%91%E9%A1%B5%E6%91%98%E8%A6%81/">HTML5 扩展之微数据与丰富网页摘要</a></p><h2 id="History-API"><a href="#History-API" class="headerlink" title="History API"></a>History API</h2><p>HTML5 中给 History 新增了两个方法，允许开发者逐条地添加和修改历史记录，方法如下：<br>pushState：在历史堆栈的顶部添加一条记录，history.pushState({}, “页面标题”, “xxx.html”);<br>replaceState：更改当前页面的历史记录，参数同 pushState 方法<br>在 HTML5 History 出现之前，要记录页面状态和浏览器记录只能通过 Hash 和 iFrame 两种方式。可以借助第三方类库 History.js 进行兼容。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript篇01--javascript事件</title>
      <link href="/posts/30021.html"/>
      <url>/posts/30021.html</url>
      
        <content type="html"><![CDATA[<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>JavaScript 和 HTML 的交互是通过事件实现的。JavaScript 采用异步事件驱动编程模型，当文档、浏览器、元素或与之相关对象发生特定事情时，浏览器会产生事件。我们可以给这个事件注册相应的事件处理程序，事件处理程序也就是事件发生后的处理动作。</p><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>事件流描述的是从页面中接收事件的顺序。<br>DOM2 级事件规定事件流包含三个阶段<br>1.document 往事件触发地点，捕获前进，遇到相同注册事件立即触发执行 2.到达事件位置，触发事件，如果该处既注册了冒泡事件，也注册了捕获事件，按照注册顺序执行 3.事件触发地点往 document 方向，冒泡前进，遇到相同注册事件立即触发<br>IE8 及 IE8 以下不支持事件捕获，只支持事件冒泡，早期 Netscape 只支持事件捕获，现代浏览器采用 DOM2 级事件流模型。</p><h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><p>响应某个事件的函数叫做事件处理程序或事件侦听器（listener），事件处理程序的名字以“on”开头。</p><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>在触发 DOM 上某个事件时，会产生一个事件对象 event，它包含着所有与事件有关的信息。只有在事件处理程序执行期间 event 对象才会存在，执行完毕后 event 对象被销毁。</p><h3 id="DOM-中的事件对象："><a href="#DOM-中的事件对象：" class="headerlink" title="DOM 中的事件对象："></a>DOM 中的事件对象：</h3><p>无论指定事件处理程序时使用了哪种方法，兼容 DOM 的浏览器都会将一个 event 对象传入到事件处理程序中。<br>HTML 方法添加时，变量 event 中保存着 event 对象。<br>event 对象通用的属性和方法中比较常用的有：<br>currentTarget：其事件处理程序当前正处理事件的元素<br>target：事件的目标<br>preventDefault()：阻止事件的默认行为<br>stopPropagation()：阻止事件的进一步捕获或冒泡<br>type：被触发的事件类型</p><h3 id="IE-中的事件对象："><a href="#IE-中的事件对象：" class="headerlink" title="IE 中的事件对象："></a>IE 中的事件对象：</h3><p>DOM0 级方法添加事件处理程序时，event 对象是 window 的属性；<br>IE 方法添加时，event 对象会像 DOM 中一样，作为参数被传递到事件处理程序函数中。<br>HTML 方法添加时，和 DOM 相同，event 对象保存在变量 event 中。<br>常用方法和属性：<br>srcElement：等于 target，默认目标<br>returnValue：等于 preventDefault()，阻止默认行为<br>cancelBubble：设为 true 取消事件冒泡，等于 stopPropagation()<br>type：被触发的事件类型</p><h3 id="跨浏览器的事件对象"><a href="#跨浏览器的事件对象" class="headerlink" title="跨浏览器的事件对象"></a>跨浏览器的事件对象</h3><p>虽然 DOM 和 IE 的 event 对象不同，但基于它们的相似性，我们还是可以写出跨浏览器的事件对象方案</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getEvent</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> e <span class="token operator">||</span> window<span class="token punctuation">.</span>event<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> e<span class="token punctuation">.</span>target <span class="token operator">||</span> e<span class="token punctuation">.</span>scrElement<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>preventDefault<span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> e<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>stopPropagation<span class="token punctuation">)</span> e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> e<span class="token punctuation">.</span>cancelBubble <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件模拟"><a href="#事件模拟" class="headerlink" title="事件模拟"></a>事件模拟</h2><p>DOM：<br>(1) 创建：用 document.createEvent()方法创建 event 对象，该方法接受一个参数，即要创建的事件类型的字符串。<br>(2) 初始化：不同类型的 event 有不同名字的初始化方法：<br>鼠标事件：”MouseEvents”，”initMouseEvent()”，接受 15 个参数<br>键盘事件：”KeyboardEvent”，”initKeyEvent()”，接受 10 个参数。键盘事件只有支持 DOM3 的浏览器才能用，要先检测。<br>其他事件：变动事件，HTML 事件，方法类似，很少使用。<br>自定义 DOM 事件：”CustonEvent”，”initCustonEvent()”，接受 4 个参数（type 字符串、bubbles 布尔值、cancelable 布尔值、detail 对象）。<br>(3) 触发：dispatchEvent()方法，接受一个参数，即要触发事件的 event 对象。<br>IE9+开始支持 DOM 方式。</p><p>IE：<br>(1) 创建：document.createEventObject()创建 event 对象。<br>(2) 初始化：用 event.propertyName = …的形式手动添加信息，没有特别的方法。<br>(3) 触发：fireEvent()方法，接受两个参数：事件处理程序的名称、event 对象。</p><h2 id="绑定事件处理程序的方法"><a href="#绑定事件处理程序的方法" class="headerlink" title="绑定事件处理程序的方法"></a>绑定事件处理程序的方法</h2><p>共有四种方法：HTML、DOM0、DOM2、IE，也可将后三种整合为跨浏览器方法。<br>(1) HTML：<br>对于不同元素，它支持的事件可以用一个与相应事件处理程序同名的 HTML attribute 来指定。如</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>click here<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>两个缺点：从 HTML 元素出现到事件处理程序就绪之间存在时差；HTML 和 JS 代码紧密耦合。</p><p>(2) DOM0：<br>先取得一个对象的引用，再将一个函数赋值给该引用的一个事件处理程序属性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'myBtn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Clicked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>DOM0 是元素的方法，事件处理程序是在元素的作用域中运行，在冒泡阶段被处理。在代码运行到它们前不会指定事件处理程序，和 HTML 方法一样存在时差，可能某段时间内怎么点都没反应。</p><p>(3) DOM2：<br>绑定事件处理程序：addEventListener()<br>删除事件处理程序：removeEventListener()<br>三个参数：要处理的事件名、作为事件处理程序的函数、表示调用事件处理程序阶段的布尔值（true 捕获阶段，false 冒泡阶段，一般都设为 false 以保证兼容性）。<br>好处：可以添加多个事件处理程序（按添加他们的顺序触发）。<br>注意事项：通过 addEventListener()添加的匿名函数无法移除。<br>备注：IE9 起支持 DOM2 方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//&lt;div id="div">click this division&lt;/div></span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">sayHi2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi again'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> sayHi<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> sayHi2<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4) IE：<br>绑定：attachEvent()<br>删除：detachEvent()<br>参数：事件处理名称（以“on”开头，不同于 DOM）、事件处理函数<br>注意事项：<br>[1] 匿名函数同样不能移除；<br>[2] 跟使用 DOM0 方法事件处理程序的作用域不同。DOM0 方法中事件处理程序在其所属元素的作用域上运行，IE 方法在全局作用域运行，this 等于 window；<br>[3] 执行顺序跟添加顺序相反；<br>[4] 老版本 IE 只支持冒泡，所以事件处理程序都会被添加到冒泡阶段；<br>[5] IE9 开始不建议使用 IE 专属方法，IE11 彻底取消支持。</p><p>(5) 在添加事件处理程序事 addEventListener 和 attachEvent 主要有几个区别</p><p>1.参数个数不相同，这个最直观，addEventListener 有三个参数，attachEvent 只有两个，attachEvent 添加的事件处理程序只能发生在冒泡阶段，addEventListener 第三个参数可以决定添加的事件处理程序是在捕获阶段还是冒泡阶段处理（我们一般为了浏览器兼容性都设置为冒泡阶段）</p><p>2.第一个参数意义不同，addEventListener 第一个参数是事件类型（比如 click，load），而 attachEvent 第一个参数指明的是事件处理函数名称（onclick，onload）</p><p>3.事件处理程序的作用域不相同，addEventListener 的作用域是元素本身，this 是指的触发元素，而 attachEvent 事件处理程序会在全局变量内运行，this 是 window，所以刚才例子才会返回 undefined，而不是元素 id</p><p>4.为一个事件添加多个事件处理程序时，执行顺序不同，addEventListener 添加会按照添加顺序执行，而 attachEvent 添加多个事件处理程序时顺序无规律(添加的方法少的时候大多是按添加顺序的反顺序执行的，但是添加的多了就无规律了)，所以添加多个的时候，不依赖执行顺序的还好，若是依赖于函数执行顺序，最好自己处理，不要指望浏览器</p><p>(6) 跨浏览器：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">handler</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样处理就可以解决 handler 中有 this 的问题了，但是新的问题又来了，我们这样等于添加了一个匿名的事件处理程序，无法用 detachEvent 取消事件处理程序，有很多解决方案，我们可以借鉴大师的处理方式，jQuery 创始人 John Resig 很巧妙地利用了闭包，是这样做的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addEvent</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">[</span><span class="token string">'e'</span> <span class="token operator">+</span> type <span class="token operator">+</span> handler<span class="token punctuation">]</span> <span class="token operator">=</span> handler<span class="token punctuation">;</span>    node<span class="token punctuation">[</span>type <span class="token operator">+</span> handler<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      node<span class="token punctuation">[</span><span class="token string">'e'</span> <span class="token operator">+</span> type <span class="token operator">+</span> handler<span class="token punctuation">]</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    node<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> node<span class="token punctuation">[</span>type <span class="token operator">+</span> handler<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在取消事件处理程序的时候</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">removeEvent</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> node<span class="token punctuation">[</span>type <span class="token operator">+</span> handler<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token punctuation">[</span>type <span class="token operator">+</span> handler<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="事件委托（事件代理）是什么？"><a href="#事件委托（事件代理）是什么？" class="headerlink" title="事件委托（事件代理）是什么？"></a>事件委托（事件代理）是什么？</h2><p>事件委托的意义： 1.委托事件有一个优势，他们能在后代元素添加到文档后，可以处理这些事件。在确保所选择的元素已经存在的情况下，进行事件绑定时，可以使用委派的事件，以避免频繁的绑定事件及解除绑定事件。 2.除了可以给未创建的后代元素绑定事件外，代理事件的另一个好处就是，当需要监视很多元素的时候，代理事件的开销更小。<br>原理：<br>事件委托利用了事件冒泡，只绑定一个事件处理程序，就可以管理某一类型的所有事件。<br>使用事件委托只需要在 DOM 树中尽量高的层次上添加一个使用了 switch-case 的事件处理程序。<br>适用情况：<br>所有用到按钮的事件都适合采用事件委托，最适合的有 click、mousedown、mouseup、keydown、keyup、keypress。<br>移除事件处理程序：<br>内存中留有过时不用的空事件处理程序会造成性能问题： 1.文档中移除带有事件处理程序的元素（removeChild()、replaceChild()、innerHTML） 2.卸载页面<br>针对 1：如果知道某个元素即将被移除，最好手工移除事件处理程序，如 bt.onclick = null;<br>针对 2：在页面卸载前通过 onunload 事件处理程序移除所有事件处理程序。这时使用事件委托会有明显优势，即需要跟踪的事件处理程序越少，移除越容易。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>1.stopImmediatePropagation 的使用</p><p>这是 w3c 的东西，使用的也不是特别多，我们知道 stopPropagation 可以阻止事件的进一步传播，但是他阻止不了该元素上绑定的其他函数的执行，比如我们在 obj 上绑定了 func1 和 func2，如果我们在 func1 中使用了 stopPropagation，那 func2 依然还是会执行出来。倘若这里使用 stopImmediatePropagation，结果就不一样了，他不仅阻止事件的传播，还阻止 func2 的执行。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3学习总结</title>
      <link href="/posts/6917.html"/>
      <url>/posts/6917.html</url>
      
        <content type="html"><![CDATA[<p>在 CSS3 中，并没有采用总体结构，而是采用了分工协作的模块化结构</p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="属性选择器："><a href="#属性选择器：" class="headerlink" title="属性选择器："></a>属性选择器：</h3><p>[att*=val]<br>[att^=val]<br>[att$=val]</p><h3 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h3><p>a:link<br>a:visited<br>a:hover<br>a:active</p><p>:first-line<br>:first-letter<br>:after<br>:before</p><p>:root<br>:not()<br>:empty<br>:target</p><p>:first-child (css2)<br>:last-child (css3)<br>:nth-child()<br>:nth-last-child()<br>:nth-of-type()<br>:nth-last-of-type()<br>:only-child</p><p>:hover<br>:active<br>:focus</p><p>:enabled<br>:disabled<br>:read-only<br>:read-write<br>:checked</p><p>::selection</p><h2 id="使用选择器在页面中插入内容"><a href="#使用选择器在页面中插入内容" class="headerlink" title="使用选择器在页面中插入内容"></a>使用选择器在页面中插入内容</h2><p>利用 before 伪元素和 after 伪元素的 content 属性插入内容</p><h3 id="插入文字"><a href="#插入文字" class="headerlink" title="插入文字"></a>插入文字</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h2:before</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'COLUMN'</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Comic Sans MS'</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 1px 5px<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指定个别元素不进行插入：none 属性和 normal 属性</p><h3 id="插入图像文件"><a href="#插入图像文件" class="headerlink" title="插入图像文件"></a>插入图像文件</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h2:before</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://www.baidu.com/img/bd_logo1.png<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token selector">img:after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>alt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'('</span> <span class="token function">attr</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span> <span class="token string">')'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-content-属性来插入项目编号"><a href="#使用-content-属性来插入项目编号" class="headerlink" title="使用 content 属性来插入项目编号"></a>使用 content 属性来插入项目编号</h3><p>指定编号的种类</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>  <span class="token property">counter-increment</span><span class="token punctuation">:</span> mycounter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1:before</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">counter</span><span class="token punctuation">(</span>mycounter<span class="token punctuation">,</span> upper-roman<span class="token punctuation">)</span> <span class="token string">'.'</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 42px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编号嵌套：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>  <span class="token property">counter-increment</span><span class="token punctuation">:</span> mycounter<span class="token punctuation">;</span>  <span class="token property">counter-reset</span><span class="token punctuation">:</span> subcounter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1:before</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">counter</span><span class="token punctuation">(</span>mycounter<span class="token punctuation">)</span> <span class="token string">'.'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h2</span> <span class="token punctuation">&#123;</span>  <span class="token property">counter-increment</span><span class="token punctuation">:</span> subcounter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h2:before</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">counter</span><span class="token punctuation">(</span>mycounter<span class="token punctuation">)</span> <span class="token string">'-'</span> <span class="token function">counter</span><span class="token punctuation">(</span>subcounter<span class="token punctuation">)</span> <span class="token string">'.'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在字符串两边添加嵌套文字符号</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>  <span class="token property">quotes</span><span class="token punctuation">:</span> <span class="token string">'('</span> <span class="token string">')'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1:before</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> open-quote<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1:after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> close-quote<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文字与字体"><a href="#文字与字体" class="headerlink" title="文字与字体"></a>文字与字体</h2><h3 id="阴影：text-shadow"><a href="#阴影：text-shadow" class="headerlink" title="阴影：text-shadow"></a>阴影：text-shadow</h3><p>多个阴影：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">text-shadow</span><span class="token punctuation">:</span> 5px 5px 5px gray<span class="token punctuation">,</span> 10px 10px 5px red<span class="token punctuation">,</span> 15px 15px 5px blue<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="word-break"><a href="#word-break" class="headerlink" title="word-break"></a>word-break</h3><p>当 word-break 属性为 break-all 时，对于西文来说，允许在单词内换行，对于标点符号，实测在 Firefox 中允许标点符号位于行首，其他浏览器不允许。</p><h3 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word-wrap"></a>word-wrap</h3><p>word-wrap:break-word;<br>word-wrap 是用来决定允不允许英文单词内断句的，如果不允许的话长单词就会溢出。最重要的一点是它还是会首先尝试挪到下一行，看看下一行的宽度够不够，不够的话就进行单词内的断句。<br>而 word-break:break-all 则更变态，因为它断句的方式非常粗暴，它不会尝试把长单词挪到下一行，而是直接进行单词内的断句</p><h3 id="font-face"><a href="#font-face" class="headerlink" title="@font-face"></a>@font-face</h3><h3 id="font-size-adjust"><a href="#font-size-adjust" class="headerlink" title="font-size-adjust"></a>font-size-adjust</h3><p>font-size-adjust 属性为某个元素规定一个 aspect 值，这样就可以保持首选字体的 x-height。字体的小写字母 “x” 的高度与”font-size”高度之间的比率被称为一个字体的 aspect 值。</p><h2 id="盒相关的样式"><a href="#盒相关的样式" class="headerlink" title="盒相关的样式"></a>盒相关的样式</h2><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><p>none 此元素不会被显示。<br>block 此元素将显示为块级元素，此元素前后会带有换行符。<br>inline 默认。此元素会被显示为内联元素，元素前后没有换行符。<br>inline-block 行内块元素。<br>list-item 此元素会作为列表显示。<br>table 此元素会作为块级表格来显示（类似 table），表格前后带有换行符。<br>inline-table 此元素会作为内联表格来显示（类似 table），表格前后没有换行符。<br>table-cell 此元素会作为一个表格单元格显示（类似 td 和 th）</p><h3 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h3><h3 id="box-sizing-IE8"><a href="#box-sizing-IE8" class="headerlink" title="box-sizing(IE8+)"></a>box-sizing(IE8+)</h3><h2 id="背景和边框相关的样式"><a href="#背景和边框相关的样式" class="headerlink" title="背景和边框相关的样式"></a>背景和边框相关的样式</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>background 在一个声明中设置所有的背景属性。<br>background-attachment 设置背景图像是否固定或者随着页面的其余部分滚动。<br>background-color 设置元素的背景颜色。<br>background-image 设置元素的背景图像。<br>background-position 设置背景图像的开始位置。<br>background-repeat 设置是否及如何重复背景图像。<br>background-clip 规定背景的绘制区域。css3 默认为 border-box<br>background-origin 规定背景图片的定位区域。<br>background-size 规定背景图片的尺寸。</p><h3 id="border-radius"><a href="#border-radius" class="headerlink" title="border-radius"></a>border-radius</h3><h3 id="border-image"><a href="#border-image" class="headerlink" title="border-image"></a>border-image</h3><p>JavaScript 语法：object.style.borderImage=”url(border.png) 30 30 round”<br>border-image-repeat: repeat/round/stretch</p><h2 id="CSS3-中的变形处理"><a href="#CSS3-中的变形处理" class="headerlink" title="CSS3 中的变形处理"></a>CSS3 中的变形处理</h2><p>translate()<br>rotate()<br>scale()<br>skew()<br>matrix()<br>transform 向元素应用 2D 或 3D 转换<br>transform-origin 允许你改变被转换元素的位置</p><p><em>注意：这些方法只对 block 水平元素有效</em></p><h2 id="过渡与动画"><a href="#过渡与动画" class="headerlink" title="过渡与动画"></a>过渡与动画</h2><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><p>CSS3 过渡是元素从一种样式逐渐改变为另一种的效果。<br>要实现这一点，必须规定两项内容：<br>规定您希望把效果添加到哪个 CSS 属性上<br>规定效果的时长</p><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>当您在 @keyframes 中创建动画时，请把它捆绑到某个选择器，否则不会产生动画效果。<br>通过规定至少以下两项 CSS3 动画属性，即可将动画绑定到选择器：<br>规定动画的名称<br>规定动画的时长</p><h2 id="多列"><a href="#多列" class="headerlink" title="多列"></a>多列</h2><p>column-count<br>column-gap<br>column-rule</p><h2 id="弹性盒子"><a href="#弹性盒子" class="headerlink" title="弹性盒子"></a>弹性盒子</h2><p><a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">A Complete Guide to Flexbox</a><br>Properties for the Parent(flex container):<br>display: flex; /_ or inline-flex _/<br>flex-direction: row | row-reverse | column | column-reverse;<br>flex-wrap: nowrap | wrap | wrap-reverse;<br>flex-flow: &lt;‘flex-direction’&gt; || &lt;‘flex-wrap’&gt;<br>justify-content: flex-start | flex-end | center | space-between | space-around;<br>align-items: flex-start | flex-end | center | baseline | stretch;<br>align-content: flex-start | flex-end | center | space-between | space-around | stretch;</p><p>Properties for the Children(flex items):<br>1)order: integer;<br>2)flex-grow: number; /_ default 0 <em>/<br>设置或检索弹性盒的扩展比率,根据弹性盒子元素所设置的扩展因子作为比率来分配剩余空间.3<br>3)flex-shrink: number; /</em> default 1 <em>/<br>flex-shrink 的默认值为 1，如果没有显示定义该属性，将会自动按照默认值 1 在所有因子相加之后计算比率来进行空间收缩。<br>4)flex-basis: length | auto; /</em> default auto _/<br>auto：无特定宽度值，取决于其它属性值<br>length：用长度值来定义宽度。不允许负值<br>percentage：用百分比来定义宽度。不允许负值<br>5)flex: none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]<br>This is the shorthand for flex-grow, flex-shrink and flex-basis combined.<br>6)align-self: auto | flex-start | flex-end | center | baseline | stretch;<br>Note that float, clear and vertical-align have no effect on a flex item.</p><h2 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h2><p>CSS 2<br>实际上在很早之前，CSS 就支持媒体查询了<br>页面有些部分需要在打印的时候隐藏或者变大，这时候可以使用 media 使某些 style 只在打印的时候生效</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> print</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 适用于印刷的样式 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>常用的媒体类型有</p><ol><li>all（所有），适用于所有设备。</li><li>handheld（手持），用于手持设备。</li><li>print（印刷），用于分页材料以及打印预览模式下在屏幕上的文档视图。</li><li>projection（投影），用于投影演示文稿，例如投影仪。</li><li>screen（屏幕） ，主要用于计算机屏幕。</li></ol><p>在使用的时候可以在样式表直接书写 @media 指令+空格+媒体类型（多个逗号隔开）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> print</span> <span class="token punctuation">&#123;</span>  <span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 10pt<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> screen</span> <span class="token punctuation">&#123;</span>  <span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 13px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@media</span> screen<span class="token punctuation">,</span> print</span> <span class="token punctuation">&#123;</span>  <span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 1.2<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CSS 3<br>但是 CSS 2 的媒体类型应用场景极为有限，CSS3 大大拓展了这一能力</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 990px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当媒体类型匹配且表达式为真的时候，对应 style 就会其作用，除非使用 not 或者 only 操作符，否则媒体类型不是必需的，默认代表所有媒体类型。</p><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><p>1)and<br>and 操作符用于将多个 media feature 组合成一个查询，同时用于组合 media type 和 media feature，一个基本的 media query 类似这样，一个 meidia feature 作用于所有 media type</p><pre><code>@media (min-width: 700px) &#123; ... &#125;</code></pre><p>但是如果只想在横向显示时应用就可以使用 and 操作符把 media type 和 media feature 结合起来<br>@media (min-width: 700px) and (orientation: landscape) { … }<br>这样上面的 media query 只有在可视窗口（viewport）最小是 700px 并且是横向显示的时候才返回 true，如果还想进一步限制设备为 tv 可以这样<br>@media tv and (min-width: 700px) and (orientation: landscape) { … } 2)逗号分隔的列表<br>在使用逗号分隔的查询列表中每个查询都被视为一个独立的查询，任何本查询中的作用符不影响其他查询，只要有一个查询返回 true，style 就会被作用。<br>举例来说，如果希望特定 style 在 viewport 最小宽度为 700px 或手持式设备上生效，可以这么写：</p><pre><code>@media (min-width: 700px), handheld and (orientation: landscape) &#123; ... &#125;</code></pre><p>3)not<br>not 操作符作用域整个查询，所以只有在整个查询返回 false 的情况下使用 not 后才会返回 true。当使用逗号分隔的列表的时候 not 作用于邻近的查询，而不会作用于每个查询</p><pre><code>@media not all and (monochrome) &#123; ... &#125;</code></pre><p>查询其实会这样起作用</p><pre><code>@media not (all and (monochrome)) &#123; ... &#125;</code></pre><p>而不是这样</p><pre><code>@media (not all) and (monochrome) &#123; ... &#125;</code></pre><p>对于逗号分隔的列表</p><pre><code>@media not screen and (color), print and (color)</code></pre><p>查询是这样子的</p><pre><code>@media (not (screen and (color))), print and (color)</code></pre><p>4)only<br>only 操作符用于阻止不支持带有 media feature 的 media queries 的浏览器应用特定 style</p><pre><code>&lt;link rel=&quot;stylesheet&quot; media=&quot;only screen and (color)&quot; href=&quot;example.css&quot; /&gt;</code></pre><h3 id="media-features"><a href="#media-features" class="headerlink" title="media features"></a>media features</h3><p>有以下常用的 media feature<br>width：浏览器宽度<br>height：浏览器高度<br>device-width：设备屏幕分辨率的宽度值<br>device-height：设备屏幕分辨率的高度值<br>orientation：浏览器窗口的方向纵向还是横向，当窗口的高度值大于等于宽度时该特性值为 portrait，否则为 landscape<br>aspect-ratio：比例值，浏览器的纵横比<br>device-aspect-ratio：比例值，屏幕的纵横比<br>color：设备使用多少位的颜色值，如果不是彩色设备，值为 0<br>color-index：色彩表的色彩数<br>monochrome：单色帧缓冲器每个像素的字节<br>resolution：分辨率值，设备分辨率值<br>scan：电视机类型设备扫描方式，progressive 或 interlace<br>grid：只能指定两个值 0 或 1，是否基于栅格的设备</p><h3 id="如何引入-media"><a href="#如何引入-media" class="headerlink" title="如何引入 media"></a>如何引入 media</h3><p>有两种常用的引入方式<br>link 方法引入</p><pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styleB.css&quot;  media=&quot;screen and (min-width: 600px) and (max-width: 800px)&quot;&gt;</code></pre><p>@media 引入</p><pre><code>@media screen and (min-width: 600px) and (max-width: 800px)&#123;    选择器&#123;        属性：属性值；    &#125;&#125;</code></pre><h2 id="CSS3-其他"><a href="#CSS3-其他" class="headerlink" title="CSS3 其他"></a>CSS3 其他</h2><h3 id="颜色相关的样式"><a href="#颜色相关的样式" class="headerlink" title="颜色相关的样式"></a>颜色相关的样式</h3><p>1)增加 rgba、hsl、hsla<br>alpha 通道和 opacity 属性区别：使用 alpha 通道时，可以单独针对元素的背景色和文字样式等指定透明度，而 opacity 只能指定整个元素的透明度。 2)指定颜色值为 transparent<br>CSS2 中，可以在 background-color、border-color 属性中指定 transparent 值，在 CSS3 中，可以在一切指定属性值的属性中指定 transparent 值。</p><h3 id="用户界面相关"><a href="#用户界面相关" class="headerlink" title="用户界面相关"></a>用户界面相关</h3><p>1)outline 与 outline-offset<br><a href="http://www.zhangxinxu.com/wordpress/2015/04/css3-radius-outline/">CSS3 如何实现圆角的 outline 效果</a><br>offset 支持负值<br>2)resize<br>与 overflow：auto 或 overflow：hidden 配合使用。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> css3 </tag>
            
            <tag> 积累 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【翻译】CSS水平和垂直居中的12种方法</title>
      <link href="/posts/63277.html"/>
      <url>/posts/63277.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://tinyfinch.com/horizontal-and-vertical-centering-in-css/">原文链接</a></p><p>在 CSS 中有许多不同的方法能够做到水平和垂直居中，但很难去选择合适的那个。我会向你展示我所看到的所有的方法，帮助你在所面对的情境下选择最棒的那一个。</p><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法 1"></a>方法 1</h3><p>此方法将只能垂直居中单行文本。只需将行高设置为对象的高度，文本就会居中。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CSS:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span> <span class="token comment">/*与div等高*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>优点： 1.兼容所有浏览器 2.当没有足够的空间时，文字不会被切断</p><p>缺点： 1.只对文本有效（不能块级元素） 2.当为多行文字而不只一行时（如文字换行），这种方法破坏十分严重</p><p>此方法对小的元素非常有用，比如将按钮或单行文本字段中的文本垂直居中。</p><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法 2"></a>方法 2</h3><p>此方法使用绝对定位的 div，它的 top 为 50%，上边距设置为内容高度一半的负值。这意味着对象必须有一个固定的高度，这是被 CSS 定义了的。因为它有一个固定的高度，你可能需要给容器 div 设置 overflow：hidden，因此如果内部有太多的内容时，滚动条就会出现，而不是内容在在 div 外继续排列！</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CSS:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span> <span class="token comment">/* 负的高度的一半 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点： 1.兼容所有浏览器 2.不需要嵌套的标签</p><p>缺点： 1.当没有足够的空间时，内容会消失（比如当 div 在 body 内部并且用户缩小浏览器窗口，滚动条不会出现）</p><p>我们可以修改上面的 CSS 代码使 div 垂直和水平居中。<br>CSS:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#wrap</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span> <span class="token comment">/* 宽度/2 */</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法 3"></a>方法 3</h3><p>此方法设置一些 div 的 display 和 table 类似，所以我们可以使用 table 的 veitical-align 属性（这个属性对其他元素的效果很不一样）。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>CSS:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#container</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#content</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点： 1.内容可以动态改变高度（这样不用一定得在 CSS 中定义） 2.当容器没有足够的空间时，内容不会被切断。</p><p>缺点：<br>1.IE 低版本不支持 2.需要很多嵌套的标签（真的不好，这是一个很主观的话题）</p><p>由于这种方法不支持 ie6-7，所以如果你想解决这个问题，只需添加一个新的 div 来使用 hack 方式。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableCell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CSS:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.table</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.tableCell</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  *<span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  *<span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  *<span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content</span> <span class="token punctuation">&#123;</span>  *<span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  *<span class="token property">top</span><span class="token punctuation">:</span> -50%<span class="token punctuation">;</span>  *<span class="token property">left</span><span class="token punctuation">:</span> -50%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法 4"></a>方法 4</h3><p>在这种方法中，我们将在内容元素前加一个 div。这个 div 将设置为 height:50%;并且 margin-bottom 为内容高度的一半。然后内容清除浮动，内容将会居中。<br>你应该注意到，如果内容元素在 body 内，我们需要设置 height:100%。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>floater<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--This block have empty content --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Content section<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>CSS:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html,body</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#floater</span> <span class="token punctuation">&#123;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -120px<span class="token punctuation">;</span> <span class="token comment">/*240px/2*/</span><span class="token punctuation">&#125;</span><span class="token selector">#content</span> <span class="token punctuation">&#123;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 240px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点： 1.兼容所有浏览器 2.当没有足够的空间（即窗口缩小）时我们的内容不会被切断，滚动条会出现。</p><p>缺点： 1.需要一个额外的空元素</p><p><a href="http://jsbin.com/faqimif/1/edit?html,css,output">查看 demo</a></p><h3 id="方法-5"><a href="#方法-5" class="headerlink" title="方法 5"></a>方法 5</h3><p>该方法设置一些 div 来像 table 一样显示，所以我们可以像方法 3 一样使用 table 的 vertical-align 属性，但是对于 IE，我们需要添加一个 inline 水平的标签，块级水平的标签是没有任何用的。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableCell<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>Centering multiple lines <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>in a block container.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span>  <span class="token punctuation">></span></span>  <span class="token comment">&lt;!--[if lte IE 7]>&lt;b>&lt;/b>&lt;![endif]--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CSS:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.table</span> <span class="token punctuation">&#123;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid orange<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.tableCell</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--[if lte ie 7]>  &lt;style type="text/css">    .tableCell &#123;      display: inline-block;    &#125;    b &#123;      display: inline-block;      height: 100%;      vertical-align: middle;      width: 1px;    &#125;  &lt;/style>&lt;![endif]--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：<br>内容可以动态改变高度</p><p>缺点：<br>很多嵌套标签</p><h3 id="方法-6"><a href="#方法-6" class="headerlink" title="方法 6"></a>方法 6</h3><p>此方法设置 display:inline-block，添加父元素的高度为固定数值或百分比。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vertically_center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I am vertically centered!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>extra<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- ie comment --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CSS:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">html,  body</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#parent</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#vertically_center,  #extra</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#extra</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--[if lt IE 8]>  &lt;style type="text/css">    /*IE6-7not  support display:inline-block,so we need a hack*/    #vertically_center,    #extra &#123;      display: inline;      zoom: 1;    &#125;    #extra &#123;      width: 1px;    &#125;  &lt;/style>&lt;![endif]--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：<br>兼容所有浏览器</p><p>缺点：<br>需要添加父级的高度，并为 IE 写一个 hack，另外，需要很多标签。</p><p><a href="http://jsbin.com/cenefib/1/edit?html,css,output">查看 demo</a></p><h3 id="方法-7"><a href="#方法-7" class="headerlink" title="方法 7"></a>方法 7</h3><p>该方法用于多行文本和高度是可变的时候，我们需要设置给顶部和底部同样的 padding。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>columns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>CSS:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>优点：<br>简单且兼容所有浏览器</p><p>缺点：<br>如果高度是固定的，此方法无效的。</p><h3 id="方法-8"><a href="#方法-8" class="headerlink" title="方法 8"></a>方法 8</h3><p>现在让我们来看看如何使用 jQuery 来居中。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Centered in the middle of the page with jQuery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>CSS:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #338bc7<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 270px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jQuery:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      position<span class="token operator">:</span> <span class="token string">'absolute'</span><span class="token punctuation">,</span>      left<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outerWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>      top<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.container'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">outerHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：<br>简单且兼容所有浏览器</p><p>缺点：<br>需要 jQuery，如果 JavaScript 被禁用将会失效</p><h3 id="方法-9"><a href="#方法-9" class="headerlink" title="方法 9"></a>方法 9</h3><p>在这种方法中，我们使用 CSS3 的新属性：flexbox。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//vertical.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flexbox way<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>CSS:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">html,body</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token comment">/*for firefox*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：<br>简单且在响应式设计中效果十分棒</p><p>缺点：<br>在有些浏览器中不起作用，因为其不支持 flexbox</p><h3 id="方法-10"><a href="#方法-10" class="headerlink" title="方法 10"></a>方法 10</h3><p>如果网站有弹窗，我们不知道它的大小，但我们总是希望它能在大多数的设备里居中。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cotent-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Popup title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>pop up in the window<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>CSS:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">html,body</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #bbb<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 3px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content-header</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 10px 20px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.25<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content-body</span> <span class="token punctuation">&#123;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：<br>总是以不同的设备屏幕为中心</p><p>缺点：<br>实现有一点难，在一些浏览器中无效</p><h3 id="方法-11"><a href="#方法-11" class="headerlink" title="方法 11"></a>方法 11</h3><p>在这种方法中，我们使用伪元素（:before 和:after）来垂直居中网站中的对象。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Make it centered in the window<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>CSS:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">-webkit-box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">html,body</span> <span class="token punctuation">&#123;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 99.5%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body:after</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：<br>在现代浏览器中工作得很好</p><p>缺点：<br>复杂和更多的 CSS 代码。</p><h3 id="方法-12"><a href="#方法-12" class="headerlink" title="方法 12"></a>方法 12</h3><p>这个方法，我认为是使对象在网站中垂直居中最简单的方法。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Make it centered in the window<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>CSS:</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#center</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：<br>容易，在现代浏览器中工作得很好</p><p>缺点：<br>也需要 height: 100%;(其实是指用 absolute 定位需要，用 fixed 定位不需要)</p><h3 id="兼容性注意事项"><a href="#兼容性注意事项" class="headerlink" title="兼容性注意事项"></a>兼容性注意事项</h3><p>正如你所知，IE 是唯一给你带来问题的主要浏览器，你需要测试 IE 的旧版本去解决兼容性问题。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>除了上面我收集的，还有其他的一些方法可以做到垂直和水平居中的网站，如果你有其他的方法，请在评论区分享。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS篇02--margin和padding</title>
      <link href="/posts/4963.html"/>
      <url>/posts/4963.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、margin"><a href="#一、margin" class="headerlink" title="一、margin"></a>一、margin</h2><p>1.负 margin 位移自己：<a href="http://jsbin.com/zemava/3/edit?html,css,output">demo</a>；</p><p>2.负 margin-right/margin-bottom 位移别人：<a href="http://jsbin.com/zemava/5/edit?html,css,output">demo</a>；</p><p>3.负 margin 扩大面积：经常用来解决 inline-block li 的 margin 超出父容器的问题；</p><p>4.margin collapse（margin 合并）<br>本节参考自知乎作者貘吃馍香<br>链接：<a href="http://www.zhihu.com/question/24563593/answer/28254084">http://www.zhihu.com/question/24563593/answer/28254084</a></p><p>w3c <a href="https://www.w3.org/TR/CSS2/box.html#collapsing-margins">collapsing margins</a><br>基本上这节意思是说，比邻元素的边距总是折叠。<br>但是得除了以下几种情况：</p><p>Margins of the root element’s box do not collapse.（根元素不折叠）<br>If the top and bottom margins of an element with clearance are adjoining, its margins collapse with the adjoining margins of following siblings but that resulting margin does not collapse with the bottom margin of the parent block.（有间隙不折叠）</p><p>Margins between a floated box and any other box do not collapse (not even between a float and its in-flow children). （浮动不折叠）<br>Margins of elements that establish new block formatting contexts (such as floats and elements with ‘overflow’ other than ‘visible’) do not collapse with their in-flow children.（创建 BFC 与子不折叠）<br>Margins of absolutely positioned boxes do not collapse (not even with their in-flow children).（positioned 不折叠）<br>Margins of inline-block boxes do not collapse (not even with their in-flow children).（inline-box 不折叠）<br>The bottom margin of an in-flow block-level element always collapses with the top margin of its next in-flow block-level sibling, unless that sibling has clearance.（兄弟有间隙不折叠）<br>The top margin of an in-flow block element collapses with its first in-flow block-level child’s top margin if the element has no top border, no top padding, and the child has no clearance.（父子间有 padding 和 border 不折叠）</p><p>5.margin 居中：margin-left: auto; margin-right: auto；</p><p>6.注意 margin-top 值为百分比时也以 width 为基准。</p><h2 id="二、padding"><a href="#二、padding" class="headerlink" title="二、padding"></a>二、padding</h2><p>1.negative value are not allowed； 2.利用 padding 来保持高宽比：<a href="http://jsbin.com/zevejuj/1/edit?html,css,output">图片保持比例超出隐藏</a>和<a href="http://jsbin.com/zevejuj/2/edit?html,css,output">图片保持比例缩放</a>；<br>3.padding 与绝对定位：如果 parent 设定了 margin，border，padding 等属性，那么这个定位点将忽略 padding，将会从 padding 开始的地方(即只从 padding 的左上角开始)进行定位。<a href="http://jsbin.com/zevejuj/3/edit?html,css,output">demo</a>;<br>4.padding 补偿法：利用超大内边距和相同的负外边距实现<a href="http://jsbin.com/xoguhi/edit?html,css,console,output">三列等高</a>。优点是比较简单，纯 css 实现，缺点是无法看到下边，需再套一层 div。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS篇01--从清除浮动说起</title>
      <link href="/posts/3992.html"/>
      <url>/posts/3992.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道元素浮动后其容器高度会塌陷，这常常不是我们想要的，因此我们需要清除浮动，更确切的说法是清除因为浮动带来的效果。而我们一般通过触发 BFC 或者利用 clear 来清除浮动，IE 则通过触发 haslayout 来实现。接下来我将谈谈自己对容器高度塌陷和这两种方法的理解。</p><h2 id="为什么元素浮动后其容器高度会塌陷？"><a href="#为什么元素浮动后其容器高度会塌陷？" class="headerlink" title="为什么元素浮动后其容器高度会塌陷？"></a>为什么元素浮动后其容器高度会塌陷？</h2><h3 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h3><p>经常听到文档流的说法，但是在 W3C 规范中并没有发现 document flow 这个概念，只有常规流(normal flow)。在常规流中，元素按照其在 HTML 中的先后位置至上而下布局，在这个过程中，行内元素水平排列，直到当行被占满然后换行，块级元素则会被渲染为完整的一个新行，除非另外指定，否则所有元素默认都是普通流定位，也可以说，普通流中元素的位置由该元素在 HTML 文档中的位置决定。文档流也可以认为是一层一层嵌套的，因此 n 多个空 div 嵌套，最外面那个 div 高度仍为 0（本文 float 元素容器默认都是指 div，其他块级元素其实效果一样，只是可能会有默认的样式，因此高度不一定为 0）。</p><h3 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h3><p>float 的引入最初是为了解决图文混排的，元素 float 后会脱离文档流，而 div 的高度默认是里面文档流的高度，因此容器内若没有其他文档流，容器高度为 0。</p><h2 id="清除浮动的两种方法"><a href="#清除浮动的两种方法" class="headerlink" title="清除浮动的两种方法"></a>清除浮动的两种方法</h2><h3 id="触发-BFC-来清除浮动"><a href="#触发-BFC-来清除浮动" class="headerlink" title="触发 BFC 来清除浮动"></a>触发 BFC 来清除浮动</h3><p>BFC(block formatting context)俗称块级格式化上下文。下图是 MDN 的一些总结。<br><img src="../../../../img/bfc.png" alt="BFC"><br>BFC 有一下特性： 1.内部的 Box 会在垂直方向，从顶部开始一个接一个地放置。<br>2.Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生叠加 3.每个元素的 margin box 的左边， 与包含块 border box 的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。<br>4.BFC 的区域不会与 float box 叠加。<br>5.BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然。 6.计算 BFC 的高度时，浮动元素也参与计算。</p><p>正因为性质 6，可以利用 BFC 来清除浮动。<br>参考： 1.<a href="http://www.html-js.com/article/1866">CSS 之 BFC 详解</a></p><h3 id="通过-clear-both-来清除浮动"><a href="#通过-clear-both-来清除浮动" class="headerlink" title="通过 clear:both 来清除浮动"></a>通过 clear:both 来清除浮动</h3><p>1.底部加 html block 水平元素：</p><pre><code>&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;</code></pre><p>2.css after 伪元素底部生成：</p><pre><code>.clearfix::after&#123;content: &quot;&quot;; display: block; clear: both;&#125;.clearfix&#123;*zoom: 1;&#125; // IE hack</code></pre><p>PS.我们常见的是 clearfix:after 这种写法,中间不是两个:，两个是 css3 的写法，是一种改进，一个是 css2 的设计失误，不够优雅，一个表示状态,是伪类，两个是伪元素，CSS3 对这两种进行了区分。如不用兼容 IE8，最好用两个:的写法。</p><p>为什么可以通过 clear:both 来清除浮动呢？ 1.如前所诉，容器高度默认是里面文档流的高度 2.带有 clear:both 的元素左右不能有浮动元素，元素加上 clear:both 能让它在所有浮动元素的下面，从而撑起了容器高度。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行与git常用命令</title>
      <link href="/posts/31653.html"/>
      <url>/posts/31653.html</url>
      
        <content type="html"><![CDATA[<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><h3 id="什么是命令行"><a href="#什么是命令行" class="headerlink" title="什么是命令行"></a>什么是命令行</h3><p>命令行：command-line interfere(cli)<br>图形用户界面: Graphical User Interface(GUI)</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre><code>pwd        显示当前工作目录          process working directorycd        切换目录                  change directorymkdir    创建目录                  make directorymkdir -p    递归创建多个目录    --parents     no error if existing, make parent directories as neededls      列出目录内容              listls -a      可以显示.开头的文件      allls -l      列出文件的详细信息        long listing formattouch    创建文件rm/rmdir  删除文件/目录            removerm -r    删除目录                --recursively 递归地mv        文件或目录的移动或更名    movecp      将文件拷贝至另一文件    copyecho                             like echo 1 &gt; test.txtcat        显示文件内容和合并多个文件    like cat test.txt,also like cat file1 file2 &gt; fileless    按页显示文件  j - 向前移动一行,k - 向后移动一行,G - 移动到最后一行,g - 移动到第一行clear      清屏du      统计目录／文件所占磁盘空间的大小    disk usagedu -sh     以易读的方式显示总共大小    --summarize --human-readableps      报告程序状况            process statushead     显示开头某个数量的文字区块    like head -n 3 test.txttail    显示结尾某个数量的文字区块xxx -h    至少可以通过以下三种中的一种获取命令的帮助信息xxx --helpman    xxx</code></pre><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><pre><code>Alt + .     使用上一条命令的最后一个参数!!             执行上一条命令.             当前目录..             上一层目录~            根目录-            上一次目录多个命令之间可以用;或&amp;&amp;分隔，前者命令错误不中断</code></pre><h3 id="管道-pipe"><a href="#管道-pipe" class="headerlink" title="管道(pipe)"></a>管道(pipe)</h3><p>前一个命令的输出为后一个命令的输入，like cat test.txt | less</p><h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><p>告诉命令行去哪找命令，用英文分号分隔加路径，Windows 在高级系统设置中</p><h3 id="vi-与-vim"><a href="#vi-与-vim" class="headerlink" title="vi 与 vim"></a>vi 与 vim</h3><p>vi 是一种计算机文本编辑器，是“Visual”的不正规的缩写。vi 是一种模式编辑器。不同的按钮和键击可以更改不同的“模式”。Vim（Vi IMproved）是一种升级版。<br>默认为不可编辑模式，i：输入模式 Windows 中 Esc：退出 输入:切至命令模式 w:write q:quit wq:保存并退出<br>深入学习请<a href="http://coolshell.cn/articles/5426.html">参考</a></p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>git 日常使用的 6 个命令，如图所示<br><img src="../../../../img/git.png" alt="git常用操作"><br>图中的几个专有名词：<br>Workspace：工作区<br>Index / Stage：暂存区<br>Repository：仓库区（或本地仓库）<br>Remote：远程仓库</p><h3 id="一、创建新仓库"><a href="#一、创建新仓库" class="headerlink" title="一、创建新仓库"></a>一、创建新仓库</h3><p><font style="color:#ccc;">在当前目录</font><br>git init</p><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p><font style="color:#ccc;">显示当前的 Git 配置</font><br>git config –list<br><font style="color:#ccc;">编辑 Git 配置文件</font><br>git config -e [–global]<br><font style="color:#ccc;">设置提交代码时的用户信息</font><br>git config [–global] user.name “[name]”<br>git config [–global] user.email “[email address]”</p><h3 id="三、检出仓库"><a href="#三、检出仓库" class="headerlink" title="三、检出仓库"></a>三、检出仓库</h3><p>创建一个本地仓库的克隆版本：<br>git clone /path/to/repository<br>如果是远端服务器上的仓库：<br>git clone username@host:/path/to/repository</p><h3 id="四、添加和提交"><a href="#四、添加和提交" class="headerlink" title="四、添加和提交"></a>四、添加和提交</h3><p><font style="color:#ccc;">添加到暂存区</font><br>git add [filename]<br>git add *<br>git add .<br><font style="color:#ccc;">改动已经提交到了 HEAD，但是还没到你的远端仓库</font><br>git commit -m “代码提交信息”<br><font style="color:#ccc;">提交工作区自上次 commit 之后的变化，直接到仓库区</font><br>git commit -a<br><font style="color:#ccc;">提交时显示所有 diff 信息</font><br>git commit -v</p><h3 id="五、推送改动"><a href="#五、推送改动" class="headerlink" title="五、推送改动"></a>五、推送改动</h3><p><font style="color:#ccc;">上传本地指定分支到远程仓库</font><br>git push origin master<br><font style="color:#ccc;">强行推送当前分支到远程仓库，即使有冲突</font><br>git push origin master –force</p><p>1.git 支持本地仓库有多个远程仓库<br>2.git 远程仓库需有名字，默认为 origin 3.每个仓库可以有多个分支，默认分支为 master 4.本地分支与远程分支可以不同，例如：git push origin master1:master2</p><h3 id="六、分支"><a href="#六、分支" class="headerlink" title="六、分支"></a>六、分支</h3><p><font style="color:#ccc;">列出所有本地分支</font><br>git branch<br><font style="color:#ccc;">列出所有本地分支和远程分支</font><br>git branch -a<br><font style="color:#ccc;">切换到指定分支，并更新工作区</font><br>git checkout [branch-name]<br><font style="color:#ccc;">新建一个分支，并切换到该分支</font><br>git checkout -b [branch]<br><font style="color:#ccc;">删除分支</font><br>git branch -d [branch-name]<br><font style="color:#ccc;">删除远程分支</font><br>git push origin :feature</p><h3 id="七、更新与合并"><a href="#七、更新与合并" class="headerlink" title="七、更新与合并"></a>七、更新与合并</h3><p><font style="color:#ccc;">更新本地仓库至最新改动</font><br>git pull<br><font style="color:#ccc;">合并其他分支到当前分支</font><br>git merge <branch><br><font style="color:#ccc;">从远程下载但最新代码但不 merge，不更改工作目录</font><br>git fetch</p><h3 id="八、撤销"><a href="#八、撤销" class="headerlink" title="八、撤销"></a>八、撤销</h3><p><font style="color:#ccc;">恢复暂存区的指定文件到工作区</font><br>git checkout [file]<br><font style="color:#ccc;">恢复某个 commit 的指定文件到暂存区和工作区</font><br>git checkout [commit] [file]<br><font style="color:#ccc;">恢复暂存区的所有文件到工作区</font><br>git checkout .<br><font style="color:#ccc;">重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变</font><br>git reset 版本号<br><font style="color:#ccc;">重置暂存区与工作区，与上一次 commit 保持一致</font><br>git reset –hard 版本号<br><font style="color:#ccc;">重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变</font><br>git reset [commit]<br><font style="color:#ccc;">重置当前分支的 HEAD 为指定 commit，同时重置暂存区和工作区，与指定 commit 一致</font><br>git reset –hard [commit]</p><p>可以使用 git reflog 找回，只要 commit 过就不会丢失</p><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><p><font style="color:#ccc;">显示有变更的文件</font><br>git status<br>git status -s show status concisely<br>git status -b show branch information<br><font style="color:#ccc;">显示当前分支的版本历史</font><br>git log<br><font style="color:#ccc;">显示当前分支的最近几次提交</font><br>git reflog<br><font style="color:#ccc;">显示暂存区和工作区的差异</font><br>git diff<br><font style="color:#ccc;">显示暂存区和上一个 commit 的差异</font><br>git diff –cached [file]<br><font style="color:#ccc;">显示工作区与当前分支最新 commit 之间的差异</font><br>git diff HEAD</p><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p>1.<a href="http://rogerdudler.github.io/git-guide/index.zh.html">git 简明指南</a>; 2.<a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">常用 Git 命令清单</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
            <tag> git </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/posts/63785.html"/>
      <url>/posts/63785.html</url>
      
        <content type="html"><![CDATA[<p>我的第一篇博客说什么好呢？一个走在转行路上的菜鸟，内心充满了迷茫，希望自己能内心始终向往光明！</p>]]></content>
      
      
      <categories>
          
          <category> 生活琐事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
